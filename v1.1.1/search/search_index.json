{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Qadence","text":"<p>Qadence is a Python package that provides a simple interface to build digital-analog quantum programs with tunable qubit interaction defined on arbitrary register topologies realizable on neutral atom devices.</p>"},{"location":"#feature-highlights","title":"Feature highlights","text":"<ul> <li> <p>A block-based system for composing complex digital-analog   programs in a flexible and scalable manner, inspired by the Julia quantum SDK   Yao.jl and functional programming concepts.</p> </li> <li> <p>A simple interface to work with interacting neutral-atom qubit systems   using arbitrary registers topologies.</p> </li> <li> <p>An intuitive expression-based system developed on top of the symbolic library Sympy to construct parametric quantum programs easily.</p> </li> <li> <p>High-order generalized parameter shift rules for differentiating parametrized quantum operations.</p> </li> <li> <p>Out-of-the-box automatic differentiability of quantum programs with PyTorch integration.</p> </li> <li> <p>Efficient execution on a variety of different purpose backends: from state vector simulators to tensor network emulators and real devices.</p> </li> </ul> <p>In following are some examples of Qadence possibilites in the analog, digital-analog and digital paradigms.</p>"},{"location":"#analog-emulation-of-a-perfect-state-transfer","title":"Analog emulation of a perfect state transfer","text":"<p>This next example showcases the construction and sampling of a system that admits a perfect state transfer between the two edge qubits of a three qubit register laid out in a line. This relies on time-evolving a Hamiltonian for a custom defined qubit interaction until \\(t=\\frac{\\pi}{\\sqrt 2}\\).</p> <pre><code>from torch import pi\nfrom qadence import X, Y, HamEvo, Register, product_state, sample, add\n# Define the qubit-qubit interaction term.\ndef interaction(i, j):\nreturn 0.5 * (X(i) @ X(j) + Y(i) @ Y(j))  # Compose gates in parallel and sum their contribution.\n# Initial state with left-most qubit in the 1 state.\ninit_state = product_state(\"100\")\n# Define a register of 3 qubits laid out in a line.\nregister = Register.line(n_qubits=3)\n# Define an interaction Hamiltonian by summing interactions on indexed qubits.\n# hamiltonian = interaction(0, 1) + interaction(1, 2)\nhamiltonian = add(interaction(*edge) for edge in register.edges)\n# Define and time-evolve the Hamiltonian until t=pi/sqrt(2).\nt = pi/(2**0.5)  # Dimensionless.\nevolution = HamEvo(hamiltonian, t)\n# Sample with 100 shots.\nsamples = sample(register, evolution, state=init_state, n_shots=100)\n</code></pre> <pre><code>samples = [Counter({'001': 100})]\n</code></pre>"},{"location":"#digital-analog-example","title":"Digital-analog example","text":"<p>This final example deals with the construction and sampling of an Ising Hamiltonian that includes a distance-based interaction between qubits and a global analog block of rotations around the \\(X\\)-axis. Here, global has to be understood as applied to the whole register for qubits.</p> <pre><code>from torch import pi\nfrom qadence import Register, AnalogRX, sample\n# Global analog RX block.\nblock = AnalogRX(pi)\n# Almost non-interacting qubits as too far apart.\nregister = Register.from_coordinates([(0,0), (0,15)])\nsamples = sample(register, block)\n# Interacting qubits are close to each other.\nregister = Register.from_coordinates([(0,0), (0,5)])\nsamples = sample(register, AnalogRX(pi))\n</code></pre> <pre><code>distance = 15: samples = [Counter({'11': 100})]\ndistance =  5: samples = [Counter({'01': 36, '00': 33, '10': 31})]\n</code></pre>"},{"location":"#sampling-the-canonical-bell-state","title":"Sampling the canonical Bell state","text":"<p>This example illustrates how to prepare a Bell state using digital gates and sampling from the outcome bitstring distribution:</p> <pre><code>from qadence import CNOT, H, chain, sample\n# Preparing a Bell state by composing a Hadamard and CNOT gates in sequence.\nbell_state = chain(H(0), CNOT(0,1))\n# Sample with 100 shots.\nsamples = sample(bell_state, n_shots=100)\n</code></pre> <pre><code>samples = [Counter({'00': 53, '11': 47})]\n</code></pre>"},{"location":"#further-resources","title":"Further resources","text":"<p>For a more comprehensive introduction and advanced topics, please have a look at the following tutorials:</p> <ul> <li>Quantum state conventions used throughout Qadence.</li> <li>Basic tutorials for first hands-on.</li> <li>Digital-analog basics to build quantum programs in the digital-analog paradigm.</li> <li>Parametric quantum circuits for the generation and manipulation of parametric programs.</li> <li>Advanced features about low-level backend interface and differentiablity.</li> <li><code>QuantumModel</code> for defining custom models.</li> </ul>"},{"location":"#installation-guide","title":"Installation guide","text":"<p>Qadence can be installed from PyPI with <code>pip</code> as follows:</p> <pre><code>pip install qadence\n</code></pre> <p>The default backend for Qadence is PyQTorch, a differentiable state vector simulator for digital-analog simulation. It is possible to install additional backends and the circuit visualization library using the following extras:</p> <ul> <li><code>braket</code>: the Braket backend.</li> <li><code>pulser</code>: the Pulser backend for composing, simulating and executing pulse sequences for neutral-atom quantum devices.</li> <li><code>visualization</code>: to display diagrammatically quantum circuits.</li> </ul> <p>To just get qadence with the <code>pyqtorch</code> backend, simply run:</p> <pre><code>pip install qadence\n</code></pre> <p>To install other backends or the visualization tool, please use:</p> <pre><code>pip install \"qadence[braket,pulser,visualization]\"\n</code></pre> <p>Warning</p> <p>In order to correctly install the <code>visualization</code> extra, the <code>graphviz</code> package needs to be installed in your system:</p> <pre><code># on Ubuntu\nsudo apt install graphviz\n\n# on MacOS\nbrew install graphviz\n\n# via conda\nconda install python-graphviz\n</code></pre>"},{"location":"#install-from-source","title":"Install from source","text":"<p>We recommend to use the <code>hatch</code> environment manager to install <code>qadence</code> from source:</p> <pre><code>python -m pip install hatch\n\n# get into a shell with all the dependencies\npython -m hatch shell\n\n# run a command within the virtual environment with all the dependencies\npython -m hatch run python my_script.py\n</code></pre> <p>Warning</p> <p><code>hatch</code> will not combine nicely with other environment managers such Conda. If you want to use Conda, install it from source using <code>pip</code>:</p> <pre><code># within the Conda environment\npython -m pip install -e .\n</code></pre>"},{"location":"#citation","title":"Citation","text":"<p>If you use Qadence for a publication, we kindly ask you to cite our work using the following BibTex entry:</p> <pre><code>@misc{qadence2023pasqal,\n  url = {https://github.com/pasqal-io/qadence},\n  title = {Qadence: {A} {D}igital-analog quantum programming interface.},\n  year = {2023}\n}\n</code></pre>"},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CONTRIBUTING/","title":"How to contribute","text":"<p>We're grateful for your interest in participating in Qadence. Please follow our guidelines to ensure a smooth contribution process.</p>"},{"location":"CONTRIBUTING/#reporting-an-issue-or-proposing-a-feature","title":"Reporting an issue or proposing a feature","text":"<p>Your course of action will depend on your objective, but generally, you should start by creating an issue. If you've discovered a bug or have a feature you'd like to see added to qadence, feel free to create an issue on qadence's GitHub issue tracker. Here are some steps to take:</p> <ol> <li>Quickly search the existing issues using relevant keywords to ensure your issue hasn't been addressed already.</li> <li> <p>If your issue is not listed, create a new one. Try to be as detailed and clear as possible in your description.</p> </li> <li> <p>If you're merely suggesting an improvement or reporting a bug, that's already excellent! We thank you for it. Your issue will be listed and, hopefully, addressed at some point.</p> </li> <li>However, if you're willing to be the one solving the issue, that would be even better! In such instances, you would proceed by preparing a Pull Request.</li> </ol>"},{"location":"CONTRIBUTING/#submitting-a-pull-request","title":"Submitting a pull request","text":"<p>We're excited that you're eager to contribute to Qadence. To contribute, fork the <code>main</code> branch of qadence repository and once you are satisfied with your feature and all the tests pass create a Pull Request.</p> <p>Here's the process for making a contribution:</p> <p>Click the \"Fork\" button at the upper right corner of the repo page to create a new GitHub repo at <code>https://github.com/USERNAME/qadence</code>, where <code>USERNAME</code> is your GitHub ID. Then, <code>cd</code> into the directory where you want to place your new fork and clone it:</p> <pre><code>git clone https://github.com/USERNAME/qadence.git\n</code></pre> <p>Next, navigate to your new qadence fork directory and mark the main qadence repository as the <code>upstream</code>:</p> <pre><code>git remote add upstream https://github.com/pasqal-io/qadence.git\n</code></pre>"},{"location":"CONTRIBUTING/#setting-up-your-development-environment","title":"Setting up your development environment","text":"<p>We recommended to use <code>hatch</code> for managing environments:</p> <p>To develop within qadence, use: <pre><code>pip install hatch\nhatch -v shell\n</code></pre></p> <p>To run qadence tests, use:</p> <pre><code>hatch -e tests run test\n</code></pre> <p>If you don't want to use <code>hatch</code>, you can use the environment manager of your choice (e.g. Conda) and execute the following:</p> <pre><code>pip install pytest\npip install -e .\npytest\n</code></pre>"},{"location":"CONTRIBUTING/#useful-things-for-your-workflow-linting-and-testing","title":"Useful things for your workflow: linting and testing","text":"<p>Use <code>pre-commit</code> to lint your code and run the unit tests before pushing a new commit.</p> <p>Using <code>hatch</code>, it's simply:</p> <pre><code>hatch -e tests run pre-commit run --all-files\nhatch -e tests run test\n</code></pre> <p>Our CI/CD pipeline will also test if the documentation can be built correctly. To test it locally, please run:</p> <pre><code>hatch -e docs run mkdocs build --clean --strict\n</code></pre> <p>Without <code>hatch</code>, <code>pip</code> install those libraries first: \"mkdocs\", \"mkdocs-material\", \"mkdocstrings\", \"mkdocstrings-python\", \"mkdocs-section-index\", \"mkdocs-jupyter\", \"mkdocs-exclude\", \"markdown-exec\"</p> <p>And then:</p> <pre><code> mkdocs build --clean --strict\n</code></pre>"},{"location":"models/","title":"Quantum models","text":""},{"location":"models/#qadence.models.quantum_model.QuantumModel","title":"<code>QuantumModel(circuit, observable=None, backend=BackendName.PYQTORCH, diff_mode=DiffMode.AD, measurement=None, noise=None, mitigation=None, configuration=None)</code>","text":"<p>             Bases: <code>Module</code></p> <p>The central class of qadence that executes <code>QuantumCircuit</code>s and make them differentiable.</p> <p>This class should be used as base class for any new quantum model supported in the qadence framework for information on the implementation of custom models see here.</p> <p>Initialize a generic QuantumModel instance.</p> PARAMETER  DESCRIPTION <code>circuit</code> <p>The circuit that is executed.</p> <p> TYPE: <code>QuantumCircuit</code> </p> <code>observable</code> <p>Optional observable(s) that are used only in the <code>expectation</code> method. You can also provide observables on the fly to the expectation call directly.</p> <p> TYPE: <code>list[AbstractBlock] | AbstractBlock | None</code> DEFAULT: <code>None</code> </p> <code>backend</code> <p>A backend for circuit execution.</p> <p> TYPE: <code>BackendName | str</code> DEFAULT: <code>PYQTORCH</code> </p> <code>diff_mode</code> <p>A differentiability mode. Parameter shift based modes work on all backends. AD based modes only on PyTorch based backends.</p> <p> TYPE: <code>DiffMode</code> DEFAULT: <code>AD</code> </p> <code>measurement</code> <p>Optional measurement protocol. If None, use exact expectation value with a statevector simulator.</p> <p> TYPE: <code>Measurements | None</code> DEFAULT: <code>None</code> </p> <code>configuration</code> <p>Configuration for the backend.</p> <p> TYPE: <code>BackendConfiguration | dict | None</code> DEFAULT: <code>None</code> </p> <code>noise</code> <p>A noise model to use.</p> <p> TYPE: <code>Noise | None</code> DEFAULT: <code>None</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>if the <code>diff_mode</code> argument is set to None</p> Source code in <code>qadence/models/quantum_model.py</code> <pre><code>def __init__(\nself,\ncircuit: QuantumCircuit,\nobservable: list[AbstractBlock] | AbstractBlock | None = None,\nbackend: BackendName | str = BackendName.PYQTORCH,\ndiff_mode: DiffMode = DiffMode.AD,\nmeasurement: Measurements | None = None,\nnoise: Noise | None = None,\nmitigation: Mitigations | None = None,\nconfiguration: BackendConfiguration | dict | None = None,\n):\n\"\"\"Initialize a generic QuantumModel instance.\n    Arguments:\n        circuit: The circuit that is executed.\n        observable: Optional observable(s) that are used only in the `expectation` method. You\n            can also provide observables on the fly to the expectation call directly.\n        backend: A backend for circuit execution.\n        diff_mode: A differentiability mode. Parameter shift based modes work on all backends.\n            AD based modes only on PyTorch based backends.\n        measurement: Optional measurement protocol. If None, use\n            exact expectation value with a statevector simulator.\n        configuration: Configuration for the backend.\n        noise: A noise model to use.\n    Raises:\n        ValueError: if the `diff_mode` argument is set to None\n    \"\"\"\nsuper().__init__()\nif not isinstance(circuit, QuantumCircuit):\nTypeError(\nf\"The circuit should be of type '&lt;class QuantumCircuit&gt;'. Got {type(circuit)}.\"\n)\nself.inputs = [p for p in circuit.unique_parameters if not p.trainable and not p.is_number]\nif diff_mode is None:\nraise ValueError(\"`diff_mode` cannot be `None` in a `QuantumModel`.\")\nself.backend = backend_factory(\nbackend=backend, diff_mode=diff_mode, configuration=configuration\n)\nif isinstance(observable, list) or observable is None:\nobservable = observable\nelse:\nobservable = [observable]\nconv = self.backend.convert(circuit, observable)\nself.embedding_fn = conv.embedding_fn\nself._circuit = conv.circuit\nself._observable = conv.observable\nself._backend_name = backend\nself._diff_mode = diff_mode\nself._measurement = measurement\nself._noise = noise\nself._mitigation = mitigation\nself._params = nn.ParameterDict(\n{\nstr(key): nn.Parameter(val, requires_grad=val.requires_grad)\nfor key, val in conv.params.items()\n}\n)\n</code></pre>"},{"location":"models/#qadence.models.quantum_model.QuantumModel.in_features","title":"<code>in_features: int</code>  <code>property</code>","text":"<p>Number of inputs.</p>"},{"location":"models/#qadence.models.quantum_model.QuantumModel.num_vparams","title":"<code>num_vparams: int</code>  <code>property</code>","text":"<p>The number of variational parameters.</p>"},{"location":"models/#qadence.models.quantum_model.QuantumModel.out_features","title":"<code>out_features: int | None</code>  <code>property</code>","text":"<p>Number of outputs.</p>"},{"location":"models/#qadence.models.quantum_model.QuantumModel.vals_vparams","title":"<code>vals_vparams: Tensor</code>  <code>property</code>","text":"<p>Dictionary with parameters which are actually updated during optimization.</p>"},{"location":"models/#qadence.models.quantum_model.QuantumModel.assign_parameters","title":"<code>assign_parameters(values)</code>","text":"<p>Return the final, assigned circuit that is used in e.g. <code>backend.run</code>.</p> Source code in <code>qadence/models/quantum_model.py</code> <pre><code>def assign_parameters(self, values: dict[str, Tensor]) -&gt; Any:\n\"\"\"Return the final, assigned circuit that is used in e.g. `backend.run`.\"\"\"\nparams = self.embedding_fn(self._params, values)\nreturn self.backend.assign_parameters(self._circuit, params)\n</code></pre>"},{"location":"models/#qadence.models.quantum_model.QuantumModel.expectation","title":"<code>expectation(values={}, observable=None, state=None, measurement=None, noise=None, mitigation=None, endianness=Endianness.BIG)</code>","text":"<p>Compute expectation using the given backend.</p> RETURNS DESCRIPTION <code>Tensor</code> <p>A torch.Tensor of shape n_batches x n_obs</p> Source code in <code>qadence/models/quantum_model.py</code> <pre><code>def expectation(\nself,\nvalues: dict[str, Tensor] = {},\nobservable: list[ConvertedObservable] | ConvertedObservable | None = None,\nstate: Optional[Tensor] = None,\nmeasurement: Measurements | None = None,\nnoise: Noise | None = None,\nmitigation: Mitigations | None = None,\nendianness: Endianness = Endianness.BIG,\n) -&gt; Tensor:\n\"\"\"Compute expectation using the given backend.\n    Returns:\n        A torch.Tensor of shape n_batches x n_obs\n    \"\"\"\nif observable is None:\nif self._observable is None:\nraise ValueError(\n\"Provide an AbstractBlock as the observable to compute expectation.\"\n\"Either pass a 'native_observable' directly to 'QuantumModel.expectation'\"\n\"or pass a (non-native) '&lt;class AbstractBlock&gt;' to the 'QuantumModel.__init__'.\"\n)\nobservable = self._observable\nparams = self.embedding_fn(self._params, values)\nif measurement is None:\nmeasurement = self._measurement\nif noise is None:\nnoise = self._noise\nif mitigation is None:\nmitigation = self._mitigation\nreturn self.backend.expectation(\ncircuit=self._circuit,\nobservable=observable,\nparam_values=params,\nstate=state,\nmeasurement=measurement,\nnoise=noise,\nmitigation=mitigation,\nendianness=endianness,\n)\n</code></pre>"},{"location":"models/#qadence.models.quantum_model.QuantumModel.reset_vparams","title":"<code>reset_vparams(values)</code>","text":"<p>Reset all the variational parameters with a given list of values.</p> Source code in <code>qadence/models/quantum_model.py</code> <pre><code>def reset_vparams(self, values: Sequence) -&gt; None:\n\"\"\"Reset all the variational parameters with a given list of values.\"\"\"\ncurrent_vparams = OrderedDict({k: v for k, v in self._params.items() if v.requires_grad})\nassert (\nlen(values) == self.num_vparams\n), \"Pass an iterable with the values of all variational parameters\"\nfor i, k in enumerate(current_vparams.keys()):\ncurrent_vparams[k].data = torch.tensor([values[i]])\n</code></pre>"},{"location":"models/#qadence.models.qnn.QNN","title":"<code>QNN(circuit, observable, transform=None, backend=BackendName.PYQTORCH, diff_mode=DiffMode.AD, measurement=None, noise=None, configuration=None)</code>","text":"<p>             Bases: <code>QuantumModel</code></p> <p>Quantum neural network model for n-dimensional inputs.</p> <p>Examples: <pre><code>import torch\nfrom qadence import QuantumCircuit, QNN\nfrom qadence import hea, feature_map, hamiltonian_factory, Z\n# create the circuit\nn_qubits, depth = 2, 4\nfm = feature_map(n_qubits)\nansatz = hea(n_qubits=n_qubits, depth=depth)\ncircuit = QuantumCircuit(n_qubits, fm, ansatz)\nobs_base = hamiltonian_factory(n_qubits, detuning = Z)\n# the QNN will yield two outputs\nobs = [2.0 * obs_base, 4.0 * obs_base]\n# initialize and use the model\nqnn = QNN(circuit, obs, diff_mode=\"ad\", backend=\"pyqtorch\")\ny = qnn.expectation({\"phi\": torch.rand(3)})\n</code></pre> <pre><code>tensor([[0.7110, 1.4221],\n[1.6172, 3.2344],\n[1.1616, 2.3231]], grad_fn=&lt;CatBackward0&gt;)\n</code></pre> </p> <p>Initialize the QNN.</p> <p>The number of inputs is determined by the feature parameters in the input quantum circuit while the number of outputs is determined by how many observables are provided as input</p> PARAMETER  DESCRIPTION <code>circuit</code> <p>The quantum circuit to use for the QNN.</p> <p> TYPE: <code>QuantumCircuit</code> </p> <code>transform</code> <p>A transformation applied to the output of the QNN.</p> <p> TYPE: <code>Callable[[Tensor], Tensor]</code> DEFAULT: <code>None</code> </p> <code>backend</code> <p>The chosen quantum backend.</p> <p> TYPE: <code>BackendName</code> DEFAULT: <code>PYQTORCH</code> </p> <code>diff_mode</code> <p>The differentiation engine to use. Choices 'gpsr' or 'ad'.</p> <p> TYPE: <code>DiffMode</code> DEFAULT: <code>AD</code> </p> <code>measurement</code> <p>optional measurement protocol. If None, use exact expectation value with a statevector simulator</p> <p> TYPE: <code>Measurements | None</code> DEFAULT: <code>None</code> </p> <code>noise</code> <p>A noise model to use.</p> <p> TYPE: <code>Noise | None</code> DEFAULT: <code>None</code> </p> <code>configuration</code> <p>optional configuration for the backend</p> <p> TYPE: <code>BackendConfiguration | dict | None</code> DEFAULT: <code>None</code> </p> Source code in <code>qadence/models/qnn.py</code> <pre><code>def __init__(\nself,\ncircuit: QuantumCircuit,\nobservable: list[AbstractBlock] | AbstractBlock,\ntransform: Callable[[Tensor], Tensor] = None,  # transform output of the QNN\nbackend: BackendName = BackendName.PYQTORCH,\ndiff_mode: DiffMode = DiffMode.AD,\nmeasurement: Measurements | None = None,\nnoise: Noise | None = None,\nconfiguration: BackendConfiguration | dict | None = None,\n):\n\"\"\"Initialize the QNN.\n    The number of inputs is determined by the feature parameters in the input\n    quantum circuit while the number of outputs is determined by how many\n    observables are provided as input\n    Args:\n        circuit: The quantum circuit to use for the QNN.\n        transform: A transformation applied to the output of the QNN.\n        backend: The chosen quantum backend.\n        diff_mode: The differentiation engine to use. Choices 'gpsr' or 'ad'.\n        measurement: optional measurement protocol. If None,\n            use exact expectation value with a statevector simulator\n        noise: A noise model to use.\n        configuration: optional configuration for the backend\n    \"\"\"\nsuper().__init__(\ncircuit=circuit,\nobservable=observable,\nbackend=backend,\ndiff_mode=diff_mode,\nmeasurement=measurement,\nconfiguration=configuration,\nnoise=noise,\n)\nif self.out_features is None:\nraise ValueError(\"You need to provide at least one observable in the QNN constructor\")\nself.transform = transform if transform else lambda x: x\n</code></pre>"},{"location":"models/#qadence.models.qnn.QNN.forward","title":"<code>forward(values=None, state=None, measurement=None, noise=None, endianness=Endianness.BIG)</code>","text":"<p>Forward pass of the model.</p> <p>This returns the (differentiable) expectation value of the given observable operator defined in the constructor. Differently from the base QuantumModel class, the QNN accepts also a tensor as input for the forward pass. The tensor is expected to have shape: <code>n_batches x in_features</code> where <code>n_batches</code> is the number of data points and <code>in_features</code> is the dimensionality of the problem</p> <p>The output of the forward pass is the expectation value of the input observable(s). If a single observable is given, the output shape is <code>n_batches</code> while if multiple observables are given the output shape is instead <code>n_batches x n_observables</code></p> PARAMETER  DESCRIPTION <code>values</code> <p>the values of the feature parameters</p> <p> TYPE: <code>dict[str, Tensor] | Tensor</code> DEFAULT: <code>None</code> </p> <code>state</code> <p>Initial state.</p> <p> TYPE: <code>Tensor | None</code> DEFAULT: <code>None</code> </p> <code>measurement</code> <p>optional measurement protocol. If None, use exact expectation value with a statevector simulator</p> <p> TYPE: <code>Measurements | None</code> DEFAULT: <code>None</code> </p> <code>noise</code> <p>A noise model to use.</p> <p> TYPE: <code>Noise | None</code> DEFAULT: <code>None</code> </p> <code>endianness</code> <p>Endianness of the resulting bit strings.</p> <p> TYPE: <code>Endianness</code> DEFAULT: <code>BIG</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>a tensor with the expectation value of the observables passed in the constructor of the model</p> <p> TYPE: <code>Tensor</code> </p> Source code in <code>qadence/models/qnn.py</code> <pre><code>def forward(\nself,\nvalues: dict[str, Tensor] | Tensor = None,\nstate: Tensor | None = None,\nmeasurement: Measurements | None = None,\nnoise: Noise | None = None,\nendianness: Endianness = Endianness.BIG,\n) -&gt; Tensor:\n\"\"\"Forward pass of the model.\n    This returns the (differentiable) expectation value of the given observable\n    operator defined in the constructor. Differently from the base QuantumModel\n    class, the QNN accepts also a tensor as input for the forward pass. The\n    tensor is expected to have shape: `n_batches x in_features` where `n_batches`\n    is the number of data points and `in_features` is the dimensionality of the problem\n    The output of the forward pass is the expectation value of the input\n    observable(s). If a single observable is given, the output shape is\n    `n_batches` while if multiple observables are given the output shape\n    is instead `n_batches x n_observables`\n    Args:\n        values (dict[str, Tensor] | Tensor): the values of the feature parameters\n        state: Initial state.\n        measurement: optional measurement protocol. If None,\n            use exact expectation value with a statevector simulator\n        noise: A noise model to use.\n        endianness: Endianness of the resulting bit strings.\n    Returns:\n        Tensor: a tensor with the expectation value of the observables passed\n            in the constructor of the model\n    \"\"\"\nif values is None:\nvalues = {}\nif not isinstance(values, dict):\nvalues = self._format_to_dict(values)\nif measurement is None:\nmeasurement = self._measurement\nif noise is None:\nnoise = self._noise\nreturn self.transform(\nself.expectation(\nvalues=values,\nstate=state,\nmeasurement=measurement,\nendianness=endianness,\nnoise=noise,\n)\n)\n</code></pre>"},{"location":"advanced_tutorials/custom-models/","title":"Custom quantum models","text":"<p>In <code>qadence</code>, the <code>QuantumModel</code> is the central class point for executing <code>QuantumCircuit</code>s.  The idea of a <code>QuantumModel</code> is to decouple the backend execution from the management of circuit parameters and desired quantum computation output.</p> <p>In the following, we create a custom <code>QuantumModel</code> instance which introduces some additional optimizable parameters: *  an adjustable scaling factor in front of the observable to measured *  adjustable scale and shift factors to be applied to the model output before returning the result</p> <p>This can be easily done using PyTorch flexible model definition, and it will automatically work with the rest of <code>qadence</code> infrastructure.</p> <pre><code>import torch\nfrom qadence import QuantumModel, QuantumCircuit\nclass CustomQuantumModel(QuantumModel):\ndef __init__(self, circuit: QuantumCircuit, observable, backend=\"pyqtorch\", diff_mode=\"ad\"):\nsuper().__init__(circuit, observable=observable, backend=backend, diff_mode=diff_mode)\nself.n_qubits = circuit.n_qubits\n# define some additional parameters which will scale and shift (variationally) the\n# output of the QuantumModel\n# you can use all torch machinery for building those\nself.scale_out = torch.nn.Parameter(torch.ones(1))\nself.shift_out = torch.nn.Parameter(torch.ones(1))\n# override the forward pass of the model\n# the forward pass is the output of your QuantumModel and in this case\n# it's the (scaled) expectation value of the total magnetization with\n# a variable coefficient in front\ndef forward(self, values: dict[str, torch.Tensor]) -&gt; torch.Tensor:\n# scale the observable\nres = self.expectation(values)\n# scale and shift the result before returning\nreturn self.shift_out + res * self.scale_out\n</code></pre> <p>The custom model can be used like any other <code>QuantumModel</code>: <pre><code>from qadence import Parameter, RX, CNOT, QuantumCircuit\nfrom qadence import chain, kron, hamiltonian_factory, Z\nfrom sympy import acos\ndef quantum_circuit(n_qubits):\nx = Parameter(\"x\", trainable=False)\nfm = kron(RX(i, acos(x) * (i+1)) for i in range(n_qubits))\nansatz = kron(RX(i, f\"theta{i}\") for i in range(n_qubits))\nansatz = chain(ansatz, CNOT(0, n_qubits-1))\nblock = chain(fm, ansatz)\nblock.tag = \"circuit\"\nreturn QuantumCircuit(n_qubits, block)\nn_qubits = 4\nbatch_size = 10\ncircuit = quantum_circuit(n_qubits)\nobservable = hamiltonian_factory(n_qubits, detuning=Z)  # Total magnetization\nmodel = CustomQuantumModel(circuit, observable, backend=\"pyqtorch\")\nvalues = {\"x\": torch.rand(batch_size)}\nres = model(values)\nprint(\"Model output: \", res)\nassert len(res) == batch_size\n</code></pre> <pre><code>Model output:  tensor([[ 1.0910],\n[-0.3106],\n[-0.0326],\n[-0.2145],\n[-0.1543],\n[-0.5374],\n[-0.5529],\n[-0.0691],\n[-0.0888],\n[-0.4947]], grad_fn=&lt;AddBackward0&gt;)\n</code></pre> </p>"},{"location":"advanced_tutorials/custom-models/#quantum-model-with-wavefunction-overlaps","title":"Quantum model with wavefunction overlaps","text":"<p><code>QuantumModel</code>'s can also use different quantum operations in their forward pass, such as wavefunction overlaps described here. Beware that the resulting overlap tensor has to be differentiable to apply gradient-based optimization. This is only applicable to the <code>\"EXACT\"</code> overlap method.</p> <p>Here we show how to use overlap calculation when fitting a parameterized quantum circuit to act as a standard Hadamard gate.</p> <pre><code>from qadence import RY, RX, H, Overlap\n# create a quantum model which acts as an Hadamard gate after training\nclass LearnHadamard(QuantumModel):\ndef __init__(\nself,\ntrain_circuit: QuantumCircuit,\ntarget_circuit: QuantumCircuit,\nbackend=\"pyqtorch\",\n):\nsuper().__init__(circuit=train_circuit, backend=backend)\nself.overlap_fn = Overlap(train_circuit, target_circuit, backend=backend, method=\"exact\", diff_mode='ad')\ndef forward(self):\nreturn self.overlap_fn()\n# compute the wavefunction of the associated train circuit\ndef wavefunction(self):\nreturn model.overlap_fn.run({})\ntrain_circuit = QuantumCircuit(1, chain(RX(0, \"phi\"), RY(0, \"theta\")))\ntarget_circuit = QuantumCircuit(1, H(0))\nmodel = LearnHadamard(train_circuit, target_circuit)\n# get the overlap between model and target circuit wavefunctions\nprint(model())\n</code></pre> <pre><code>tensor([[0.5337]], grad_fn=&lt;UnsqueezeBackward0&gt;)\n</code></pre> <p>This model can then be trained with the standard Qadence helper functions.</p> <pre><code>from qadence import run\nfrom qadence.ml_tools import train_with_grad, TrainConfig\ncriterion = torch.nn.MSELoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-1)\ndef loss_fn(model: LearnHadamard, _unused) -&gt; tuple[torch.Tensor, dict]:\nloss = criterion(torch.tensor([[1.0]]), model())\nreturn loss, {}\nconfig = TrainConfig(max_iter=2500)\nmodel, optimizer = train_with_grad(\nmodel, None, optimizer, config, loss_fn=loss_fn\n)\nwf_target = run(target_circuit)\nassert torch.allclose(wf_target, model.wavefunction(), atol=1e-2)\n</code></pre> <pre><code>\n</code></pre>"},{"location":"advanced_tutorials/differentiability/","title":"Differentiability","text":"<p>Many application in quantum computing and quantum machine learning more specifically requires the differentiation of a quantum circuit with respect to its parameters.</p> <p>In Qadence, we perform quantum computations via the <code>QuantumModel</code> interface. The derivative of the outputs of quantum models with respect to feature and variational parameters in the quantum circuit can be implemented in Qadence with two different modes:</p> <ul> <li>Automatic differentiation (AD) mode <sup>1</sup>. This mode allows to differentiation both <code>run()</code> and <code>expectation()</code> methods of the <code>QuantumModel</code> and it is the fastest available differentiation method. Under the hood, it is based on the PyTorch autograd engine wrapped by the <code>DifferentiableBackend</code> class. This mode is not working on quantum devices.</li> <li>Generalized parameter shift rule (GPSR) mode. This is general implementation of the well known parameter  shift rule algorithm <sup>2</sup> which works for arbitrary quantum operations <sup>3</sup>. This mode is only applicable to  the <code>expectation()</code> method of <code>QuantumModel</code> but it is compatible with execution or quantum devices.</li> </ul>"},{"location":"advanced_tutorials/differentiability/#automatic-differentiation","title":"Automatic differentiation","text":"<p>Automatic differentiation <sup>1</sup> is a procedure to derive a complex function defined as a sequence of elementary mathematical operations in the form of a computer program. Automatic differentiation is a cornerstone of modern machine learning and a crucial ingredient of its recent successes. In its so-called reverse mode, it follows this sequence of operations in reverse order by systematically applying the chain rule to recover the exact value of derivative. Reverse mode automatic differentiation is implemented in Qadence leveraging the PyTorch <code>autograd</code> engine.</p> <p>Only available with PyQTorch backend</p> <p>Currently, automatic differentiation mode is only available when the <code>pyqtorch</code> backend is selected.</p>"},{"location":"advanced_tutorials/differentiability/#generalized-parameter-shift-rule","title":"Generalized parameter shift rule","text":"<p>The generalized parameter shift rule implementation in Qadence was introduced in <sup>3</sup>. Here the standard parameter shift rules, which only works for quantum operations whose generator has a single gap in its eigenvalue spectrum, was generalized to work with arbitrary generators of quantum operations.</p> <p>For this, we define the differentiable function as quantum expectation value</p> \\[ f(x) = \\left\\langle 0\\right|\\hat{U}^{\\dagger}(x)\\hat{C}\\hat{U}(x)\\left|0\\right\\rangle \\] <p>where \\(\\hat{U}(x)={\\rm exp}{\\left( -i\\frac{x}{2}\\hat{G}\\right)}\\) is the quantum evolution operator with generator \\(\\hat{G}\\) representing the structure of the underlying quantum circuit and \\(\\hat{C}\\) is the cost operator. Then using the eigenvalue spectrum \\(\\left\\{ \\lambda_n\\right\\}\\) of the generator \\(\\hat{G}\\) we calculate the full set of corresponding unique non-zero spectral gaps \\(\\left\\{ \\Delta_s\\right\\}\\) (differences between eigenvalues). It can be shown that the final expression of derivative of \\(f(x)\\) is then given by the following expression:</p> <p>\\(\\begin{equation} \\frac{{\\rm d}f\\left(x\\right)}{{\\rm d}x}=\\overset{S}{\\underset{s=1}{\\sum}}\\Delta_{s}R_{s}, \\end{equation}\\)</p> <p>where \\(S\\) is the number of unique non-zero spectral gaps and \\(R_s\\) are real quantities that are solutions of a system of linear equations</p> <p>\\(\\begin{equation} \\begin{cases} F_{1} &amp; =4\\overset{S}{\\underset{s=1}{\\sum}}{\\rm sin}\\left(\\frac{\\delta_{1}\\Delta_{s}}{2}\\right)R_{s},\\\\ F_{2} &amp; =4\\overset{S}{\\underset{s=1}{\\sum}}{\\rm sin}\\left(\\frac{\\delta_{2}\\Delta_{s}}{2}\\right)R_{s},\\\\  &amp; ...\\\\ F_{S} &amp; =4\\overset{S}{\\underset{s=1}{\\sum}}{\\rm sin}\\left(\\frac{\\delta_{M}\\Delta_{s}}{2}\\right)R_{s}. \\end{cases} \\end{equation}\\)</p> <p>Here \\(F_s=f(x+\\delta_s)-f(x-\\delta_s)\\) denotes the difference between values of functions evaluated at shifted arguments \\(x\\pm\\delta_s\\).</p>"},{"location":"advanced_tutorials/differentiability/#usage","title":"Usage","text":""},{"location":"advanced_tutorials/differentiability/#basics","title":"Basics","text":"<p>In Qadence, the GPSR differentiation engine can be selected by passing <code>diff_mode=\"gpsr\"</code> or, equivalently, <code>diff_mode=DiffMode.GPSR</code> to a <code>QuantumModel</code> instance. The code in the box below shows how to create <code>QuantumModel</code> instances with both AD and GPSR engines.</p> <pre><code>from qadence import (FeatureParameter, HamEvo, X, I, Z,\nhamiltonian_factory, QuantumCircuit,\nQuantumModel, BackendName, DiffMode)\nimport torch\nn_qubits = 2\n# define differentiation parameter\nx = FeatureParameter(\"x\")\n# define generator and HamEvo block\ngenerator = X(0) + X(1) + 0.2 * (Z(0) + I(1)) * (I(0) + Z(1))\nblock = HamEvo(generator, x)\n# create quantum circuit\ncircuit = QuantumCircuit(n_qubits, block)\n# create total magnetization cost operator\nobs = hamiltonian_factory(n_qubits, detuning=Z)\n# create models with AD and GPSR differentiation engines\nmodel_ad = QuantumModel(circuit, obs,\nbackend=BackendName.PYQTORCH,\ndiff_mode=DiffMode.AD)\nmodel_gpsr = QuantumModel(circuit, obs,\nbackend=BackendName.PYQTORCH,\ndiff_mode=DiffMode.GPSR)\n# generate value for circuit's parameter\nxs = torch.linspace(0, 2*torch.pi, 100, requires_grad=True)\nvalues = {\"x\": xs}\n# calculate function f(x)\nexp_val_ad = model_ad.expectation(values)\nexp_val_gpsr = model_gpsr.expectation(values)\n# calculate derivative df/dx using the PyTorch\n# autograd engine\ndexpval_x_ad = torch.autograd.grad(\nexp_val_ad, values[\"x\"], torch.ones_like(exp_val_ad), create_graph=True\n)[0]\ndexpval_x_gpsr = torch.autograd.grad(\nexp_val_gpsr, values[\"x\"], torch.ones_like(exp_val_gpsr), create_graph=True\n)[0]\n</code></pre> <p>We can plot the resulting derivatives and see that in both cases they coincide.</p> <pre><code>import matplotlib.pyplot as plt\n# plot f(x) and df/dx derivatives calculated using AD and GPSR\n# differentiation engines\nfig, ax = plt.subplots()\nax.scatter(xs.detach().numpy(),\nexp_val_ad.detach().numpy(),\nlabel=\"f(x)\")\nax.scatter(xs.detach().numpy(),\ndexpval_x_ad.detach().numpy(),\nlabel=\"df/dx AD\")\nax.scatter(xs.detach().numpy(),\ndexpval_x_gpsr.detach().numpy(),\ns=5,\nlabel=\"df/dx GPSR\")\nplt.legend()\n</code></pre> 2023-11-27T12:00:38.586248 image/svg+xml Matplotlib v3.7.4, https://matplotlib.org/"},{"location":"advanced_tutorials/differentiability/#low-level-control-on-the-shift-values","title":"Low-level control on the shift values","text":"<p>In order to get a finer control over the GPSR differentiation engine we can use the low-level Qadence API to define a <code>DifferentiableBackend</code>.</p> <pre><code>from qadence import DifferentiableBackend\nfrom qadence.backends.pyqtorch import Backend as PyQBackend\n# define differentiable quantum backend\nquantum_backend = PyQBackend()\nconv = quantum_backend.convert(circuit, obs)\npyq_circ, pyq_obs, embedding_fn, params = conv\ndiff_backend = DifferentiableBackend(quantum_backend, diff_mode=DiffMode.GPSR, shift_prefac=0.2)\n# calculate function f(x)\nexpval = diff_backend.expectation(pyq_circ, pyq_obs, embedding_fn(params, values))\n</code></pre> <p>Here we passed an additional argument <code>shift_prefac</code> to the <code>DifferentiableBackend</code> instance that governs the magnitude of shifts \\(\\delta\\equiv\\alpha\\delta^\\prime\\) shown in equation (2) above. In this relation \\(\\delta^\\prime\\) is set internally and \\(\\alpha\\) is the value passed by <code>shift_prefac</code> and the resulting shift value \\(\\delta\\) is then used in all the following GPSR calculations.</p> <p>Tuning parameter \\(\\alpha\\) is useful to improve results when the generator \\(\\hat{G}\\) or the quantum operation is a dense matrix, for example a complex <code>HamEvo</code> operation; if many entries of this matrix are sufficiently larger than 0 the operation is equivalent to a strongly interacting system. In such case parameter \\(\\alpha\\) should be gradually lowered in order to achieve exact derivative values.</p>"},{"location":"advanced_tutorials/differentiability/#references","title":"References","text":"<ol> <li> <p>A. G. Baydin et al., Automatic Differentiation in Machine Learning: a Survey \u21a9\u21a9</p> </li> <li> <p>Schuld et al., Evaluating analytic gradients on quantum hardware (2018). \u21a9</p> </li> <li> <p>Kyriienko et al., General quantum circuit differentiation rules \u21a9\u21a9</p> </li> </ol>"},{"location":"backends/backend/","title":"Abstract backend","text":""},{"location":"backends/backend/#qadence.backend.Backend","title":"<code>Backend</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ABC</code></p> <p>The abstract class that defines the interface for the backends.</p> ATTRIBUTE DESCRIPTION <code>name</code> <p>backend unique string identifier</p> <p> TYPE: <code>BackendName</code> </p> <code>supports_ad</code> <p>whether or not the backend has a native autograd</p> <p> TYPE: <code>bool</code> </p> <code>supports_bp</code> <p>whether or not the backend has a native backprop</p> <p> TYPE: <code>bool</code> </p> <code>is_remote</code> <p>whether computations are executed locally or remotely on this backend, useful when using cloud platforms where credentials are needed for example.</p> <p> TYPE: <code>bool</code> </p> <code>with_measurements</code> <p>whether it supports counts or not</p> <p> TYPE: <code>bool</code> </p> <code>with_noise</code> <p>whether to add realistic noise or not</p> <p> TYPE: <code>bool</code> </p>"},{"location":"backends/backend/#qadence.backend.Backend.circuit","title":"<code>circuit(circuit)</code>  <code>abstractmethod</code>","text":"<p>Converts an abstract <code>QuantumCircuit</code> to the native backend representation.</p> PARAMETER  DESCRIPTION <code>circuit</code> <p>A circuit, for example: <code>QuantumCircuit(2, X(0))</code></p> <p> TYPE: <code>QuantumCircuit</code> </p> RETURNS DESCRIPTION <code>ConvertedCircuit</code> <p>A converted circuit <code>c</code>. You can access the original, arbstract circuit via <code>c.abstract</code></p> <code>ConvertedCircuit</code> <p>and the converted (or backend native) circuit via <code>c.native</code>.</p> Source code in <code>qadence/backend.py</code> <pre><code>@abstractmethod\ndef circuit(self, circuit: QuantumCircuit) -&gt; ConvertedCircuit:\n\"\"\"Converts an abstract `QuantumCircuit` to the native backend representation.\n    Arguments:\n        circuit: A circuit, for example: `QuantumCircuit(2, X(0))`\n    Returns:\n        A converted circuit `c`. You can access the original, arbstract circuit via `c.abstract`\n        and the converted (or backend *native*) circuit via `c.native`.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"backends/backend/#qadence.backend.Backend.convert","title":"<code>convert(circuit, observable=None)</code>","text":"<p>Convert an abstract circuit and an optional observable to their native representation.</p> <p>Additionally, this function constructs an embedding function which maps from user-facing parameters to device parameters (read more on parameter embedding here).</p> Source code in <code>qadence/backend.py</code> <pre><code>def convert(\nself, circuit: QuantumCircuit, observable: list[AbstractBlock] | AbstractBlock | None = None\n) -&gt; Converted:\n\"\"\"Convert an abstract circuit and an optional observable to their native representation.\n    Additionally, this function constructs an embedding function which maps from\n    user-facing parameters to device parameters (read more on parameter embedding\n    [here][qadence.blocks.embedding.embedding]).\n    \"\"\"\ndef check_observable(obs_obj: Any) -&gt; AbstractBlock:\nif isinstance(obs_obj, QubitOperator):\nfrom qadence.blocks.manipulate import from_openfermion\nassert len(obs_obj.terms) &gt; 0, \"Make sure to give a non-empty qubit hamiltonian\"\nreturn from_openfermion(obs_obj)\nelif isinstance(obs_obj, (CompositeBlock, PrimitiveBlock, ScaleBlock)):\nfrom qadence.blocks.utils import block_is_qubit_hamiltonian\nassert block_is_qubit_hamiltonian(\nobs_obj\n), \"Make sure the QubitHamiltonian consists only of Pauli operators X, Y, Z, I\"\nreturn obs_obj\nraise TypeError(\n\"qubit_hamiltonian should be a Pauli-like AbstractBlock or a QubitOperator\"\n)\nconv_circ = self.circuit(circuit)\ncirc_params, circ_embedding_fn = embedding(\nconv_circ.abstract.block, self.config._use_gate_params\n)\nparams = circ_params\nif observable is not None:\nobservable = observable if isinstance(observable, list) else [observable]\nconv_obs = []\nobs_embedding_fn_list = []\nfor obs in observable:\nobs = check_observable(obs)\nc_obs = self.observable(obs, max(circuit.n_qubits, obs.n_qubits))\nobs_params, obs_embedding_fn = embedding(\nc_obs.abstract, self.config._use_gate_params\n)\nparams.update(obs_params)\nobs_embedding_fn_list.append(obs_embedding_fn)\nconv_obs.append(c_obs)\ndef embedding_fn_dict(a: dict, b: dict) -&gt; dict:\nembedding_dict = circ_embedding_fn(a, b)\nfor o in obs_embedding_fn_list:\nembedding_dict.update(o(a, b))\nreturn embedding_dict\nreturn Converted(conv_circ, conv_obs, embedding_fn_dict, params)\ndef embedding_fn(a: dict, b: dict) -&gt; dict:\nreturn circ_embedding_fn(a, b)\nreturn Converted(conv_circ, None, embedding_fn, params)\n</code></pre>"},{"location":"backends/backend/#qadence.backend.Backend.expectation","title":"<code>expectation(circuit, observable, param_values={}, state=None, measurement=None, noise=None, mitigation=None, endianness=Endianness.BIG)</code>  <code>abstractmethod</code>","text":"<p>Compute the expectation value of the <code>circuit</code> with the given <code>observable</code>.</p> PARAMETER  DESCRIPTION <code>circuit</code> <p>A converted circuit as returned by <code>backend.circuit</code>.</p> <p> TYPE: <code>ConvertedCircuit</code> </p> <code>param_values</code> <p>Already embedded parameters of the circuit. See <code>embedding</code> for more info.</p> <p> TYPE: <code>dict[str, Tensor]</code> DEFAULT: <code>{}</code> </p> <code>state</code> <p>Initial state.</p> <p> TYPE: <code>Tensor | None</code> DEFAULT: <code>None</code> </p> <code>measurement</code> <p>Optional measurement protocol. If None, use exact expectation value with a statevector simulator.</p> <p> TYPE: <code>Measurements | None</code> DEFAULT: <code>None</code> </p> <code>noise</code> <p>A noise model to use.</p> <p> TYPE: <code>Noise | None</code> DEFAULT: <code>None</code> </p> <code>endianness</code> <p>Endianness of the resulting bit strings.</p> <p> TYPE: <code>Endianness</code> DEFAULT: <code>BIG</code> </p> Source code in <code>qadence/backend.py</code> <pre><code>@abstractmethod\ndef expectation(\nself,\ncircuit: ConvertedCircuit,\nobservable: list[ConvertedObservable] | ConvertedObservable,\nparam_values: dict[str, Tensor] = {},\nstate: Tensor | None = None,\nmeasurement: Measurements | None = None,\nnoise: Noise | None = None,\nmitigation: Mitigations | None = None,\nendianness: Endianness = Endianness.BIG,\n) -&gt; Tensor:\n\"\"\"Compute the expectation value of the `circuit` with the given `observable`.\n    Arguments:\n        circuit: A converted circuit as returned by `backend.circuit`.\n        param_values: _**Already embedded**_ parameters of the circuit. See\n            [`embedding`][qadence.blocks.embedding.embedding] for more info.\n        state: Initial state.\n        measurement: Optional measurement protocol. If None, use\n            exact expectation value with a statevector simulator.\n        noise: A noise model to use.\n        endianness: Endianness of the resulting bit strings.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"backends/backend/#qadence.backend.Backend.observable","title":"<code>observable(observable, n_qubits)</code>  <code>abstractmethod</code>","text":"<p>Converts an abstract observable (which is just an <code>AbstractBlock</code>) to the native backend.</p> <p>representation.</p> PARAMETER  DESCRIPTION <code>observable</code> <p>An observable.</p> <p> TYPE: <code>AbstractBlock</code> </p> <code>n_qubits</code> <p>Number of qubits the observable covers. This is typically <code>circuit.n_qubits</code>.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>ConvertedObservable</code> <p>A converted observable <code>o</code>. You can access the original, arbstract observable via</p> <code>ConvertedObservable</code> <p><code>o.abstract</code> and the converted (or backend native) observable via <code>o.native</code>.</p> Source code in <code>qadence/backend.py</code> <pre><code>@abstractmethod\ndef observable(self, observable: AbstractBlock, n_qubits: int) -&gt; ConvertedObservable:\n\"\"\"Converts an abstract observable (which is just an `AbstractBlock`) to the native backend.\n    representation.\n    Arguments:\n        observable: An observable.\n        n_qubits: Number of qubits the observable covers. This is typically `circuit.n_qubits`.\n    Returns:\n        A converted observable `o`. You can access the original, arbstract observable via\n        `o.abstract` and the converted (or backend *native*) observable via `o.native`.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"backends/backend/#qadence.backend.Backend.run","title":"<code>run(circuit, param_values={}, state=None, endianness=Endianness.BIG)</code>  <code>abstractmethod</code>","text":"<p>Run a circuit and return the resulting wave function.</p> PARAMETER  DESCRIPTION <code>circuit</code> <p>A converted circuit as returned by <code>backend.circuit</code>.</p> <p> TYPE: <code>ConvertedCircuit</code> </p> <code>param_values</code> <p>Already embedded parameters of the circuit. See <code>embedding</code> for more info.</p> <p> TYPE: <code>dict[str, Tensor]</code> DEFAULT: <code>{}</code> </p> <code>state</code> <p>Initial state.</p> <p> TYPE: <code>Tensor | None</code> DEFAULT: <code>None</code> </p> <code>endianness</code> <p>Endianness of the resulting wavefunction.</p> <p> TYPE: <code>Endianness</code> DEFAULT: <code>BIG</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>A list of Counter objects where each key represents a bitstring</p> <code>Tensor</code> <p>and its value the number of times it has been sampled from the given wave function.</p> Source code in <code>qadence/backend.py</code> <pre><code>@abstractmethod\ndef run(\nself,\ncircuit: ConvertedCircuit,\nparam_values: dict[str, Tensor] = {},\nstate: Tensor | None = None,\nendianness: Endianness = Endianness.BIG,\n) -&gt; Tensor:\n\"\"\"Run a circuit and return the resulting wave function.\n    Arguments:\n        circuit: A converted circuit as returned by `backend.circuit`.\n        param_values: _**Already embedded**_ parameters of the circuit. See\n            [`embedding`][qadence.blocks.embedding.embedding] for more info.\n        state: Initial state.\n        endianness: Endianness of the resulting wavefunction.\n    Returns:\n        A list of Counter objects where each key represents a bitstring\n        and its value the number of times it has been sampled from the given wave function.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"backends/backend/#qadence.backend.Backend.run_dm","title":"<code>run_dm(circuit, noise, param_values={}, state=None, endianness=Endianness.BIG)</code>  <code>abstractmethod</code>","text":"<p>Run a circuit and return the resulting the density matrix.</p> <p>TODO: Temporary method for the purposes of noise model implementation. To be removed in a later refactoring.</p> PARAMETER  DESCRIPTION <code>circuit</code> <p>A converted circuit as returned by <code>backend.circuit</code>.</p> <p> TYPE: <code>ConvertedCircuit</code> </p> <code>param_values</code> <p>Already embedded parameters of the circuit. See <code>embedding</code> for more info.</p> <p> TYPE: <code>dict[str, Tensor]</code> DEFAULT: <code>{}</code> </p> <code>state</code> <p>Initial state.</p> <p> TYPE: <code>Tensor | None</code> DEFAULT: <code>None</code> </p> <code>endianness</code> <p>Endianness of the resulting density matrix.</p> <p> TYPE: <code>Endianness</code> DEFAULT: <code>BIG</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>A list of Counter objects where each key represents a bitstring</p> <code>Tensor</code> <p>and its value the number of times it has been sampled from the given wave function.</p> Source code in <code>qadence/backend.py</code> <pre><code>@abstractmethod\ndef run_dm(\nself,\ncircuit: ConvertedCircuit,\nnoise: Noise,\nparam_values: dict[str, Tensor] = {},\nstate: Tensor | None = None,\nendianness: Endianness = Endianness.BIG,\n) -&gt; Tensor:\n\"\"\"Run a circuit and return the resulting the density matrix.\n    TODO: Temporary method for the purposes of noise model implementation.\n    To be removed in a later refactoring.\n    Arguments:\n        circuit: A converted circuit as returned by `backend.circuit`.\n        param_values: _**Already embedded**_ parameters of the circuit. See\n            [`embedding`][qadence.blocks.embedding.embedding] for more info.\n        state: Initial state.\n        endianness: Endianness of the resulting density matrix.\n    Returns:\n        A list of Counter objects where each key represents a bitstring\n        and its value the number of times it has been sampled from the given wave function.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"backends/backend/#qadence.backend.Backend.sample","title":"<code>sample(circuit, param_values={}, n_shots=1000, state=None, noise=None, mitigation=None, endianness=Endianness.BIG)</code>  <code>abstractmethod</code>","text":"<p>Sample bit strings.</p> PARAMETER  DESCRIPTION <code>circuit</code> <p>A converted circuit as returned by <code>backend.circuit</code>.</p> <p> TYPE: <code>ConvertedCircuit</code> </p> <code>param_values</code> <p>Already embedded parameters of the circuit. See <code>embedding</code> for more info.</p> <p> TYPE: <code>dict[str, Tensor]</code> DEFAULT: <code>{}</code> </p> <code>n_shots</code> <p>Number of shots to sample.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1000</code> </p> <code>state</code> <p>Initial state.</p> <p> TYPE: <code>Tensor | None</code> DEFAULT: <code>None</code> </p> <code>noise</code> <p>A noise model to use.</p> <p> TYPE: <code>Noise | None</code> DEFAULT: <code>None</code> </p> <code>mitigation</code> <p>An error mitigation protocol to apply.</p> <p> TYPE: <code>Mitigations | None</code> DEFAULT: <code>None</code> </p> <code>endianness</code> <p>Endianness of the resulting bit strings.</p> <p> TYPE: <code>Endianness</code> DEFAULT: <code>BIG</code> </p> Source code in <code>qadence/backend.py</code> <pre><code>@abstractmethod\ndef sample(\nself,\ncircuit: ConvertedCircuit,\nparam_values: dict[str, Tensor] = {},\nn_shots: int = 1000,\nstate: Tensor | None = None,\nnoise: Noise | None = None,\nmitigation: Mitigations | None = None,\nendianness: Endianness = Endianness.BIG,\n) -&gt; list[Counter]:\n\"\"\"Sample bit strings.\n    Arguments:\n        circuit: A converted circuit as returned by `backend.circuit`.\n        param_values: _**Already embedded**_ parameters of the circuit. See\n            [`embedding`][qadence.blocks.embedding.embedding] for more info.\n        n_shots: Number of shots to sample.\n        state: Initial state.\n        noise: A noise model to use.\n        mitigation: An error mitigation protocol to apply.\n        endianness: Endianness of the resulting bit strings.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"backends/backend/#qadence.backend.BackendConfiguration","title":"<code>BackendConfiguration</code>  <code>dataclass</code>","text":""},{"location":"backends/backend/#qadence.backend.BackendConfiguration.available_options","title":"<code>available_options()</code>","text":"<p>Return as a string the available fields with types of the configuration.</p> RETURNS DESCRIPTION <code>str</code> <p>a string with all the available fields, one per line</p> <p> TYPE: <code>str</code> </p> Source code in <code>qadence/backend.py</code> <pre><code>def available_options(self) -&gt; str:\n\"\"\"Return as a string the available fields with types of the configuration.\n    Returns:\n        str: a string with all the available fields, one per line\n    \"\"\"\nconf_msg = \"\"\nfor _field in fields(self):\nif not _field.name.startswith(\"_\"):\nconf_msg += (\nf\"Name: {_field.name} - Type: {_field.type} - Default value: {_field.default}\\n\"\n)\nreturn conf_msg\n</code></pre>"},{"location":"backends/backend/#qadence.backend.BackendConfiguration.get_param_name","title":"<code>get_param_name(blk)</code>","text":"<p>Return parameter names for the current backend.</p> <p>Depending on which backend is in use this function returns either UUIDs or expressions of parameters.</p> Source code in <code>qadence/backend.py</code> <pre><code>def get_param_name(self, blk: AbstractBlock) -&gt; Tuple[str, ...]:\n\"\"\"Return parameter names for the current backend.\n    Depending on which backend is in use this\n    function returns either UUIDs or expressions of parameters.\n    \"\"\"\nparam_ids: Tuple\n# FIXME: better type hiearchy?\ntypes = (TimeEvolutionBlock, ParametricBlock, ConstantAnalogRotation, WaitBlock)\nif not isinstance(blk, types):\nraise TypeError(f\"Can not infer param name from {type(blk)}\")\nelse:\nif self._use_gate_params:\nparam_ids = tuple(blk.parameters.uuids())\nelse:\nparam_ids = tuple(map(stringify, blk.parameters.expressions()))\nreturn param_ids\n</code></pre>"},{"location":"backends/braket/","title":"Amazon Braket","text":""},{"location":"backends/braket/#braket-digital-backend","title":"Braket Digital backend","text":""},{"location":"backends/braket/#qadence.backends.braket.backend.Backend","title":"<code>Backend</code>  <code>dataclass</code>","text":"<p>             Bases: <code>Backend</code></p>"},{"location":"backends/braket/#qadence.backends.braket.backend.Backend.assign_parameters","title":"<code>assign_parameters(circuit, param_values)</code>","text":"<p>Assign numerical values to the circuit parameters.</p> Source code in <code>qadence/backends/braket/backend.py</code> <pre><code>def assign_parameters(\nself, circuit: ConvertedCircuit, param_values: dict[str, Tensor | float]\n) -&gt; BraketCircuit:\n\"\"\"Assign numerical values to the circuit parameters.\"\"\"\nif param_values is None:\nreturn circuit.native()\nparams_copy = param_values.copy()\npnames = [p.name for p in circuit.native.parameters]\n# account for fixed parameters\nfor name in param_values.keys():\nif name not in pnames:\nparams_copy.pop(name)\n# make sure that all the parameters are single floats\n# otherwise it won't be accepted by Braket\nnative_params = promote_parameters(params_copy)\n# assign the parameters to the circuit\nassigned_circuit = circuit.native(**native_params)\nreturn assigned_circuit\n</code></pre>"},{"location":"backends/braket/#qadence.backends.braket.backend.Backend.run","title":"<code>run(circuit, param_values={}, state=None, endianness=Endianness.BIG)</code>","text":"<p>Execute the circuit and return a wavefunction in form of a statevector.</p> PARAMETER  DESCRIPTION <code>circuit</code> <p>The circuit that is executed.</p> <p> TYPE: <code>ConvertedCircuit</code> </p> <code>param_values</code> <p>Parameters of the circuit (after calling the embedding function on the user-facing parameters).</p> <p> TYPE: <code>dict[str, Tensor]</code> DEFAULT: <code>{}</code> </p> <code>state</code> <p>Initial state.</p> <p> TYPE: <code>Tensor | None</code> DEFAULT: <code>None</code> </p> <code>endianness</code> <p>The endianness of the wave function.</p> <p> TYPE: <code>Endianness</code> DEFAULT: <code>BIG</code> </p> Source code in <code>qadence/backends/braket/backend.py</code> <pre><code>def run(\nself,\ncircuit: ConvertedCircuit,\nparam_values: dict[str, Tensor] = {},\nstate: Tensor | None = None,\nendianness: Endianness = Endianness.BIG,\n) -&gt; Tensor:\n\"\"\"\n    Execute the circuit and return a wavefunction in form of a statevector.\n    Arguments:\n        circuit: The circuit that is executed.\n        param_values: Parameters of the circuit (after calling the embedding\n            function on the user-facing parameters).\n        state: Initial state.\n        endianness: The endianness of the wave function.\n    \"\"\"\nif state is not None:\nraise NotImplementedError\nif self.is_remote:\n# handle here, or different backends?\nraise NotImplementedError\n# loop over all values in the batch\nresults = []\nfor vals in to_list_of_dicts(param_values):\nfinal_circuit = self.assign_parameters(circuit, vals)\nfinal_circuit.state_vector()  # set simulation type\ntask = self._device.run(final_circuit, 0)\nresults.append(task.result().values[0])\nstates = torch.tensor(np.array(results))\nn_qubits = circuit.abstract.n_qubits\nif endianness != self.native_endianness and n_qubits &gt; 1:\nfrom qadence.transpile import invert_endianness\nstates = invert_endianness(states)\nreturn states\n</code></pre>"},{"location":"backends/braket/#qadence.backends.braket.backend.Backend.sample","title":"<code>sample(circuit, param_values={}, n_shots=1, state=None, noise=None, mitigation=None, endianness=Endianness.BIG)</code>","text":"<p>Execute the circuit and return samples of the resulting wavefunction.</p> Source code in <code>qadence/backends/braket/backend.py</code> <pre><code>def sample(\nself,\ncircuit: ConvertedCircuit,\nparam_values: dict[str, Tensor] = {},\nn_shots: int = 1,\nstate: Tensor | None = None,\nnoise: Noise | None = None,\nmitigation: Mitigations | None = None,\nendianness: Endianness = Endianness.BIG,\n) -&gt; list[Counter]:\n\"\"\"Execute the circuit and return samples of the resulting wavefunction.\"\"\"\nif state is not None:\nraise NotImplementedError(\"Braket cannot handle a custom initial state.\")\nif n_shots &lt; 1:\nraise ValueError(\"You can only call sample with n_shots&gt;0.\")\nif self.is_remote:\n# handle here, or different backends?\nraise NotImplementedError\n# loop over all values in the batch\nsamples = []\nfor vals in to_list_of_dicts(param_values):\nfinal_circuit = self.assign_parameters(circuit, vals)\ntask = self._device.run(final_circuit, n_shots)\nsamples.append(task.result().measurement_counts)\nif endianness != self.native_endianness:\nfrom qadence.transpile import invert_endianness\nsamples = invert_endianness(samples)\nif noise is not None:\nsamples = apply_noise(noise=noise, samples=samples)\nif mitigation is not None:\nassert noise\nsamples = apply_mitigation(noise=noise, mitigation=mitigation, samples=samples)\nreturn samples\n</code></pre>"},{"location":"backends/differentiable/","title":"DifferentiableBackend","text":""},{"location":"backends/differentiable/#qadence.backends.pytorch_wrapper.DifferentiableBackend","title":"<code>DifferentiableBackend(backend, diff_mode=DiffMode.AD, **psr_args)</code>","text":"<p>             Bases: <code>Module</code></p> <p>A class to abstract the operations done by the autodiff engine.</p> PARAMETER  DESCRIPTION <code>backend</code> <p>An instance of the QuantumBackend type perform execution.</p> <p> TYPE: <code>Backend</code> </p> <code>diff_mode</code> <p>A differentiable mode supported by the differentiation engine.</p> <p> TYPE: <code>DiffMode</code> DEFAULT: <code>AD</code> </p> <code>**psr_args</code> <p>Arguments that will be passed on to <code>DifferentiableExpectation</code>.</p> <p> TYPE: <code>int | float | None</code> DEFAULT: <code>{}</code> </p> Source code in <code>qadence/backends/pytorch_wrapper.py</code> <pre><code>def __init__(\nself,\nbackend: QuantumBackend,\ndiff_mode: DiffMode = DiffMode.AD,\n**psr_args: int | float | None,\n) -&gt; None:\nsuper().__init__()\nself.backend = backend\nself.diff_mode = diff_mode\nself.psr_args = psr_args\n# TODO: Add differentiable overlap calculation\nself._overlap: Callable = None  # type: ignore [assignment]\n</code></pre>"},{"location":"backends/differentiable/#qadence.backends.pytorch_wrapper.DifferentiableBackend.expectation","title":"<code>expectation(circuit, observable, param_values={}, state=None, measurement=None, noise=None, mitigation=None, endianness=Endianness.BIG)</code>","text":"<p>Compute the expectation value of a given observable.</p> PARAMETER  DESCRIPTION <code>circuit</code> <p>A backend native quantum circuit to be executed.</p> <p> TYPE: <code>ConvertedCircuit</code> </p> <code>observable</code> <p>A backend native observable to compute the expectation value from.</p> <p> TYPE: <code>list[ConvertedObservable] | ConvertedObservable</code> </p> <code>param_values</code> <p>A dict of values for symbolic substitution.</p> <p> TYPE: <code>dict[str, Tensor]</code> DEFAULT: <code>{}</code> </p> <code>state</code> <p>An initial state.</p> <p> TYPE: <code>Tensor | None</code> DEFAULT: <code>None</code> </p> <code>measurement</code> <p>A shot-based measurement protocol.</p> <p> TYPE: <code>Measurements | None</code> DEFAULT: <code>None</code> </p> <code>endianness</code> <p>Endianness of the state.</p> <p> TYPE: <code>Endianness</code> DEFAULT: <code>BIG</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>A tensor of expectation values.</p> Source code in <code>qadence/backends/pytorch_wrapper.py</code> <pre><code>def expectation(\nself,\ncircuit: ConvertedCircuit,\nobservable: list[ConvertedObservable] | ConvertedObservable,\nparam_values: dict[str, Tensor] = {},\nstate: Tensor | None = None,\nmeasurement: Measurements | None = None,\nnoise: Noise | None = None,\nmitigation: Mitigations | None = None,\nendianness: Endianness = Endianness.BIG,\n) -&gt; Tensor:\n\"\"\"Compute the expectation value of a given observable.\n    Arguments:\n        circuit: A backend native quantum circuit to be executed.\n        observable: A backend native observable to compute the expectation value from.\n        param_values: A dict of values for symbolic substitution.\n        state: An initial state.\n        measurement: A shot-based measurement protocol.\n        endianness: Endianness of the state.\n    Returns:\n        A tensor of expectation values.\n    \"\"\"\nobservable = observable if isinstance(observable, list) else [observable]\ndifferentiable_expectation = DifferentiableExpectation(\nbackend=self.backend,\ncircuit=circuit,\nobservable=observable,\nparam_values=param_values,\nstate=state,\nmeasurement=measurement,\nnoise=noise,\nmitigation=mitigation,\nendianness=endianness,\n)\nif self.diff_mode == DiffMode.AD:\nexpectation = differentiable_expectation.ad\nelif self.diff_mode == DiffMode.ADJOINT:\nexpectation = differentiable_expectation.adjoint\nelse:\ntry:\nfns = get_gpsr_fns()\npsr_fn = fns[self.diff_mode]\nexcept KeyError:\nraise ValueError(f\"{self.diff_mode} differentiation mode is not supported\")\nexpectation = partial(differentiable_expectation.psr, psr_fn=psr_fn, **self.psr_args)\nreturn expectation()\n</code></pre>"},{"location":"backends/differentiable/#qadence.backends.pytorch_wrapper.DifferentiableBackend.run","title":"<code>run(circuit, param_values={}, state=None, endianness=Endianness.BIG)</code>","text":"<p>Run on the underlying backend.</p> Source code in <code>qadence/backends/pytorch_wrapper.py</code> <pre><code>def run(\nself,\ncircuit: ConvertedCircuit,\nparam_values: dict = {},\nstate: Tensor | None = None,\nendianness: Endianness = Endianness.BIG,\n) -&gt; Tensor:\n\"\"\"Run on the underlying backend.\"\"\"\nreturn self.backend.run(\ncircuit=circuit, param_values=param_values, state=state, endianness=endianness\n)\n</code></pre>"},{"location":"backends/differentiable/#qadence.backends.pytorch_wrapper.DifferentiableBackend.sample","title":"<code>sample(circuit, param_values, n_shots=1, state=None, noise=None, mitigation=None, endianness=Endianness.BIG)</code>","text":"<p>Sample bitstring from the registered circuit.</p> PARAMETER  DESCRIPTION <code>circuit</code> <p>A backend native quantum circuit to be executed.</p> <p> TYPE: <code>ConvertedCircuit</code> </p> <code>param_values</code> <p>The values of the parameters after embedding</p> <p> TYPE: <code>dict[str, Tensor]</code> </p> <code>n_shots</code> <p>The number of shots. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>state</code> <p>Initial state.</p> <p> TYPE: <code>Tensor | None</code> DEFAULT: <code>None</code> </p> <code>noise</code> <p>A noise model to use.</p> <p> TYPE: <code>Noise | None</code> DEFAULT: <code>None</code> </p> <code>mitigation</code> <p>A mitigation protocol to apply to noisy samples.</p> <p> TYPE: <code>Mitigations | None</code> DEFAULT: <code>None</code> </p> <code>endianness</code> <p>Endianness of the resulting bitstrings.</p> <p> TYPE: <code>Endianness</code> DEFAULT: <code>BIG</code> </p> RETURNS DESCRIPTION <code>list[Counter]</code> <p>An iterable with all the sampled bitstrings</p> Source code in <code>qadence/backends/pytorch_wrapper.py</code> <pre><code>def sample(\nself,\ncircuit: ConvertedCircuit,\nparam_values: dict[str, Tensor],\nn_shots: int = 1,\nstate: Tensor | None = None,\nnoise: Noise | None = None,\nmitigation: Mitigations | None = None,\nendianness: Endianness = Endianness.BIG,\n) -&gt; list[Counter]:\n\"\"\"Sample bitstring from the registered circuit.\n    Arguments:\n        circuit: A backend native quantum circuit to be executed.\n        param_values: The values of the parameters after embedding\n        n_shots: The number of shots. Defaults to 1.\n        state: Initial state.\n        noise: A noise model to use.\n        mitigation: A mitigation protocol to apply to noisy samples.\n        endianness: Endianness of the resulting bitstrings.\n    Returns:\n        An iterable with all the sampled bitstrings\n    \"\"\"\nwith torch.no_grad():\nreturn self.backend.sample(\ncircuit=circuit,\nparam_values=param_values,\nn_shots=n_shots,\nstate=state,\nnoise=noise,\nmitigation=mitigation,\nendianness=endianness,\n)\n</code></pre>"},{"location":"backends/differentiable/#qadence.backends.pytorch_wrapper.DifferentiableExpectation","title":"<code>DifferentiableExpectation</code>  <code>dataclass</code>","text":"<p>A handler for differentiating expectation estimation using various engines.</p>"},{"location":"backends/differentiable/#qadence.backends.pytorch_wrapper.DifferentiableExpectation.construct_rules","title":"<code>construct_rules(circuit, observable, psr_fn, **psr_args)</code>  <code>staticmethod</code>","text":"<p>Create a mapping between parameters and PSR functions.</p> Source code in <code>qadence/backends/pytorch_wrapper.py</code> <pre><code>@staticmethod\ndef construct_rules(\ncircuit: QuantumCircuit,\nobservable: list[AbstractBlock],\npsr_fn: Callable,\n**psr_args: int | float | None,\n) -&gt; dict[str, Callable]:\n\"\"\"Create a mapping between parameters and PSR functions.\"\"\"\nuuid_to_eigs = uuid_to_eigen(circuit.block)\n# We currently rely on implicit ordering to match the PSR to the parameter,\n# because we want to cache PSRs.\nparam_to_psr = OrderedDict()\nfor param_id, eigenvalues in uuid_to_eigs.items():\nif eigenvalues is None:\nraise ValueError(\nf\"Eigenvalues are not defined for param_id {param_id}\\n\"\n# f\"of type {type(block)}.\\n\"\n\"PSR cannot be defined in that case.\"\n)\nparam_to_psr[param_id] = psr_fn(eigenvalues, **psr_args)\nfor obs in observable:\nfor param_id, _ in uuid_to_eigen(obs).items():\n# We need the embedded fixed params of the observable in the param_values dict\n# to be able to call expectation. Since torch backward requires\n# a list of param_ids and values of equal length, we need to pass them to PSR too.\n# Since they are constants their gradients are 0.\nparam_to_psr[param_id] = lambda x: torch.tensor([0.0], requires_grad=False)\nreturn param_to_psr\n</code></pre>"},{"location":"backends/differentiable/#qadence.backends.pytorch_wrapper.PSRExpectation","title":"<code>PSRExpectation</code>","text":"<p>             Bases: <code>Function</code></p> <p>Overloads the PyTorch AD system to perform parameter shift rule on quantum circuits.</p>"},{"location":"backends/pulser/","title":"Pulser","text":"<p>The Pulser backend features a basic integration with the pulse-level programming interface Pulser. This backend offers for now few simple operations which are translated into a valid, non time-dependent pulse sequence. In particular, one has access to:</p> <ul> <li>analog rotations: <code>AnalogRx</code> and <code>AnalogRy</code> blocks</li> <li>free evolution blocks (basically no pulse, just interaction): <code>AnalogWait</code> block</li> <li>a block for creating entangled states: <code>AnalogEntanglement</code></li> <li>digital rotation <code>Rx</code> and <code>Ry</code></li> </ul>"},{"location":"backends/pulser/#qadence.backends.pulser.backend.Backend","title":"<code>Backend</code>  <code>dataclass</code>","text":"<p>             Bases: <code>Backend</code></p> <p>The Pulser backend.</p>"},{"location":"backends/pulser/#qadence.backends.pulser.backend.create_register","title":"<code>create_register(register)</code>","text":"<p>Convert Qadence Register to Pulser Register.</p> Source code in <code>qadence/backends/pulser/backend.py</code> <pre><code>def create_register(register: Register) -&gt; PulserRegister:\n\"\"\"Convert Qadence Register to Pulser Register.\"\"\"\ncoords = np.array(list(register.coords.values()))\nreturn PulserRegister.from_coordinates(coords)\n</code></pre>"},{"location":"backends/pulser/#qadence.backends.pulser.devices.Device","title":"<code>Device</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Supported types of devices for Pulser backend.</p>"},{"location":"backends/pulser/#qadence.backends.pulser.devices.Device.IDEALIZED","title":"<code>IDEALIZED = IdealDevice</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Idealized device, least realistic.</p>"},{"location":"backends/pulser/#qadence.backends.pulser.devices.Device.REALISTIC","title":"<code>REALISTIC = RealisticDevice</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Device with realistic specs.</p>"},{"location":"backends/pyqtorch/","title":"PyQTorch","text":"<p>Fast differentiable statevector emulator based on PyTorch. The code is open source, hosted on Github and maintained by Pasqal.</p>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.backend.Backend","title":"<code>Backend</code>  <code>dataclass</code>","text":"<p>             Bases: <code>Backend</code></p> <p>PyQTorch backend.</p>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.backend.Backend.convert","title":"<code>convert(circuit, observable=None)</code>","text":"<p>Convert an abstract circuit and an optional observable to their native representation.</p> <p>Additionally, this function constructs an embedding function which maps from user-facing parameters to device parameters (read more on parameter embedding here).</p> Source code in <code>qadence/backend.py</code> <pre><code>def convert(\nself, circuit: QuantumCircuit, observable: list[AbstractBlock] | AbstractBlock | None = None\n) -&gt; Converted:\n\"\"\"Convert an abstract circuit and an optional observable to their native representation.\n    Additionally, this function constructs an embedding function which maps from\n    user-facing parameters to device parameters (read more on parameter embedding\n    [here][qadence.blocks.embedding.embedding]).\n    \"\"\"\ndef check_observable(obs_obj: Any) -&gt; AbstractBlock:\nif isinstance(obs_obj, QubitOperator):\nfrom qadence.blocks.manipulate import from_openfermion\nassert len(obs_obj.terms) &gt; 0, \"Make sure to give a non-empty qubit hamiltonian\"\nreturn from_openfermion(obs_obj)\nelif isinstance(obs_obj, (CompositeBlock, PrimitiveBlock, ScaleBlock)):\nfrom qadence.blocks.utils import block_is_qubit_hamiltonian\nassert block_is_qubit_hamiltonian(\nobs_obj\n), \"Make sure the QubitHamiltonian consists only of Pauli operators X, Y, Z, I\"\nreturn obs_obj\nraise TypeError(\n\"qubit_hamiltonian should be a Pauli-like AbstractBlock or a QubitOperator\"\n)\nconv_circ = self.circuit(circuit)\ncirc_params, circ_embedding_fn = embedding(\nconv_circ.abstract.block, self.config._use_gate_params\n)\nparams = circ_params\nif observable is not None:\nobservable = observable if isinstance(observable, list) else [observable]\nconv_obs = []\nobs_embedding_fn_list = []\nfor obs in observable:\nobs = check_observable(obs)\nc_obs = self.observable(obs, max(circuit.n_qubits, obs.n_qubits))\nobs_params, obs_embedding_fn = embedding(\nc_obs.abstract, self.config._use_gate_params\n)\nparams.update(obs_params)\nobs_embedding_fn_list.append(obs_embedding_fn)\nconv_obs.append(c_obs)\ndef embedding_fn_dict(a: dict, b: dict) -&gt; dict:\nembedding_dict = circ_embedding_fn(a, b)\nfor o in obs_embedding_fn_list:\nembedding_dict.update(o(a, b))\nreturn embedding_dict\nreturn Converted(conv_circ, conv_obs, embedding_fn_dict, params)\ndef embedding_fn(a: dict, b: dict) -&gt; dict:\nreturn circ_embedding_fn(a, b)\nreturn Converted(conv_circ, None, embedding_fn, params)\n</code></pre>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.config.Configuration","title":"<code>Configuration</code>  <code>dataclass</code>","text":"<p>             Bases: <code>BackendConfiguration</code></p>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.config.Configuration.algo_hevo","title":"<code>algo_hevo: AlgoHEvo = AlgoHEvo.EXP</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Determine which kind of Hamiltonian evolution algorithm to use.</p>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.config.Configuration.interaction","title":"<code>interaction: Callable | Interaction | str = Interaction.NN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Digital-analog emulation interaction that is used for <code>AnalogBlock</code>s.</p>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.config.Configuration.loop_expectation","title":"<code>loop_expectation: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>When computing batches of expectation values, only allocate one wavefunction.</p> <p>Loop over the batch of parameters to only allocate a single wavefunction at any given time.</p>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.config.Configuration.n_steps_hevo","title":"<code>n_steps_hevo: int = 100</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Default number of steps for the Hamiltonian evolution.</p>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.config.Configuration.use_gradient_checkpointing","title":"<code>use_gradient_checkpointing: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use gradient checkpointing.</p> <p>Recommended for higher-order optimization tasks.</p>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.config.Configuration.use_single_qubit_composition","title":"<code>use_single_qubit_composition: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Composes chains of single qubit gates into a single matmul if possible.</p>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.convert_ops.supported_gates","title":"<code>supported_gates = list(set(OpName.list()) - set([OpName.TDAGGER]))</code>  <code>module-attribute</code>","text":"<p>The set of supported gates.</p> <p>Tdagger is currently not supported.</p>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.convert_ops.PyQComposedBlock","title":"<code>PyQComposedBlock(ops, qubits, n_qubits, config=None)</code>","text":"<p>             Bases: <code>QuantumCircuit</code></p> <p>Compose a chain of single qubit operations on the same qubit into a single.</p> <p>call to _apply_batch_gate.</p> Source code in <code>qadence/backends/pyqtorch/convert_ops.py</code> <pre><code>def __init__(\nself,\nops: list[Module],\nqubits: Tuple[int, ...],\nn_qubits: int,\nconfig: Configuration = None,\n):\n\"\"\"Compose a chain of single qubit operations on the same qubit into a single.\n    call to _apply_batch_gate.\n    \"\"\"\nsuper().__init__(n_qubits, ops)\nself.qubits = qubits\n</code></pre>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.convert_ops.PyQHamiltonianEvolution","title":"<code>PyQHamiltonianEvolution(qubit_support, n_qubits, block, config)</code>","text":"<p>             Bases: <code>Module</code></p> Source code in <code>qadence/backends/pyqtorch/convert_ops.py</code> <pre><code>def __init__(\nself,\nqubit_support: Tuple[int, ...],\nn_qubits: int,\nblock: TimeEvolutionBlock,\nconfig: Configuration,\n):\nsuper().__init__()\nself.qubit_support = qubit_support\nself.n_qubits = n_qubits\nself.param_names = config.get_param_name(block)\nself.block = block\nif isinstance(block.generator, AbstractBlock) and not block.generator.is_parametric:\nhmat = block_to_tensor(\nblock.generator,\nqubit_support=self.qubit_support,\nuse_full_support=False,\n)\nhmat = hmat.permute(1, 2, 0)\nself._hamiltonian = lambda x: hmat\nelif isinstance(block.generator, Tensor):\nm = block.generator.to(dtype=cdouble)\nhmat = block_to_tensor(\nMatrixBlock(m, qubit_support=block.qubit_support),\nqubit_support=self.qubit_support,\nuse_full_support=False,\n)\nhmat = hmat.permute(1, 2, 0)\nself._hamiltonian = lambda x: hmat\nelif isinstance(block.generator, sympy.Basic):\nself._hamiltonian = (\nlambda values: values[self.param_names[1]].squeeze(3).permute(1, 2, 0)\n)\n# FIXME Why are we squeezing\nelse:\ndef _hamiltonian(values: dict[str, Tensor]) -&gt; Tensor:\nhmat = _block_to_tensor_embedded(\nblock.generator,  # type: ignore[arg-type]\nvalues=values,\nqubit_support=self.qubit_support,\nuse_full_support=False,\n)\nreturn hmat.permute(1, 2, 0)\nself._hamiltonian = _hamiltonian\nself._time_evolution = lambda values: values[self.param_names[0]]\n</code></pre>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.convert_ops.PyQHamiltonianEvolution.dagger","title":"<code>dagger(values)</code>","text":"<p>Dagger of the evolved operator given the current parameter values.</p> Source code in <code>qadence/backends/pyqtorch/convert_ops.py</code> <pre><code>def dagger(self, values: dict[str, Tensor]) -&gt; Tensor:\n\"\"\"Dagger of the evolved operator given the current parameter values.\"\"\"\nreturn _dagger(self.unitary(values))\n</code></pre>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.convert_ops.PyQHamiltonianEvolution.jacobian_generator","title":"<code>jacobian_generator(values)</code>","text":"<p>Approximate jacobian of the evolved operator with respect to generator parameter(s).</p> Source code in <code>qadence/backends/pyqtorch/convert_ops.py</code> <pre><code>def jacobian_generator(self, values: dict[str, Tensor]) -&gt; Tensor:\n\"\"\"Approximate jacobian of the evolved operator with respect to generator parameter(s).\"\"\"\nif len(self.param_names) &gt; 2:\nraise NotImplementedError(\n\"jacobian_generator does not support generators\\\n                                    with more than 1 parameter.\"\n)\ndef _generator(val: Tensor) -&gt; Tensor:\nval_copy = values.copy()\nval_copy[self.param_names[1]] = val\nhmat = _block_to_tensor_embedded(\nself.block.generator,  # type: ignore[arg-type]\nvalues=val_copy,\nqubit_support=self.qubit_support,\nuse_full_support=False,\n)\nreturn hmat.permute(1, 2, 0)\nreturn finitediff(\nlambda v: self._unitary(\ntime_evolution=self._time_evolution(values), hamiltonian=_generator(v)\n),\nvalues[self.param_names[1]],\n)\n</code></pre>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.convert_ops.PyQHamiltonianEvolution.jacobian_time","title":"<code>jacobian_time(values)</code>","text":"<p>Approximate jacobian of the evolved operator with respect to time evolution.</p> Source code in <code>qadence/backends/pyqtorch/convert_ops.py</code> <pre><code>def jacobian_time(self, values: dict[str, Tensor]) -&gt; Tensor:\n\"\"\"Approximate jacobian of the evolved operator with respect to time evolution.\"\"\"\nreturn finitediff(\nlambda t: self._unitary(time_evolution=t, hamiltonian=self._hamiltonian(values)),\nvalues[self.param_names[0]],\n)\n</code></pre>"},{"location":"backends/pyqtorch/#qadence.backends.pyqtorch.convert_ops.PyQHamiltonianEvolution.unitary","title":"<code>unitary(values)</code>","text":"<p>The evolved operator given current parameter values for generator and time evolution.</p> Source code in <code>qadence/backends/pyqtorch/convert_ops.py</code> <pre><code>def unitary(self, values: dict[str, Tensor]) -&gt; Tensor:\n\"\"\"The evolved operator given current parameter values for generator and time evolution.\"\"\"\nreturn self._unitary(self._hamiltonian(values), self._time_evolution(values))\n</code></pre>"},{"location":"development/architecture/","title":"Architecture and sharp bits","text":"<p>Qadence as a software library mixes functional and object-oriented programming. We do that by maintaining core objects and operating on them with functions.</p> <p>Furthermore, Qadence strives at keeping the lower level abstraction layers for automatic differentiation and quantum computation fully stateless while only the frontend layer which is the main user-facing interface is stateful.</p> <p>Code design philosopy</p> <p>Functional, stateless core with object-oriented, stateful user interface.</p>"},{"location":"development/architecture/#abstraction-layers","title":"Abstraction layers","text":"<p>In Qadence there are 4 main objects spread across 3 different levels of abstraction:</p> <ul> <li> <p>Frontend layer: The user facing layer and encompasses two objects:</p> <ul> <li><code>QuantumCircuit</code>: A class representing an abstract quantum   circuit not tight not any particular framework. Parameters are represented symbolically using   <code>sympy</code> expressions.</li> <li><code>QuantumModel</code>: The models are higher-level abstraction   providing an interface for executing different kinds of common quantum computing models such   quantum neural networks (QNNs), quantum kernels etc.</li> </ul> </li> <li> <p>Differentiation layer: Intermediate layer has the purpose of integrating quantum   computation with a given automatic differentiation engine. It is meant to be purely stateless and   contains one object:</p> <ul> <li><code>DifferentiableBackend</code>:   An abstract class whose concrete implementation wraps a quantum backend and make it   automatically differentiable using different engines (e.g. PyTorch or Jax).   Note, that today only PyTorch is supported but there is plan to add also a Jax   differentiable backend which will require some changes in the base class implementation.</li> </ul> </li> <li> <p>Quantum layer: The lower-level layer which directly interfaces with quantum emulators   and processing units. It is meant to be purely stateless and it contains one base object which is   specialized for each supported backend:</p> <ul> <li><code>Backend</code>: An abstract class whose concrete implementation   enables the execution of quantum circuit with a variety of quantum backends (normally non   automatically differentiable by default) such as PyQTorch, Pulser or Braket.</li> </ul> </li> </ul>"},{"location":"development/architecture/#main-components","title":"Main components","text":""},{"location":"development/architecture/#quantumcircuit","title":"<code>QuantumCircuit</code>","text":"<p>We consider <code>QuantumCircuit</code> to be an abstract object, i.e. it is not tied to any backend. However, it blocks are even more abstract. This is because we consider <code>QuantumCircuit</code>s \"real\", whereas the blocks are largely considered just syntax.</p> <p>Unitary <code>QuantumCircuits</code> (this encompasses digital, or gate-based, circuits as well as analog circuits) are constructed by [<code>PrimitiveBlocks</code>] using a syntax that allows you to execute them in sequence, dubbed <code>ChainBlock</code> in the code, or in parallel (i.e. at the same time) where applicable, dubbed <code>KronBlock</code> in the code. Notice that this differs from other packages by providing more control of the layout of the circuit than conventional packages like Qiskit, and from Yao where the blocks are the primary type.</p>"},{"location":"development/architecture/#quantummodel","title":"<code>QuantumModel</code>","text":"<p><code>QuantumModel</code>s are meant to be the main entry point for quantum computations in <code>qadence</code>. In general, they take one or more quantum circuit as input and they wrap all the necessary boiler plate code to make the circuit executable and differentiable on the chosen backend.</p> <p>Models are meant to be specific for a certain kind of quantum problem or algorithm and you can easily create new ones starting from the base class <code>QuantumModel</code>, as explained in the custom model tutorial. Currently, Qadence offers a <code>QNN</code> model class which provides convenient methods to work with quantum neural networks with multi-dimensional inputs and outputs.</p>"},{"location":"development/architecture/#differentiablebackend","title":"<code>DifferentiableBackend</code>","text":"<p>The differentiable backend is a thin wrapper which takes as input a <code>QuantumCircuit</code> instance and a chosen quantum backend and make the circuit execution routines (expectation value, overalap, etc.) differentiable. Currently, the only implemented differentiation engine is PyTorch but it is easy to add support to another one like Jax.</p>"},{"location":"development/architecture/#quantum-backend","title":"Quantum <code>Backend</code>","text":"<p>For execution the primary object is the <code>Backend</code>. Backends maintain the same user-facing interface, and internally connects to other libraries to execute circuits. Those other libraries can execute the code on QPUs and local or cloud-based emulators. The <code>Backends</code> use PyTorch tensors to represent data and leverages PyTorchs autograd to help compute derivatives of circuits.</p>"},{"location":"development/architecture/#symbolic-parameters","title":"Symbolic parameters","text":"<p>To illustrate how parameters work in Qadence, let's consider the following simple block composed of just two rotations:</p> <pre><code>import sympy\nfrom qadence import Parameter, RX\nparam = Parameter(\"phi\", trainable=False)\nblock = RX(0, param) * RX(1, sympy.acos(param))\n</code></pre> <p>The rotation angles assigned to <code>RX</code> (and to any Qadence quantum operation) are defined as arbitrary expressions of <code>Parameter</code>'s. <code>Parameter</code> is a subclass of <code>sympy.Symbol</code>, thus fully interoperable with it.</p> <p>To assign values of the parameter <code>phi</code> in a quantum model, one should use a dictionary containing the a key with parameter name and the corresponding values values:</p> <pre><code>import torch\nfrom qadence import run\nvalues = {\"phi\": torch.rand(10)}\nwf = run(block, values=values)\n</code></pre> <p>This is the only interface for parameter assignment exposed to the user. Under the hood, parameters applied to every quantum operation are identified in different ways:</p> <ul> <li> <p>By default, with a stringified version of the <code>sympy</code> expression supplied to the quantum operation. Notice that multiple operations can have the same expression.</p> </li> <li> <p>In certain case, e.g. for constructing parameter shift rules, one must access a unique identifier of the parameter for each quantum operation. Therefore, Qadence also creates unique identifiers for each parametrized operation (see the <code>ParamMap</code> class).</p> </li> </ul> <p>By default, when one constructs a new backend, the parameter identifiers are the <code>sympy</code> expressions which are used when converting an abstract block into a native circuit for the chosen backend. However, one can use the unique identifiers as parameter names by setting the private flag <code>_use_gate_params</code> to <code>True</code> in the backend configuration <code>BackendConfiguration</code>. This is automatically set when PSR differentiation is selected (see next section for more details).</p> <p>You can see the logic for choosing the parameter identifier in <code>get_param_name</code>.</p>"},{"location":"development/architecture/#differentiation-with-parameter-shift-rules-psr","title":"Differentiation with parameter shift rules (PSR)","text":"<p>In Qadence, parameter shift rules are implemented by extending the PyTorch autograd engine using custom <code>Function</code> objects. The implementation is based on this PyTorch guide.</p> <p>A custom PyTorch <code>Function</code> looks like this:</p> <pre><code>import torch\nfrom torch.autograd import Function\nclass CustomFunction(Function):\n# forward pass implementation giving the output of the module\n@staticmethod\ndef forward(ctx, inputs: torch.Tensor, params: torch.Tensor):\nctx.save_for_backward(inputs, params)\n...\n# backward pass implementation giving the derivative of the module\n# with respect to the parameters. This must return the whole vector-jacobian\n# product to integrate within the autograd engine\n@staticmethod\ndef backward(ctx, grad_output: torch.Tensor):\ninputs, params = ctx.saved_tensors\n...\n</code></pre> <p>The class <code>PSRExpectation</code> implements parameter shift rules for all parameters using a custom function as the one above. There are a few implementation details to keep in mind if you want to modify the PSR code:</p> <ul> <li> <p>PyTorch <code>Function</code> only works with tensor arguments. Parameters in Qadence are passed around as   dictionaries with parameter names as keys and current parameter values (tensors)   as values. This works for both variational and feature parameters. However, the <code>Function</code> class   only work with PyTorch tensors as input, not dictionaries. Therefore, the forward pass of   <code>PSRExpectation</code> accepts one argument <code>param_keys</code> with the   parameter keys and a variadic positional argument <code>param_values</code> with the parameter values one by   one. The dictionary is reconstructed within the <code>forward()</code> pass body.</p> </li> <li> <p>Higher-order derivatives with PSR. Higher-order PSR derivatives can be tricky. Parameter shift   rules calls, under the hood, the <code>QuantumBackend</code> expectation value routine that usually yield a   non-differentiable output. Therefore, a second call to the backward pass would not work. However,   Qadence employs a very simple trick to make higher-order derivatives work: instead of using   directly the expectation value of the quantum backend, the PSR backward pass uses the PSR forward   pass itself as expectation value function (see the code below). In this way, multiple calls to the   backward pass are allowed since the <code>expectation_fn</code> routine is always differentiable by   definition. Notice that this implementation is simple but suboptimal since, in some corner cases,   higher-order derivates might include some repeated terms that, with this implementation, are   always recomputed.</p> </li> </ul> <pre><code># expectation value used in the PSR backward pass\ndef expectation_fn(params: dict[str, Tensor]) -&gt; Tensor:\nreturn PSRExpectation.apply(\nctx.expectation_fn,\nctx.param_psrs,\nparams.keys(),\n*params.values(),\n)\n</code></pre> <ul> <li> <p>Operation parameters must be uniquely identified for PSR to work. Parameter shift rules work at the level of individual quantum operations. This means that, given a parameter <code>x</code>, one needs to sum the contributions from shifting the parameter values of all the operation where the parameter <code>x</code> appears. When constructing the PSR rules, one must access a unique parameter identifier for each operation even if the corresponding user-facing parameter is the same. Therefore, when PSR differentiation is selected, the flag <code>_use_gate_params</code> is automatically set to <code>True</code> in the backend configuration <code>BackendConfiguration</code> (see previous section).</p> </li> <li> <p>PSR must not be applied to observable parameters. In Qadence, Pauli observables can also be parametrized. However, the tunable parameters of observables are purely classical and should not be included in the differentiation with PSRs. However, the quantum expectation value depends on them, thus they still need to enter into the PSR evaluation. To solve this issue, the code sets the <code>requires_grad</code> attribute of all observable parameters to <code>False</code> when constructing the PSRs for the circuit as in the snippet below:</p> </li> </ul> <pre><code>for obs in observable:\nfor param_id, _ in uuid_to_eigen(obs).items():\nparam_to_psr[param_id] = lambda x: torch.tensor([0.0], requires_grad=False)\n</code></pre>"},{"location":"development/draw/","title":"<code>qadence.draw</code> example plots","text":"<p>Mostly for quick, manual checking of correct plotting output.</p> <pre><code>from qadence import X, Y, kron\nfrom qadence.draw import display\nb = kron(X(0), Y(1))\n</code></pre> %3 972d1fdaa854468bb8718ff867211104 0 d6dc85e32b8242779a04e8c13fb600bd X 972d1fdaa854468bb8718ff867211104--d6dc85e32b8242779a04e8c13fb600bd 1eae7e7ece6b436c961e942193c9163d 1 5286ce6b6aa64b8fae7264e5fb1f49df d6dc85e32b8242779a04e8c13fb600bd--5286ce6b6aa64b8fae7264e5fb1f49df dd5b2aa2fae94e4cbc820e7e777bca96 bd18072cecda47dabed04f8e11cd0908 Y 1eae7e7ece6b436c961e942193c9163d--bd18072cecda47dabed04f8e11cd0908 bd18072cecda47dabed04f8e11cd0908--dd5b2aa2fae94e4cbc820e7e777bca96 <pre><code>from qadence import X, Y, chain\nfrom qadence.draw import display\nb = chain(X(0), Y(0))\n</code></pre> %3 7e6b747841f74ee4a88eee893945ff8d 0 2bbbf11182574db196c7457a62b10416 X 7e6b747841f74ee4a88eee893945ff8d--2bbbf11182574db196c7457a62b10416 b9270598295f4821a717fdaad76b0898 Y 2bbbf11182574db196c7457a62b10416--b9270598295f4821a717fdaad76b0898 03add37e9be54394a637346eef535bad b9270598295f4821a717fdaad76b0898--03add37e9be54394a637346eef535bad <pre><code>from qadence import X, Y, chain\nfrom qadence.draw import display\nb = chain(X(0), Y(1))\n</code></pre> %3 e63df064465b416a86a4cc00d1e2aef9 0 d3ab9f94eb584def90bcb41e05af4fd7 X e63df064465b416a86a4cc00d1e2aef9--d3ab9f94eb584def90bcb41e05af4fd7 01703fe99b8c4f32852012db97e9d0c4 1 ce1f4f7aaa594d6e82f1e25db7106ceb d3ab9f94eb584def90bcb41e05af4fd7--ce1f4f7aaa594d6e82f1e25db7106ceb 18f3aa38f7794bccbe7ff8df075cb5c4 ce1f4f7aaa594d6e82f1e25db7106ceb--18f3aa38f7794bccbe7ff8df075cb5c4 7755acd16ada47928fc36e3367f26aef 84097f99a97f4f81b9ade9bc780beb8a 01703fe99b8c4f32852012db97e9d0c4--84097f99a97f4f81b9ade9bc780beb8a 62d0c283de964f23ab6f6ea0618a1615 Y 84097f99a97f4f81b9ade9bc780beb8a--62d0c283de964f23ab6f6ea0618a1615 62d0c283de964f23ab6f6ea0618a1615--7755acd16ada47928fc36e3367f26aef <pre><code>from qadence import X, Y, add\nfrom qadence.draw import display\nb = add(X(0), Y(1), X(2))\n</code></pre> %3 cluster_878e1adecffe49cebf9801a16a1fb3b7 a26d48d24b9a4716a8795acca27f05f4 0 9e6ebedfd7eb4af088a4a0c2aeb58746 a26d48d24b9a4716a8795acca27f05f4--9e6ebedfd7eb4af088a4a0c2aeb58746 9e894d87566540a195a5429eec20142b 1 465e4d8e84354be193ebbb15be90c26c 9e6ebedfd7eb4af088a4a0c2aeb58746--465e4d8e84354be193ebbb15be90c26c b582b4d4df664c9387d5b59618852de8 9684429138284bbdb3849d9b9c16b383 AddBlock 9e894d87566540a195a5429eec20142b--9684429138284bbdb3849d9b9c16b383 86ce7975bdac489f9776de1592e2152a 2 9684429138284bbdb3849d9b9c16b383--b582b4d4df664c9387d5b59618852de8 f12f40e375954d25aa0f54de59e5dae2 8cb2c45d37264feaa8e0c289778d6b29 86ce7975bdac489f9776de1592e2152a--8cb2c45d37264feaa8e0c289778d6b29 8cb2c45d37264feaa8e0c289778d6b29--f12f40e375954d25aa0f54de59e5dae2 <pre><code>from qadence import CNOT, RX, HamEvo, X, Y, Z, chain, kron\nrx = kron(RX(3,0.5), RX(2, \"x\"))\nrx.tag = \"rx\"\ngen = chain(Z(i) for i in range(4))\n# `chain` puts things in sequence\nblock = chain(\nkron(X(0), Y(1), rx),\nCNOT(2,3),\nHamEvo(gen, 10)\n)\n</code></pre> %3 cluster_1e5d0aab02de46c5822091840a8a5654 cluster_34745e8689ca4aec96ba1ada5c16b4c1 rx 0acf7cd486db467cacde3405ef3c81a4 0 41ad55c3012f43e9a1ab5db39bb0ac70 X 0acf7cd486db467cacde3405ef3c81a4--41ad55c3012f43e9a1ab5db39bb0ac70 5a1490d40e02457abc0255dbaa6721fb 1 5da2875367a942a593d16aa1a33fb4a0 41ad55c3012f43e9a1ab5db39bb0ac70--5da2875367a942a593d16aa1a33fb4a0 19ad74e5653b4c8d8480463c077ecdbb 5da2875367a942a593d16aa1a33fb4a0--19ad74e5653b4c8d8480463c077ecdbb 0b57eaff460a468a8dee89c6d70dd42c 19ad74e5653b4c8d8480463c077ecdbb--0b57eaff460a468a8dee89c6d70dd42c ae070f900ced4168a5c90a15fd0a0c51 72f27e1d9f484499afaf00c681483db5 Y 5a1490d40e02457abc0255dbaa6721fb--72f27e1d9f484499afaf00c681483db5 ee847bd0ffcc45358a122f4be79e203f 2 aae2d890862f4db5b34fdc4ea1b4e7fe 72f27e1d9f484499afaf00c681483db5--aae2d890862f4db5b34fdc4ea1b4e7fe b5a133a3327241669ca42ac278b121cf HamEvo aae2d890862f4db5b34fdc4ea1b4e7fe--b5a133a3327241669ca42ac278b121cf b5a133a3327241669ca42ac278b121cf--ae070f900ced4168a5c90a15fd0a0c51 d60ce105e7f640a5be6f61c15903a6c8 f507b4bf0b0745cb8dea542e86c106bc RX(x) ee847bd0ffcc45358a122f4be79e203f--f507b4bf0b0745cb8dea542e86c106bc b313281681484ac7a82b961ad19bf89e 3 1ea0a4c2505b4225afa82a3e46325a66 f507b4bf0b0745cb8dea542e86c106bc--1ea0a4c2505b4225afa82a3e46325a66 901b4759c46f4c1cb9908ec0d1e1e7c5 t = 10 1ea0a4c2505b4225afa82a3e46325a66--901b4759c46f4c1cb9908ec0d1e1e7c5 901b4759c46f4c1cb9908ec0d1e1e7c5--d60ce105e7f640a5be6f61c15903a6c8 ad344e5c0ae745c499381173935b594a 6585b8e487d845fbab79b12f33fb7e5b RX(0.5) b313281681484ac7a82b961ad19bf89e--6585b8e487d845fbab79b12f33fb7e5b b0c159919d76467084409587a9275072 X 6585b8e487d845fbab79b12f33fb7e5b--b0c159919d76467084409587a9275072 b0c159919d76467084409587a9275072--1ea0a4c2505b4225afa82a3e46325a66 801ecf538ed5413fa5c909b2dbce8f24 b0c159919d76467084409587a9275072--801ecf538ed5413fa5c909b2dbce8f24 801ecf538ed5413fa5c909b2dbce8f24--ad344e5c0ae745c499381173935b594a <pre><code>from qadence import feature_map, hea, chain\nblock = chain(feature_map(4, reupload_scaling=\"Tower\"), hea(4,2))\n</code></pre> %3 cluster_406d09ae4a494190bb35fe77b01c574b HEA cluster_2a302f87ac3f486598a6408ffb42968e Tower Fourier FM cc7cecc04bf74681937c2f4862881b8e 0 db3b0c6953df415b818e58b03b5e743d RX(1.0*phi) cc7cecc04bf74681937c2f4862881b8e--db3b0c6953df415b818e58b03b5e743d f064d8a90dde4727a7dd8be4c7cd8885 1 840b42d10a464beaaa0bd14dfb7db603 RX(theta\u2080) db3b0c6953df415b818e58b03b5e743d--840b42d10a464beaaa0bd14dfb7db603 31f879df684c451cb1602eb012cf9750 RY(theta\u2084) 840b42d10a464beaaa0bd14dfb7db603--31f879df684c451cb1602eb012cf9750 25f3a181847e496aa848094b2ebf2984 RX(theta\u2088) 31f879df684c451cb1602eb012cf9750--25f3a181847e496aa848094b2ebf2984 688d42e27270441b802950dfbe8f1c0b 25f3a181847e496aa848094b2ebf2984--688d42e27270441b802950dfbe8f1c0b b3773517e9b74bc3941e0ad7059e7f2f 688d42e27270441b802950dfbe8f1c0b--b3773517e9b74bc3941e0ad7059e7f2f c81947212af347aba4af65780bb5df66 RX(theta\u2081\u2082) b3773517e9b74bc3941e0ad7059e7f2f--c81947212af347aba4af65780bb5df66 6617a0e2e7b241e9bf8ac2c94ae52b89 RY(theta\u2081\u2086) c81947212af347aba4af65780bb5df66--6617a0e2e7b241e9bf8ac2c94ae52b89 3164e4aac81d4605a579b68ef59ca4d9 RX(theta\u2082\u2080) 6617a0e2e7b241e9bf8ac2c94ae52b89--3164e4aac81d4605a579b68ef59ca4d9 ad302d9ae4b045daa8559440b66a97cf 3164e4aac81d4605a579b68ef59ca4d9--ad302d9ae4b045daa8559440b66a97cf 5c76431ca9dd4c93aaad988847d2de7c ad302d9ae4b045daa8559440b66a97cf--5c76431ca9dd4c93aaad988847d2de7c cfa4b4576146446b908873b06c0926da 5c76431ca9dd4c93aaad988847d2de7c--cfa4b4576146446b908873b06c0926da 6afb01b3e37b44ac95ac995d9659ce9e 0e4b5d192b5843ed86a2c71aa0de529b RX(2.0*phi) f064d8a90dde4727a7dd8be4c7cd8885--0e4b5d192b5843ed86a2c71aa0de529b a29b7287c03b4c308c2623b589ef9746 2 f9766916417746e99c702afe1ae298c9 RX(theta\u2081) 0e4b5d192b5843ed86a2c71aa0de529b--f9766916417746e99c702afe1ae298c9 fa57a367db9e44528d7333df69704265 RY(theta\u2085) f9766916417746e99c702afe1ae298c9--fa57a367db9e44528d7333df69704265 0a4a058b8efd4ad081acff26d5f13b58 RX(theta\u2089) fa57a367db9e44528d7333df69704265--0a4a058b8efd4ad081acff26d5f13b58 3cb870d55f4b4971bc00072c23c25c22 X 0a4a058b8efd4ad081acff26d5f13b58--3cb870d55f4b4971bc00072c23c25c22 3cb870d55f4b4971bc00072c23c25c22--688d42e27270441b802950dfbe8f1c0b 1eb8cecdaabf4b648851315da392819c 3cb870d55f4b4971bc00072c23c25c22--1eb8cecdaabf4b648851315da392819c f78c6ffe7d0141c582c720819df97314 RX(theta\u2081\u2083) 1eb8cecdaabf4b648851315da392819c--f78c6ffe7d0141c582c720819df97314 d17e12ec249f412e8829b74d634cd208 RY(theta\u2081\u2087) f78c6ffe7d0141c582c720819df97314--d17e12ec249f412e8829b74d634cd208 580affc0159746edb531c829fd3d4d93 RX(theta\u2082\u2081) d17e12ec249f412e8829b74d634cd208--580affc0159746edb531c829fd3d4d93 d2ab1129cc4c4b5eb0b79150b7b13623 X 580affc0159746edb531c829fd3d4d93--d2ab1129cc4c4b5eb0b79150b7b13623 d2ab1129cc4c4b5eb0b79150b7b13623--ad302d9ae4b045daa8559440b66a97cf 2a649a87680c44acb40e0979d3c64ab2 d2ab1129cc4c4b5eb0b79150b7b13623--2a649a87680c44acb40e0979d3c64ab2 2a649a87680c44acb40e0979d3c64ab2--6afb01b3e37b44ac95ac995d9659ce9e 63e5d61005d942abbaf8a32c326f1513 ba954cb3e40f4613938a24352f98d2db RX(3.0*phi) a29b7287c03b4c308c2623b589ef9746--ba954cb3e40f4613938a24352f98d2db e46ee041e6bc4f2ea13f8a22a31fbe00 3 85d585b8b0af47a7956fcced390c00c6 RX(theta\u2082) ba954cb3e40f4613938a24352f98d2db--85d585b8b0af47a7956fcced390c00c6 97771aab2e9840daa775c331175e3207 RY(theta\u2086) 85d585b8b0af47a7956fcced390c00c6--97771aab2e9840daa775c331175e3207 5629741d47db46369755cd2e48fd2f37 RX(theta\u2081\u2080) 97771aab2e9840daa775c331175e3207--5629741d47db46369755cd2e48fd2f37 7488e2e8ffe94c1da95f107163225c51 5629741d47db46369755cd2e48fd2f37--7488e2e8ffe94c1da95f107163225c51 06135b7c306d4be99eadfaa7ea6d1599 X 7488e2e8ffe94c1da95f107163225c51--06135b7c306d4be99eadfaa7ea6d1599 06135b7c306d4be99eadfaa7ea6d1599--1eb8cecdaabf4b648851315da392819c 5269e2f5ae6248bcb7998ae94c968110 RX(theta\u2081\u2084) 06135b7c306d4be99eadfaa7ea6d1599--5269e2f5ae6248bcb7998ae94c968110 2f7b3e9601904664915eb978ce83f5a4 RY(theta\u2081\u2088) 5269e2f5ae6248bcb7998ae94c968110--2f7b3e9601904664915eb978ce83f5a4 d553d3667cd24551958fc827656bf70d RX(theta\u2082\u2082) 2f7b3e9601904664915eb978ce83f5a4--d553d3667cd24551958fc827656bf70d d07735b42740427ba02517a2624cc5c0 d553d3667cd24551958fc827656bf70d--d07735b42740427ba02517a2624cc5c0 7c784ecf9785404099b9d7d23fe39ee7 X d07735b42740427ba02517a2624cc5c0--7c784ecf9785404099b9d7d23fe39ee7 7c784ecf9785404099b9d7d23fe39ee7--2a649a87680c44acb40e0979d3c64ab2 7c784ecf9785404099b9d7d23fe39ee7--63e5d61005d942abbaf8a32c326f1513 be21787eb4ad42508554d611386ac552 66c49d0af07d4a50a70d137cfa10e492 RX(4.0*phi) e46ee041e6bc4f2ea13f8a22a31fbe00--66c49d0af07d4a50a70d137cfa10e492 8756b8c6b64b4d3dbe1e268acc2a2ff6 RX(theta\u2083) 66c49d0af07d4a50a70d137cfa10e492--8756b8c6b64b4d3dbe1e268acc2a2ff6 3b55efd3760f4141936bd83824ac850c RY(theta\u2087) 8756b8c6b64b4d3dbe1e268acc2a2ff6--3b55efd3760f4141936bd83824ac850c 9d89181303b548588231dbce45ea0c23 RX(theta\u2081\u2081) 3b55efd3760f4141936bd83824ac850c--9d89181303b548588231dbce45ea0c23 702051d2a5aa42a8a6580455288c8bae X 9d89181303b548588231dbce45ea0c23--702051d2a5aa42a8a6580455288c8bae 702051d2a5aa42a8a6580455288c8bae--7488e2e8ffe94c1da95f107163225c51 646894277cff41ffbdd9387dff0764db 702051d2a5aa42a8a6580455288c8bae--646894277cff41ffbdd9387dff0764db 92ab7569b6f4450092212174945f38f2 RX(theta\u2081\u2085) 646894277cff41ffbdd9387dff0764db--92ab7569b6f4450092212174945f38f2 e84c7a041acd4f9581143427e22b3b71 RY(theta\u2081\u2089) 92ab7569b6f4450092212174945f38f2--e84c7a041acd4f9581143427e22b3b71 2e429ad47b5843d28b0e484c60727932 RX(theta\u2082\u2083) e84c7a041acd4f9581143427e22b3b71--2e429ad47b5843d28b0e484c60727932 0ef5577b41f5473aa7db328489231e49 X 2e429ad47b5843d28b0e484c60727932--0ef5577b41f5473aa7db328489231e49 0ef5577b41f5473aa7db328489231e49--d07735b42740427ba02517a2624cc5c0 0526b1f754b64e019bbac61e5b199a98 0ef5577b41f5473aa7db328489231e49--0526b1f754b64e019bbac61e5b199a98 0526b1f754b64e019bbac61e5b199a98--be21787eb4ad42508554d611386ac552 <pre><code>from qadence import QuantumModel, QuantumCircuit, total_magnetization, hea\nmodel = QuantumModel(QuantumCircuit(3, hea(3,2)), total_magnetization(3))\n</code></pre> %3 cluster_d4b75b6d3f424ca99596865fa3303f9f Obs. cluster_c7e68c0c5ff3418db0001fa6c3012be4 cluster_17598bb061df4b04ad2a84f8b54b616c HEA 630b324aecfa4fdebbcfed9186b640c4 0 e9f45add01044203b1d2504a9909387d RX(theta\u2080) 630b324aecfa4fdebbcfed9186b640c4--e9f45add01044203b1d2504a9909387d a387da09d9a343f087cf05e84acfb713 1 cdc33919a2fe4a48a22793dec3cdc57e RY(theta\u2083) e9f45add01044203b1d2504a9909387d--cdc33919a2fe4a48a22793dec3cdc57e 84e3597d3c2d4053ac4097eb72592da7 RX(theta\u2086) cdc33919a2fe4a48a22793dec3cdc57e--84e3597d3c2d4053ac4097eb72592da7 8424b597934d473193c899f87f4a6573 84e3597d3c2d4053ac4097eb72592da7--8424b597934d473193c899f87f4a6573 fd3690c2360f4a029aa186c231a7af72 8424b597934d473193c899f87f4a6573--fd3690c2360f4a029aa186c231a7af72 2806b3ba727a47cda0f5eb847cd04909 RX(theta\u2089) fd3690c2360f4a029aa186c231a7af72--2806b3ba727a47cda0f5eb847cd04909 c345962dca9b462a98fada0acdeb4dad RY(theta\u2081\u2082) 2806b3ba727a47cda0f5eb847cd04909--c345962dca9b462a98fada0acdeb4dad 6f7d3654ce3640439a16f348c5257d81 RX(theta\u2081\u2085) c345962dca9b462a98fada0acdeb4dad--6f7d3654ce3640439a16f348c5257d81 a9e898abfc8f459db397772af9511b6b 6f7d3654ce3640439a16f348c5257d81--a9e898abfc8f459db397772af9511b6b 9902b5506d7c40f9826ddbc820624a48 a9e898abfc8f459db397772af9511b6b--9902b5506d7c40f9826ddbc820624a48 df128f1e8e77433f8d6460267836f97d 9902b5506d7c40f9826ddbc820624a48--df128f1e8e77433f8d6460267836f97d 4d6aca378c224cc997bc4dcaf747f0bb df128f1e8e77433f8d6460267836f97d--4d6aca378c224cc997bc4dcaf747f0bb 2fdd602920804dc0b7185f7ad2897299 a873e93d1c7042a9b3350d76b4870d8c RX(theta\u2081) a387da09d9a343f087cf05e84acfb713--a873e93d1c7042a9b3350d76b4870d8c ab693d17d5e04bbfa3fffdc77cc33aef 2 30b5e42054b94fc692206177f274e14e RY(theta\u2084) a873e93d1c7042a9b3350d76b4870d8c--30b5e42054b94fc692206177f274e14e f4eaa7ff60a84411be5014d67a83be1d RX(theta\u2087) 30b5e42054b94fc692206177f274e14e--f4eaa7ff60a84411be5014d67a83be1d 171c9cb02d4f470a8f5a2739143ad047 X f4eaa7ff60a84411be5014d67a83be1d--171c9cb02d4f470a8f5a2739143ad047 171c9cb02d4f470a8f5a2739143ad047--8424b597934d473193c899f87f4a6573 b82428e14cce47639351c4aad2984afe 171c9cb02d4f470a8f5a2739143ad047--b82428e14cce47639351c4aad2984afe c9fc8d8002024b49ae8a9b5f2ef975b3 RX(theta\u2081\u2080) b82428e14cce47639351c4aad2984afe--c9fc8d8002024b49ae8a9b5f2ef975b3 6474f87696084b0fbcd20180c14b3263 RY(theta\u2081\u2083) c9fc8d8002024b49ae8a9b5f2ef975b3--6474f87696084b0fbcd20180c14b3263 6298c42dd1d84d4887d63a3d635e40a4 RX(theta\u2081\u2086) 6474f87696084b0fbcd20180c14b3263--6298c42dd1d84d4887d63a3d635e40a4 b4e76b2978a54646b3431a9331b10438 X 6298c42dd1d84d4887d63a3d635e40a4--b4e76b2978a54646b3431a9331b10438 b4e76b2978a54646b3431a9331b10438--a9e898abfc8f459db397772af9511b6b 5e5d8384b2fd4a46aad1b4c162b2835f b4e76b2978a54646b3431a9331b10438--5e5d8384b2fd4a46aad1b4c162b2835f 6fbf019f144740cfa64bdf5c6167795c AddBlock 5e5d8384b2fd4a46aad1b4c162b2835f--6fbf019f144740cfa64bdf5c6167795c 6fbf019f144740cfa64bdf5c6167795c--2fdd602920804dc0b7185f7ad2897299 b067c84319994196b574e997a49ed85c 0537e7b67fc74c3f9fcaf09fc4b669c9 RX(theta\u2082) ab693d17d5e04bbfa3fffdc77cc33aef--0537e7b67fc74c3f9fcaf09fc4b669c9 df92003c17d8499daa0bb6260b71672d RY(theta\u2085) 0537e7b67fc74c3f9fcaf09fc4b669c9--df92003c17d8499daa0bb6260b71672d b794aed9c248400e90c4d17dfb4f1966 RX(theta\u2088) df92003c17d8499daa0bb6260b71672d--b794aed9c248400e90c4d17dfb4f1966 59b4b823327c40f1a51d7c72ce26a2c9 b794aed9c248400e90c4d17dfb4f1966--59b4b823327c40f1a51d7c72ce26a2c9 b75e10abc474440cb42649677900da13 X 59b4b823327c40f1a51d7c72ce26a2c9--b75e10abc474440cb42649677900da13 b75e10abc474440cb42649677900da13--b82428e14cce47639351c4aad2984afe cd2a1194dd2a4c108e1de2956e5bdc0e RX(theta\u2081\u2081) b75e10abc474440cb42649677900da13--cd2a1194dd2a4c108e1de2956e5bdc0e e80289e3e05c4ed7b717e52cf8f32c06 RY(theta\u2081\u2084) cd2a1194dd2a4c108e1de2956e5bdc0e--e80289e3e05c4ed7b717e52cf8f32c06 6ae6cfc9b083473da5ac4da2a5bee9fe RX(theta\u2081\u2087) e80289e3e05c4ed7b717e52cf8f32c06--6ae6cfc9b083473da5ac4da2a5bee9fe a1c6707c1d944596949684956bbc5664 6ae6cfc9b083473da5ac4da2a5bee9fe--a1c6707c1d944596949684956bbc5664 5e08e546edac446abc3a5162dc695b5a X a1c6707c1d944596949684956bbc5664--5e08e546edac446abc3a5162dc695b5a 5e08e546edac446abc3a5162dc695b5a--5e5d8384b2fd4a46aad1b4c162b2835f 570a1892f9834974b3e54e1118d191cf 5e08e546edac446abc3a5162dc695b5a--570a1892f9834974b3e54e1118d191cf 570a1892f9834974b3e54e1118d191cf--b067c84319994196b574e997a49ed85c <pre><code>from qadence import *\nb = chain(SWAP(0,1), SWAP(0,3))\n</code></pre> %3 0d69ef8b9d774586a91ddcaa17281093 0 c67a996cf3024d4787cecdfd719fe009 0d69ef8b9d774586a91ddcaa17281093--c67a996cf3024d4787cecdfd719fe009 94665d5a1f9e44cdae8d4603cfcc5170 1 22f654d448544d98a1665e8a6c152ee3 85d81d93fb39455e9395bea58810ae09 c67a996cf3024d4787cecdfd719fe009--85d81d93fb39455e9395bea58810ae09 fa05ae68f3784aa0a9b02b7d1f8b31b7 22f654d448544d98a1665e8a6c152ee3--fa05ae68f3784aa0a9b02b7d1f8b31b7 b5098201b29348cda1e524ae8ddb34c4 23e282d675254460ab9c1cf90e032b10 fa05ae68f3784aa0a9b02b7d1f8b31b7--23e282d675254460ab9c1cf90e032b10 db1e5dad2f5641a4ad07c078e276ac3e b5098201b29348cda1e524ae8ddb34c4--db1e5dad2f5641a4ad07c078e276ac3e fa13930effbb4742ab34714cb160357c a939b89df62f4fb4ad5da9d3b34856c6 94665d5a1f9e44cdae8d4603cfcc5170--a939b89df62f4fb4ad5da9d3b34856c6 43c2b4db57144e0486d3b31a0913415e 2 a939b89df62f4fb4ad5da9d3b34856c6--22f654d448544d98a1665e8a6c152ee3 a3399bb75cf442589328c2cb04da66b2 85d81d93fb39455e9395bea58810ae09--a3399bb75cf442589328c2cb04da66b2 6a6950081655460aaeafa888319b52bc a3399bb75cf442589328c2cb04da66b2--6a6950081655460aaeafa888319b52bc 6a6950081655460aaeafa888319b52bc--fa13930effbb4742ab34714cb160357c 6a5588981c2c4c3faeb8cc8cef1e34b7 30cd3ddaa9de43b3b6828857eb0c1504 43c2b4db57144e0486d3b31a0913415e--30cd3ddaa9de43b3b6828857eb0c1504 ce4827df089840ac879b6707c1c413d4 3 0a3a58f1d5e146d9991e6c810a1f00ba 30cd3ddaa9de43b3b6828857eb0c1504--0a3a58f1d5e146d9991e6c810a1f00ba 3d444ab89bdf43a49bb2f308ea0667e1 0a3a58f1d5e146d9991e6c810a1f00ba--3d444ab89bdf43a49bb2f308ea0667e1 fa0ca324b9e44937b7fce86d151130c3 3d444ab89bdf43a49bb2f308ea0667e1--fa0ca324b9e44937b7fce86d151130c3 fa0ca324b9e44937b7fce86d151130c3--6a5588981c2c4c3faeb8cc8cef1e34b7 25be45d34544470785e318eeac66655a 9e33a99edaa9465e960c6add0cef2a98 ce4827df089840ac879b6707c1c413d4--9e33a99edaa9465e960c6add0cef2a98 3a510c55b71e42dc8303e1e999b9980c 9e33a99edaa9465e960c6add0cef2a98--3a510c55b71e42dc8303e1e999b9980c 99e20b462d844d4287d8b9cc4ab4cd94 3a510c55b71e42dc8303e1e999b9980c--99e20b462d844d4287d8b9cc4ab4cd94 99e20b462d844d4287d8b9cc4ab4cd94--b5098201b29348cda1e524ae8ddb34c4 23e282d675254460ab9c1cf90e032b10--25be45d34544470785e318eeac66655a <pre><code>from qadence import *\nb = chain(CPHASE(0, 1, 0.5), CPHASE(0, 2, 0.5), CPHASE(0, 3, 0.5))\n</code></pre> %3 06f9cf6c061e473086638f275326dcac 0 c6201fda2e664416afee15b3e8441ad0 06f9cf6c061e473086638f275326dcac--c6201fda2e664416afee15b3e8441ad0 8daa7be82d36413c9992dceeed2e922a 1 3ba1da94b41b4d659dd2994338e18ada c6201fda2e664416afee15b3e8441ad0--3ba1da94b41b4d659dd2994338e18ada b6f625ae7a034d9cb9299a8991b13f18 3ba1da94b41b4d659dd2994338e18ada--b6f625ae7a034d9cb9299a8991b13f18 e9628a5c8f22430985464f3b7f3d20cc b6f625ae7a034d9cb9299a8991b13f18--e9628a5c8f22430985464f3b7f3d20cc 45042b575df54fc48142319b79ad1f41 58ac8de7e9444c8ba9ba97951685e8f0 PHASE(0.5) 8daa7be82d36413c9992dceeed2e922a--58ac8de7e9444c8ba9ba97951685e8f0 0ffa2297b9734c4996f1d1924f7d5547 2 58ac8de7e9444c8ba9ba97951685e8f0--c6201fda2e664416afee15b3e8441ad0 5c526f1b623049228416b885565c0aae 58ac8de7e9444c8ba9ba97951685e8f0--5c526f1b623049228416b885565c0aae 20ebea766709432f8982f23328f44672 5c526f1b623049228416b885565c0aae--20ebea766709432f8982f23328f44672 20ebea766709432f8982f23328f44672--45042b575df54fc48142319b79ad1f41 85c233d7284a493da0ee1c8017c9ea20 002fb7bfe68a4f1dbcf015a2b59dc209 0ffa2297b9734c4996f1d1924f7d5547--002fb7bfe68a4f1dbcf015a2b59dc209 95fdd8722355484098002c548a4b8edb 3 cca5a2ef984f496a80b320c27a5dd05c PHASE(0.5) 002fb7bfe68a4f1dbcf015a2b59dc209--cca5a2ef984f496a80b320c27a5dd05c cca5a2ef984f496a80b320c27a5dd05c--3ba1da94b41b4d659dd2994338e18ada f7850a204cbb42adb77d63c9af1618d3 cca5a2ef984f496a80b320c27a5dd05c--f7850a204cbb42adb77d63c9af1618d3 f7850a204cbb42adb77d63c9af1618d3--85c233d7284a493da0ee1c8017c9ea20 491fcc11d3dc45f6b1c85d5eeba3ee0d e767646c9e424c598d3fcf6491b78bbc 95fdd8722355484098002c548a4b8edb--e767646c9e424c598d3fcf6491b78bbc eac13138bfbc4edf81dc5c0e1e8e0a73 e767646c9e424c598d3fcf6491b78bbc--eac13138bfbc4edf81dc5c0e1e8e0a73 2d38b6d953404c07aceaa95ad754246f PHASE(0.5) eac13138bfbc4edf81dc5c0e1e8e0a73--2d38b6d953404c07aceaa95ad754246f 2d38b6d953404c07aceaa95ad754246f--b6f625ae7a034d9cb9299a8991b13f18 2d38b6d953404c07aceaa95ad754246f--491fcc11d3dc45f6b1c85d5eeba3ee0d"},{"location":"development/draw/#developer-documentation","title":"Developer documentation","text":"<p>This section contains examples in pure graphviz that can be used to understand roughly what is done in the actual drawing backend.</p> <pre><code>import graphviz\nfont_name = \"Sans-Serif\"\nfont_size = \"8\"\ngraph_attr = {\n\"rankdir\": \"LR\",  # LR = left to right, TB = top to bottom\n\"nodesep\": \"0.1\",  # In inches, tells distance between nodes without edges\n\"compound\": \"true\",  # Needed to draw properly edges in hamevo when content is hidden\n\"splines\": \"false\",  # Needed to draw control gates vertical lines one over the other\n}  # These are the default values for graphs\nnode_attr = {\n\"shape\": \"box\",  # 'box' for normal nodes, 'point' for control gates or 'plaintext' for starting nodes (the qubit label).\n\"style\": \"rounded\",  # Unfortunately we can't specify the radius of the rounded, at least for this version\n\"fontname\": font_name,\n\"fontsize\": font_size,\n\"width\": \"0.1\",  # In inches, it doesn't get tinier than the label font.\n\"height\": \"0.1\"  # In inches, it doesn't get tinier than the label font.\n}  # These are the defaults values that can be overridden at node declaration.\ndefault_cluster_attr = {\n\"fontname\": font_name,\n\"fontsize\": font_size,\n\"labelloc\": \"b\",  # location of cluster label. b as bottom, t as top\n\"style\": \"rounded\"\n} # These are the defaults values that can be overridden at sub graph declaration\nhamevo_cluster_attr = {\n\"label\": \"HamEvo(t=10)\"\n}\nhamevo_cluster_attr.update(default_cluster_attr)\nh = graphviz.Graph(graph_attr=graph_attr, node_attr=node_attr)\nh.node(\"Hello World!\")\nh\n</code></pre> <pre><code>\n</code></pre> <pre><code># Define graph\nh = graphviz.Graph(node_attr=node_attr, graph_attr=graph_attr)\n# Add start and end nodes\nfor i in range(4):\nh.node(f's{i}', shape=\"plaintext\", label=f'{i}', group=f\"{i}\")\nh.node(f'e{i}', style='invis', group=f\"{i}\")\n# Add nodes\nh.node('X', group=\"0\")\nh.node('Y', group=\"1\")\n# Add hamevo and its nodes\nhamevo = graphviz.Graph(name='cluster_hamevo', graph_attr=hamevo_cluster_attr)\nfor i in range(4):\nhamevo.node(f'z{i}', shape=\"box\", style=\"invis\", label=f'{i}', group=f\"{i}\")\nh.subgraph(hamevo)\n# Add rx gates cluster and its nodes\ncluster_attr = {\"label\": \"RX gates\"}\ncluster_attr.update(default_cluster_attr)\ncluster = graphviz.Graph(name=\"cluster_0\", graph_attr=cluster_attr)\ncluster.node('RX(x)', group=\"2\")\ncluster.node('RX(0.5)', group=\"3\")\nh.subgraph(cluster)\nh.node('cnot0', label='', shape='point', width='0.1', group='0')\nh.node('cnot1', label='X', group='1')\nh.node('cnot2', label='', shape='point', width='0.1', group='2')\nh.node('cnot3', label='', shape='point', width='0.1', group='3')\n# Add edges\nh.edge('s0', 'X')\nh.edge('X', 'cnot0')\nh.edge('cnot0', 'z0', lhead='cluster_hamevo')\nh.edge('z0', 'e0', ltail='cluster_hamevo')\nh.edge('s1', 'Y')\nh.edge('Y', 'cnot1')\nh.edge('cnot1', 'z1', lhead='cluster_hamevo')\nh.edge('z1', 'e1', ltail='cluster_hamevo')\nh.edge('s2', 'RX(x)')\nh.edge('RX(x)', 'cnot2')\nh.edge('cnot2', 'z2', lhead='cluster_hamevo')\nh.edge('z2', 'e2', ltail='cluster_hamevo')\nh.edge('s3', 'RX(0.5)')\nh.edge('RX(0.5)', 'cnot3')\nh.edge('cnot3', 'z3', lhead='cluster_hamevo')\nh.edge('z3', 'e3', ltail='cluster_hamevo')\nh.edge('cnot1', 'cnot0', constraint='false')  # constraint: false is needed to draw vertical edges\nh.edge('cnot1', 'cnot2', constraint='false')  # constraint: false is needed to draw vertical edges\nh.edge('cnot1', 'cnot3', constraint='false')  # constraint: false is needed to draw vertical edges\nh\n</code></pre> <pre><code>\n</code></pre>"},{"location":"development/draw/#example-of-cluster-of-clusters","title":"Example of cluster of clusters","text":"<pre><code># Define graph\nh = graphviz.Graph(node_attr=node_attr, graph_attr=graph_attr)\n# Define start and end nodes\nfor i in range(4):\nh.node(f's{i}', shape=\"plaintext\", label=f'{i}', group=f\"{i}\")\nh.node(f'e{i}', style='invis', group=f\"{i}\")\n# Define outer cluster\ncluster_attr = {\"label\": \"Outer cluster\"}\ncluster_attr.update(default_cluster_attr)\nouter_cluster = graphviz.Graph(name=\"cluster_outer\", graph_attr=cluster_attr)\n# Define inner cluster 1 and its nodes\ncluster_attr = {\"label\": \"Inner cluster 1\"}\ncluster_attr.update(default_cluster_attr)\ninner1_cluster = graphviz.Graph(name=\"cluster_inner1\", graph_attr=cluster_attr)\ninner1_cluster.node(\"a0\", group=\"0\")\ninner1_cluster.node(\"a1\", group=\"1\")\nouter_cluster.subgraph(inner1_cluster)\n# Define inner cluster 2 and its nodes\ncluster_attr = {\"label\": \"Inner cluster 2\"}\ncluster_attr.update(default_cluster_attr)\ninner2_cluster = graphviz.Graph(name=\"cluster_inner2\", graph_attr=cluster_attr)\ninner2_cluster.node(\"a2\", group=\"2\")\ninner2_cluster.node(\"a3\", group=\"3\")\nouter_cluster.subgraph(inner2_cluster)\n# This has to be done here, after inner clusters definitions\nh.subgraph(outer_cluster)\n# Define more nodes\nfor i in range(4):\nh.node(f\"b{i}\", group=f\"{i}\")\nfor i in range(4):\nh.edge(f's{i}', f'a{i}')\nh.edge(f'a{i}', f'b{i}')\nh.edge(f'b{i}', f'e{i}')\nh\n</code></pre> <pre><code>\n</code></pre>"},{"location":"digital_analog_qc/","title":"Digital-Analog Quantum Computation","text":"<p>Digital-analog quantum computation (DAQC) is a universal quantum computing paradigm<sup>1</sup>, based on two primary computations:</p> <ul> <li>Fast single-qubit operations (digital).</li> <li>Multi-partite entangling operations acting on all qubits (analog).</li> </ul> <p>A promising quantum computing platform for the implementation of the DAQC paradigm is neutral-atoms, where both these computations are realizable.</p>"},{"location":"digital_analog_qc/#digital-analog-emulation","title":"Digital-analog emulation","text":"<p>Qadence simplifies the execution of DAQC programs on either emulated or real devices by providing a simplified interface for customizing interactions and interfacing with pulse-level programming in <code>Pulser</code><sup>3</sup>.</p>"},{"location":"digital_analog_qc/#digital-analog-transformation","title":"Digital-analog transformation","text":"<p>Furthermore, the essence of digital-analog computation is the ability to represent any analog operation, i.e. any arbitrary Hamiltonian, using an auxiliary device-amenable Hamiltonian, such as the ubiquitous Ising model<sup>2</sup>. This is at the core of the DAQC implementation in Qadence.</p>"},{"location":"digital_analog_qc/#execution-on-rydberg-atom-arrays-with-restriced-addressability","title":"Execution on Rydberg atom arrays with restriced addressability","text":"<p>Finally, Qadence offers some convenience constructors and interfaces to execute programs compatible with a DAQC flavor featuring only a restricted access to individual qubit addressability with always-on interaction. This regime is common in currently available neutral atom quantum computers.</p>"},{"location":"digital_analog_qc/#references","title":"References","text":"<ol> <li> <p>Dodd et al., Universal quantum computation and simulation using any entangling Hamiltonian and local unitaries, PRA 65, 040301 (2002). \u21a9</p> </li> <li> <p>Pulser: An open-source package for the design of pulse sequences in programmable neutral-atom arrays \u21a9</p> </li> <li> <p>Parra-Rodriguez et al., Digital-Analog Quantum Computation, PRA 101, 022305 (2020). \u21a9</p> </li> </ol>"},{"location":"digital_analog_qc/analog-basics/","title":"Basic operations on neutral-atoms","text":"<p>Warning</p> <p>The digital-analog emulation framework is under construction and significant changes to the interface should be expected in the near-future. Nevertheless, the currest version serves as a prototype of the functionality, and any feedback is greatly appreciated.</p> <p>Qadence includes primitives for the construction of programs implemented on a set of interacting qubits. The goal is to build digital-analog programs that better represent the reality of interacting qubit platforms, such as neutral-atoms, while maintaining a simplified interface for users coming from a digital quantum computing background that may not be as familiar with pulse-level programming.</p> <p>To build the intuition for the interface in Qadence, it is important to go over some of the underlying physics. We can write a general Hamiltonian for a set of \\(n\\) interacting qubits as</p> \\[ \\mathcal{H} = \\sum_{i=0}^{n-1}\\left(\\mathcal{H}^\\text{d}_{i}(t) + \\sum_{j&lt;i}\\mathcal{H}^\\text{int}_{ij}\\right), \\] <p>where the driving Hamiltonian \\(\\mathcal{H}^\\text{d}_{i}\\) describes the pulses used to control single-qubit rotations, and the interaction Hamiltonian \\(\\mathcal{H}^\\text{int}_{ij}\\) describes the natural interaction between qubits.</p>"},{"location":"digital_analog_qc/analog-basics/#rydberg-atoms","title":"Rydberg atoms","text":"<p>For the purpose of digital-analog emulation of neutral-atom systems in Qadence, we now consider a simplified time-independent global driving Hamiltonian, written as</p> \\[ \\mathcal{H}^\\text{d}_{i} = \\frac{\\Omega}{2}\\left(\\cos(\\phi) X_i - \\sin(\\phi) Y_i \\right) - \\delta N_i \\] <p>where \\(\\Omega\\) is the Rabi frequency, \\(\\delta\\) is the detuning, \\(\\phi\\) is the phase, \\(X_i\\) and \\(Y_i\\) are the standard Pauli operators, and \\(N_i=\\frac{1}{2}(I_i-Z_i)\\) is the number operator. This Hamiltonian allows arbitrary global single-qubit rotations to be written, meaning that the values set for \\((\\Omega,\\phi,\\delta)\\) are the same accross the qubit support.</p> <p>For the interaction term, Rydberg atoms typically allow both an Ising and an XY mode of operation. For now, we focus on the Ising interaction, where the Hamiltonian is written as</p> \\[ \\mathcal{H}^\\text{int}_{ij} = \\frac{C_6}{r_{ij}^6}N_iN_j \\] <p>where \\(r_{ij}\\) is the distance between atoms \\(i\\) and \\(j\\), and \\(C_6\\) is a coefficient depending on the specific Rydberg level of the excited state used in the computational logic states.</p> <p>For a given register of atoms prepared in some spatial coordinates, the Hamiltonians described will generate the dynamics of some unitary operation as</p> \\[ U(t, \\Omega, \\delta, \\phi) = \\exp(-i\\mathcal{H}t) \\] <p>where we specify the final parameter \\(t\\), the duration of the operation.</p> <p>Qadence uses the following units for user-specified parameters:</p> <ul> <li>Rabi frequency and detuning \\(\\Omega\\), \\(\\delta\\): \\([\\text{rad}/\\mu \\text{s}]\\)</li> <li>Phase \\(\\phi\\): \\([\\text{rad}]\\)</li> <li>Duration \\(t\\): \\([\\text{ns}]\\)</li> <li>Atom coordinates: \\([\\mu \\text{m}]\\)</li> </ul>"},{"location":"digital_analog_qc/analog-basics/#in-practice","title":"In practice","text":"<p>Given the Hamiltonian description in the previous section, we will now go over a few examples of the standard operations available in Qadence.</p>"},{"location":"digital_analog_qc/analog-basics/#arbitrary-rotation","title":"Arbitrary rotation","text":"<p>To start, we will exemplify the a general rotation on a set of atoms. To create an arbitrary register of atoms, we refer the user to the register creation tutorial. In this tutorial we do not use any information regarding the edges of the register graph, only the coordinates of each node that are used to compute the distance \\(r_{ij}\\) in the interaction term. Below, we create a line register of three qubits directly from the coordinates.</p> <pre><code>from qadence import Register\ndx = 8.0  # Atom spacing in \u03bcm\nreg = Register.from_coordinates([(0, 0), (dx, 0), (2*dx, 0)])\n</code></pre> <p>Currently, the most general rotation operation uses the <code>AnalogRot</code> operation, which essentially implements \\(U(t, \\Omega, \\delta, \\phi)\\) defined above.</p> <pre><code>from math import pi\nfrom qadence import AnalogRot\nrot_op = AnalogRot(\nduration = 500., # [ns]\nomega = pi, # [rad/\u03bcs]\ndelta = pi, # [rad/\u03bcs]\nphase = pi, # [rad]\n)\n</code></pre> <p>Note that in the code above a specific qubit support is not defined. By default this operation applies a global rotation on all qubits. We can define a circuit using the 3-qubit register and run it in the pyqtorch backend:</p> <pre><code>from qadence import BackendName, run\nwf = run(reg, rot_op, backend = BackendName.PYQTORCH)\nprint(wf)\n</code></pre> <pre><code>tensor([[ 0.4248-0.2411j, -0.1687+0.3156j, -0.1696+0.2676j, -0.2040-0.2671j,\n-0.1687+0.3156j,  0.0014-0.2721j, -0.2040-0.2671j,  0.3034-0.1130j]])\n</code></pre> Under the hood of AnalogRot      To be fully explicit about what goes on under the hood of `AnalogRot`, we can look at the example     code below.      <pre><code>from qadence import BackendName, HamEvo, X, Y, N, add, run\nfrom qadence.analog.utils import C6_DICT\nfrom math import pi, cos, sin\n# Following the 3-qubit register above\nn_qubits = 3\ndx = 8.0\n# Parameters used in the AnalogRot\nduration = 500.\nomega = pi\ndelta = pi\nphase = pi\n# Building the terms in the driving Hamiltonian\nh_x = (omega / 2) * cos(phase) * add(X(i) for i in range(n_qubits))\nh_y = (-1.0 * omega / 2) * sin(phase) * add(Y(i) for i in range(n_qubits))\nh_n = -1.0 * delta * add(N(i) for i in range(n_qubits))\n# Building the interaction Hamiltonian\n# Dictionary of coefficient values for each Rydberg level, which is 60 by default\nc_6 = C6_DICT[60]\nh_int = c_6 * (\n1/(dx**6) * (N(0)@N(1)) +\n1/(dx**6) * (N(1)@N(2)) +\n1/((2*dx)**6) * (N(0)@N(2))\n)\nhamiltonian = h_x + h_y + h_n + h_int\n# Convert duration to \u00b5s due to the units of the Hamiltonian\nexplicit_rot = HamEvo(hamiltonian, duration / 1000)\nwf = run(n_qubits, explicit_rot, backend = BackendName.PYQTORCH)\n# We get the same final wavefunction\nprint(wf)\n</code></pre> <pre><code>tensor([[ 0.4248-0.2411j, -0.1687+0.3156j, -0.1696+0.2676j, -0.2040-0.2671j,\n-0.1687+0.3156j,  0.0014-0.2721j, -0.2040-0.2671j,  0.3034-0.1130j]])\n</code></pre> <p>When sending the <code>AnalogRot</code> operation to the pyqtorch backend, Qadence automatically builds the correct Hamiltonian and the corresponding <code>HamEvo</code> operation with the added qubit interactions, as shown explicitly in the minimized section above. However, this operation is also supported in the Pulser backend, where the correct pulses are automatically created.</p> <pre><code>wf = run(\nreg,\nrot_op,\nbackend = BackendName.PULSER,\n)\nprint(wf)\n</code></pre> <pre><code>tensor([[ 0.4254-0.2408j, -0.1688+0.3157j, -0.1698+0.2678j, -0.2044-0.2666j,\n-0.1688+0.3157j,  0.0010-0.2721j, -0.2044-0.2666j,  0.3024-0.1138j]])\n</code></pre>"},{"location":"digital_analog_qc/analog-basics/#rx-ry-rz-rotations","title":"RX / RY / RZ rotations","text":"<p>The <code>AnalogRot</code> provides full control over the parameters of \\(\\mathcal{H}^\\text{d}\\), but users coming from a digital quantum computing background may be more familiar with the standard <code>RX</code>, <code>RY</code> and <code>RZ</code> rotations, also available in Qadence. For the emulated analog interface, Qadence provides alternative <code>AnalogRX</code>, <code>AnalogRY</code> and <code>AnalogRZ</code> operations which call <code>AnalogRot</code> under the hood to represent the rotations accross the respective axis.</p> <p>For a given angle of rotation \\(\\theta\\) provided to each of these operations, currently a set of hardcoded assumptions are made on the tunable Hamiltonian parameters:</p> \\[ \\begin{aligned} \\text{RX}:&amp; \\quad \\Omega = \\pi, \\quad \\delta = 0, \\quad \\phi = 0, \\quad t = (\\theta/\\Omega)\\times 10^3 \\\\ \\text{RY}:&amp; \\quad \\Omega = \\pi, \\quad \\delta = 0, \\quad \\phi = -\\pi/2, \\quad t = (\\theta/\\Omega)\\times 10^3 \\\\ \\text{RZ}:&amp; \\quad \\Omega = 0, \\quad \\delta = \\pi, \\quad \\phi = 0, \\quad t = (\\theta/\\delta)\\times 10^3 \\\\ \\end{aligned} \\] <p>Note that the \\(\\text{RZ}\\) operation as defined above includes a global phase compared to the standard \\(\\text{RZ}\\) rotation since it evolves \\(\\exp\\left(-i\\frac{\\theta}{2}\\frac{I-Z}{2}\\right)\\) instead of \\(\\exp\\left(-i\\frac{\\theta}{2}Z\\right)\\) given the detuning operator in \\(\\mathcal{H}^\\text{d}\\).</p> <p>Warning</p> <p>As shown above, the values of \\(\\Omega\\) and \\(\\delta\\) are currently hardcoded in these operators, and the effective angle of rotation is controlled by varying the duration of the evolution. Currently, the best way to overcome this is to use <code>AnalogRot</code> directly, but more general and convenient options will be provided soon in an improved interface.</p> <p>Below we exemplify the usage of <code>AnalogRX</code>:</p> <pre><code>from qadence import Register, BackendName\nfrom qadence import RX, AnalogRX, random_state, equivalent_state, kron, run\nfrom math import pi\ndx = 8.0\nreg = Register.from_coordinates([(0, 0), (dx, 0), (2*dx, 0)])\nn_qubits = 3\n# Rotation angle\ntheta = pi\n# Analog rotation using the Rydberg Hamiltonian\nrot_analog = AnalogRX(angle = theta)\n# Equivalent full-digital global rotation\nrot_digital = kron(RX(i, theta) for i in range(n_qubits))\n# Some random initial state\ninit_state = random_state(n_qubits)\n# Compare the final state using the full digital and the AnalogRX\nwf_analog_pyq = run(\nreg,\nrot_analog,\nstate = init_state,\nbackend = BackendName.PYQTORCH\n)\nwf_digital_pyq = run(\nreg,\nrot_digital,\nstate = init_state,\nbackend = BackendName.PYQTORCH\n)\nbool_equiv = equivalent_state(wf_analog_pyq, wf_digital_pyq, atol = 1e-03)\nprint(\"States equivalent: \", bool_equiv)\n</code></pre> <pre><code>States equivalent:  False\n</code></pre> <p>As we can see, running a global <code>RX</code> or the <code>AnalogRX</code> does not result in equivalent states at the end, given that the digital <code>RX</code> operation does not include the interaction between the qubits. By setting <code>dx</code> very high in the code above the interaction will be less significant and the results will match.</p> <p>However, if we compare with the Pulser backend, we see that the results for <code>AnalogRX</code> are consistent with the expected results from a real device:</p> <pre><code>wf_analog_pulser = run(\nreg,\nrot_analog,\nstate = init_state,\nbackend = BackendName.PULSER,\n)\nbool_equiv = equivalent_state(wf_analog_pyq, wf_analog_pulser, atol = 1e-03)\nprint(\"States equivalent: \", bool_equiv)\n</code></pre> <pre><code>States equivalent:  True\n</code></pre>"},{"location":"digital_analog_qc/analog-basics/#evolving-the-interaction-term","title":"Evolving the interaction term","text":"<p>Finally, besides applying specific qubit rotations, we can also choose to evolve only the interaction term \\(\\mathcal{H}^\\text{int}\\), equivalent to setting \\(\\Omega = \\delta = \\phi = 0\\). To do so, Qadence provides the function <code>wait</code> which does exactly this.</p> <pre><code>from qadence import Register, BackendName, random_state, equivalent_state, wait, run\ndx = 8.0\nreg = Register.from_coordinates([(0, 0), (dx, 0), (2*dx, 0)])\nn_qubits = 3\nduration = 1000.\nop = wait(duration = duration)\ninit_state = random_state(n_qubits)\nwf_pyq = run(reg, op, state = init_state, backend = BackendName.PYQTORCH)\nwf_pulser = run(reg, op, state = init_state, backend = BackendName.PULSER)\nbool_equiv = equivalent_state(wf_pyq, wf_pulser, atol = 1e-03)\nprint(\"States equivalent: \", bool_equiv)\n</code></pre> <pre><code>States equivalent:  True\n</code></pre>"},{"location":"digital_analog_qc/analog-basics/#some-technical-details","title":"Some technical details","text":"<p>Warning</p> <p>The details described here are relevant in the current version but are under revision for the next version of the emulated analog interface.</p> <p>In the previous section we have exemplified the main ingredients of the current user-facing functionalities of the emulated analog interface, and in the next tutorial on Quantum Circuit Learning we will exmplify its usage in a simple QML example. Here we specify some extra details of this interface.</p> <p>In the block system, all the Analog rotation operators initialize a <code>ConstantAnalogRotation</code> block, while the <code>wait</code> operation initializes a <code>WaitBlock</code>. As we have shown, by default, these blocks use a global qubit support, which can be passed explicitly by setting <code>qubit_support = \"global\"</code>. However, the blocks do support local qubit supports, with some constraints. The main constraint is that using <code>kron</code> on operators with different durations is not allowed.</p> <pre><code>from qadence import AnalogRX, AnalogRY, Register, kron\ndx = 8.0\nreg = Register.from_coordinates([(0, 0), (dx, 0)])\n# Does not work (the angle affects the duration, as seen above):\nrot_0 = AnalogRX(angle = 1.0, qubit_support = (0,))\nrot_1 = AnalogRY(angle = 2.0, qubit_support = (1,))\ntry:\nblock = kron(rot_0, rot_1)\nexcept ValueError as error:\nprint(\"Error:\", error)\n# Works:\nrot_0 = AnalogRX(angle = 1.0, qubit_support = (0,))\nrot_1 = AnalogRY(angle = 1.0, qubit_support = (1,))\nblock = kron(rot_0, rot_1)\n</code></pre> <pre><code>Error: Kron'ed blocks have to have same duration.\n</code></pre> <p>Using <code>chain</code> is only supported between analog blocks with global qubit support:</p> <pre><code>from qadence import chain\nrot_0 = AnalogRX(angle = 1.0, qubit_support = \"global\")\nrot_1 = AnalogRY(angle = 2.0, qubit_support = \"global\")\nblock = chain(rot_0, rot_1)\n</code></pre> <p>The restrictions above only apply to the analog blocks, and analog and digital blocks can currently be composed.</p> <pre><code>from qadence import RX\nrot_0 = AnalogRX(angle = 1.0, qubit_support = \"global\")\nrot_1 = AnalogRY(angle = 2.0, qubit_support = (0,))\nrot_digital = RX(1, 1.0)\nblock_0 = chain(rot_0, rot_digital)\nblock_1 = kron(rot_1, rot_digital)\n</code></pre>"},{"location":"digital_analog_qc/analog-qcl/","title":"Fitting a simple function","text":"<p>Analog blocks can be parametrized in the usual Qadence manner. Like any other parameters, they can be optimized. The next snippet examplifies the creation of an analog and parameterized ansatz to fit a simple function. First, define a register and feature map block:</p> <pre><code>from qadence import Register, FeatureParameter, chain\nfrom qadence import AnalogRX, AnalogRY, AnalogRZ, wait\nfrom sympy import acos\n# Line register\nn_qubits = 2\ndx = 8.0  # Atom spacing in \u03bcm\ncoordinates = [(i*dx, 0) for i in range(n_qubits)]\nregister = Register.from_coordinates(coordinates)\n# The input feature x for the circuit to learn f(x)\nx = FeatureParameter(\"x\")\n# Feature map with a few global analog rotations\nfm = chain(\nAnalogRX(x),\nAnalogRY(2*x),\nAnalogRZ(3*x),\n)\n</code></pre> <p>Next, we define the ansatz with parameterized rotations.</p> <pre><code>from qadence import hamiltonian_factory, Z\nfrom qadence import QuantumCircuit, QuantumModel, BackendName, DiffMode\nfrom qadence import VariationalParameter\nt_0 = 1000. * VariationalParameter(\"t_0\")\nt_1 = 1000. * VariationalParameter(\"t_1\")\nt_2 = 1000. * VariationalParameter(\"t_2\")\n# Creating the ansatz with parameterized rotations and wait time\nansatz = chain(\nAnalogRX(\"tht_0\"),\nAnalogRY(\"tht_1\"),\nAnalogRZ(\"tht_2\"),\nwait(t_0),\nAnalogRX(\"tht_3\"),\nAnalogRY(\"tht_4\"),\nAnalogRZ(\"tht_5\"),\nwait(t_1),\nAnalogRX(\"tht_6\"),\nAnalogRY(\"tht_7\"),\nAnalogRZ(\"tht_8\"),\nwait(t_2),\n)\n</code></pre> <p>We define the measured observable as the total magnetization, and build the <code>QuantumModel</code>.</p> <pre><code># Total magnetization observable\nobservable = hamiltonian_factory(n_qubits, detuning = Z)\n# Defining the circuit and observable\ncircuit = QuantumCircuit(register, fm, ansatz)\nmodel = QuantumModel(\ncircuit,\nobservable = observable,\nbackend = BackendName.PYQTORCH,\ndiff_mode = DiffMode.AD\n)\n</code></pre> <p>Now we can define the function to fit as well as our training and test data.</p> <pre><code>import torch\nimport matplotlib.pyplot as plt\n# Function to fit:\ndef f(x):\nreturn x**2\nx_test = torch.linspace(-1.0, 1.0, steps=100)\ny_test = f(x_test)\nx_train = torch.linspace(-1.0, 1.0, steps=10)\ny_train = f(x_train)\n# Initial prediction from the model, to be visualized later\ny_pred_initial = model.expectation({\"x\": x_test}).detach()\n</code></pre> <p>Finally we define a simple loss function and training loop.</p> <pre><code>mse_loss = torch.nn.MSELoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.1)\ndef loss_fn(x_train, y_train):\nout = model.expectation({\"x\": x_train})\nloss = mse_loss(out.squeeze(), y_train)\nreturn loss\nn_epochs = 200\nfor i in range(n_epochs):\noptimizer.zero_grad()\nloss = loss_fn(x_train, y_train)\nloss.backward()\noptimizer.step()\n</code></pre> <p>And with the model trained we can plot the final results.</p> <pre><code>y_pred_final = model.expectation({\"x\": x_test}).detach()\nplt.plot(x_test, y_pred_initial, label = \"Initial prediction\")\nplt.plot(x_test, y_pred_final, label = \"Final prediction\")\nplt.scatter(x_train, y_train, label = \"Training points\")\n</code></pre> 2023-11-27T12:00:42.766022 image/svg+xml Matplotlib v3.7.4, https://matplotlib.org/"},{"location":"digital_analog_qc/analog-qubo/","title":"Solve a QUBO problem","text":"<p>Warning</p> <p>Tutorial to be updated</p> <p>In this notebook we solve a quadratic unconstrained optimization problem with Qadence emulated analog interface using the QAOA variational algorithm. The problem is detailed in the Pulser documentation here.</p>"},{"location":"digital_analog_qc/analog-qubo/#define-and-solve-qubo","title":"Define and solve QUBO","text":"Pre-requisite: construct QUBO register <p>Before we start we have to define a register that fits into our device. <pre><code>import torch\nimport numpy as np\nfrom scipy.optimize import minimize\nfrom scipy.spatial.distance import pdist, squareform\nfrom pulser.devices import Chadoq2\nseed = 0\nnp.random.seed(seed)\ntorch.manual_seed(seed)\ndef qubo_register_coords(Q):\n\"\"\"Compute coordinates for register.\"\"\"\nbitstrings = [np.binary_repr(i, len(Q)) for i in range(len(Q) ** 2)]\ncosts = []\n# this takes exponential time with the dimension of the QUBO\nfor b in bitstrings:\nz = np.array(list(b), dtype=int)\ncost = z.T @ Q @ z\ncosts.append(cost)\nzipped = zip(bitstrings, costs)\nsort_zipped = sorted(zipped, key=lambda x: x[1])\ndef evaluate_mapping(new_coords, *args):\n\"\"\"Cost function to minimize. Ideally, the pairwise\n        distances are conserved\"\"\"\nQ, shape = args\nnew_coords = np.reshape(new_coords, shape)\nnew_Q = squareform(Chadoq2.interaction_coeff / pdist(new_coords) ** 6)\nreturn np.linalg.norm(new_Q - Q)\nshape = (len(Q), 2)\ncosts = []\nnp.random.seed(0)\nx0 = np.random.random(shape).flatten()\nres = minimize(\nevaluate_mapping,\nx0,\nargs=(Q, shape),\nmethod=\"Nelder-Mead\",\ntol=1e-6,\noptions={\"maxiter\": 200000, \"maxfev\": None},\n)\nreturn [(x, y) for (x, y) in np.reshape(res.x, (len(Q), 2))]\n</code></pre> </p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\nimport torch\nfrom qadence import add_interaction, chain\nfrom qadence import QuantumModel, QuantumCircuit, AnalogRZ, AnalogRX, Register\nseed = 0\nnp.random.seed(seed)\ntorch.manual_seed(seed)\n</code></pre> <p>The QUBO problem is initially defined by a graph of weighted connections <code>Q</code> and a cost function.</p> <pre><code>def cost_colouring(bitstring, Q):\nz = np.array(list(bitstring), dtype=int)\ncost = z.T @ Q @ z\nreturn cost\n# Cost function.\ndef cost_fn(counter, Q):\ncost = sum(counter[key] * cost_colouring(key, Q) for key in counter)\nreturn cost / sum(counter.values())  # Divide by total samples\n# Weights.\nQ = np.array(\n[\n[-10.0, 19.7365809, 19.7365809, 5.42015853, 5.42015853],\n[19.7365809, -10.0, 20.67626392, 0.17675796, 0.85604541],\n[19.7365809, 20.67626392, -10.0, 0.85604541, 0.17675796],\n[5.42015853, 0.17675796, 0.85604541, -10.0, 0.32306662],\n[5.42015853, 0.85604541, 0.17675796, 0.32306662, -10.0],\n]\n)\n</code></pre> <p>Now, build a weighted register graph from the QUBO definition similarly to what is done in Pulser.</p> <pre><code>reg = Register.from_coordinates(qubo_register_coords(Q))\n</code></pre> <p>The analog circuit is composed of two global rotations per layer.  The first rotation corresponds to the mixing Hamiltonian and the second one to the embedding Hamiltonian in the QAOA algorithm. Subsequently, there is an Ising interaction term to emulate the analog circuit. Please note that the Rydberg level is set to 70.</p> <pre><code>from qadence.analog.utils import ising_interaction\nlayers = 2\nblock = chain(*[AnalogRX(f\"t{i}\") * AnalogRZ(f\"s{i}\") for i in range(layers)])\nemulated = add_interaction(\nreg, block, interaction=lambda r, ps: ising_interaction(r, ps, rydberg_level=70)\n)\n</code></pre> <pre><code>emulated = ChainBlock(0,1,2,3,4)\n\u251c\u2500\u2500 ChainBlock(0,1,2,3,4)\n\u2502   \u251c\u2500\u2500 HamEvo(0,1,2,3,4) [params: ['51_1430074584827*t0']]\n\u2502   \u2514\u2500\u2500 HamEvo(0,1,2,3,4) [params: ['38_8279670303258*s0']]\n\u2514\u2500\u2500 ChainBlock(0,1,2,3,4)\n\u251c\u2500\u2500 HamEvo(0,1,2,3,4) [params: ['51_1430074584827*t1']]\n\u2514\u2500\u2500 HamEvo(0,1,2,3,4) [params: ['38_8279670303258*s1']]\n</code></pre> <p>Next, an initial solution is computed by sampling the model:</p> <pre><code>model = QuantumModel(QuantumCircuit(reg, emulated), backend=\"pyqtorch\", diff_mode='gpsr')\ninitial_counts = model.sample({}, n_shots=1000)[0]\n</code></pre> <pre><code>initial_counts = Counter({'00000': 470, '01000': 89, '00100': 86, '10000': 76, '00001': 74, '00010': 72, '00101': 19, '11000': 18, '10010': 13, '01001': 12, '10100': 12, '00011': 11, '00110': 11, '01100': 8, '10001': 8, '01010': 7, '01101': 3, '10110': 3, '00111': 2, '10011': 2, '11010': 2, '01011': 1, '10101': 1})\n</code></pre> <p>Then, the loss function is defined by averaging over the evaluated bitstrings.</p> <pre><code>def loss(param, *args):\nQ = args[0]\nparam = torch.tensor(param)\nmodel.reset_vparams(param)\nC = model.sample({}, n_shots=1000)[0]\nreturn cost_fn(C, Q)\n</code></pre> <p>And a gradient-free optimization loop is used to compute the optimal solution.</p> <pre><code># Optimization loop.\nfor i in range(20):\nres = minimize(\nloss,\nargs=Q,\nx0=np.random.uniform(1, 10, size=2 * layers),\nmethod=\"COBYLA\",\ntol=1e-8,\noptions={\"maxiter\": 20},\n)\n# Sample and visualize the optimal solution.\nmodel.reset_vparams(res.x)\noptimal_count = model.sample({}, n_shots=1000)[0]\n</code></pre> <pre><code>optimal_count = Counter({'00111': 243, '01011': 200, '00100': 103, '01000': 97, '01001': 82, '00110': 72, '00000': 61, '00001': 33, '00010': 25, '10000': 23, '01010': 16, '00101': 14, '10001': 7, '10011': 7, '01111': 5, '10010': 5, '01101': 4, '00011': 2, '01100': 1})\n</code></pre> <p>Finally, plot the solution:</p> <pre><code># Known solutions to the QUBO problem.\nsolution_bitstrings=[\"01011\", \"00111\"]\n</code></pre> 2023-11-27T12:00:44.777566 image/svg+xml Matplotlib v3.7.4, https://matplotlib.org/"},{"location":"digital_analog_qc/daqc-cnot/","title":"<code>CNOT</code> with interacting qubits","text":"<p>Digital-analog quantum computing focuses on using single qubit digital gates combined with more complex and device-dependent analog interactions to represent quantum programs. This paradigm has been shown to be universal for quantum computation<sup>1</sup>. However, while this approach may have advantages when adapting quantum programs to real devices, known quantum algorithms are very often expressed in a fully digital paradigm. As such, it is also important to have concrete ways to transform from one paradigm to another.</p> <p>This tutorial will exemplify the DAQC transformation starting with the representation of a simple digital <code>CNOT</code> using the universality of the Ising Hamiltonian<sup>2</sup>.</p>"},{"location":"digital_analog_qc/daqc-cnot/#cnot-with-cphase","title":"<code>CNOT</code> with <code>CPHASE</code>","text":"<p>Let's look at a single example of how the digital-analog transformation can be used to perform a <code>CNOT</code> on two qubits inside a register of globally interacting qubits.</p> <p>First, note that the <code>CNOT</code> can be decomposed with two Hadamard and a <code>CPHASE</code> gate with \\(\\phi=\\pi\\):</p> <pre><code>import torch\nfrom qadence import chain, sample, product_state\nfrom qadence.draw import display\nfrom qadence import X, I, Z, H, N, CPHASE, CNOT, HamEvo\nn_qubits = 2\n# CNOT gate\ncnot_gate = CNOT(0, 1)\n# CNOT decomposed\nphi = torch.pi\ncnot_decomp = chain(H(1), CPHASE(0, 1, phi), H(1))\ninit_state = product_state(\"10\")\n</code></pre> <pre><code>sample from CNOT gate and 100 shots = [Counter({'11': 100})]\nsample from decomposed CNOT gate and 100 shots = [Counter({'11': 100})]\n</code></pre> <p>The <code>CPHASE</code> matrix is diagonal, and can be implemented by exponentiating an Ising-like Hamiltonian, or generator,</p> \\[\\text{CPHASE}(i,j,\\phi)=\\text{exp}\\left(-i\\phi \\mathcal{H}_\\text{CP}(i, j)\\right)\\] \\[\\begin{aligned} \\mathcal{H}_\\text{CP}&amp;=-\\frac{1}{4}(I_i-Z_i)(I_j-Z_j)\\\\ &amp;=-N_iN_j \\end{aligned}\\] <p>where the number operator \\(N_i = \\frac{1}{2}(I_i-Z_i)=\\hat{n}_i\\) is used, leading to an Ising-like interaction \\(\\hat{n}_i\\hat{n}_j\\) realisable in neutral-atom systems. Let's rebuild the <code>CNOT</code> using this evolution.</p> <pre><code>from qadence import kron, block_to_tensor\n# Hamiltonian for the CPHASE gate\nh_cphase = (-1.0) * kron(N(0), N(1))\n# Exponentiating and time-evolving the Hamiltonian until t=phi.\ncphase_evo = HamEvo(h_cphase, phi)\n# Check that we have the CPHASE gate:\ncphase_matrix = block_to_tensor(CPHASE(0, 1, phi))\ncphase_evo_matrix = block_to_tensor(cphase_evo)\n</code></pre> <pre><code>cphase_matrix == cphase_evo_matrix: True\n</code></pre> <p>Now that the <code>CPHASE</code> generator is checked, it can be applied to the <code>CNOT</code>:</p> <pre><code># CNOT with Hamiltonian Evolution\ncnot_evo = chain(\nH(1),\ncphase_evo,\nH(1)\n)\n# Initialize state to check CNOTs sample outcomes.\ninit_state = product_state(\"10\")\n</code></pre> <pre><code>sample cnot_gate = [Counter({'11': 100})]\nsample cnot_evo = [Counter({'11': 100})]\n</code></pre> <p>Thus, a <code>CNOT</code> gate can be created by combining a few single-qubit gates together with a two-qubit Ising interaction between the control and the target qubit which is the essence of the Ising transform proposed in the seminal DAQC paper<sup>2</sup> for \\(ZZ\\) interactions. In Qadence, both \\(ZZ\\) and \\(NN\\) interactions are supported.</p>"},{"location":"digital_analog_qc/daqc-cnot/#cnot-in-an-interacting-system-of-three-qubits","title":"<code>CNOT</code> in an interacting system of three qubits","text":"<p>Consider a simple experimental setup with \\(n=3\\) interacting qubits laid out in a triangular grid. For the sake of simplicity, all qubits interact with each other with an \\(NN\\)-Ising interaction of constant strength \\(g_\\text{int}\\). The Hamiltonian for the system can be written by summing interaction terms over all pairs:</p> \\[\\mathcal{H}_\\text{sys}=\\sum_{i=0}^{n}\\sum_{j=0}^{i-1}g_\\text{int}N_iN_j,\\] <p>which in this case leads to only three interaction terms,</p> \\[\\mathcal{H}_\\text{sys}=g_\\text{int}(N_0N_1+N_1N_2+N_0N_2)\\] <p>This generator can be easily built in Qadence:</p> <pre><code>from qadence import add, kron\nn_qubits = 3\n# Interaction strength.\ng_int = 1.0\n# Build a list of interactions.\ninteraction_list = []\nfor i in range(n_qubits):\nfor j in range(i):\ninteraction_list.append(g_int * kron(N(i), N(j)))\nh_sys = add(*interaction_list)\n</code></pre> <pre><code>h_sys = AddBlock(0,1,2)\n\u251c\u2500\u2500 [mul: 1.00000000000000] \u2502   \u2514\u2500\u2500 KronBlock(0,1)\n\u2502       \u251c\u2500\u2500 N(1)\n\u2502       \u2514\u2500\u2500 N(0)\n\u251c\u2500\u2500 [mul: 1.00000000000000] \u2502   \u2514\u2500\u2500 KronBlock(0,2)\n\u2502       \u251c\u2500\u2500 N(2)\n\u2502       \u2514\u2500\u2500 N(0)\n\u2514\u2500\u2500 [mul: 1.00000000000000] \u2514\u2500\u2500 KronBlock(1,2)\n\u251c\u2500\u2500 N(2)\n\u2514\u2500\u2500 N(1)\n</code></pre> <p>Now let's consider that the experimental system is fixed, and qubits can not be isolated one from another. The options are:</p> <ul> <li>Turn on or off the global system Hamiltonian.</li> <li>Perform local single-qubit rotations.</li> </ul> <p>To perform a fully digital <code>CNOT(0,1)</code>, the interacting control on qubit 0 and target on qubit 1 must be isolated from the third one to implement the gate directly. While this can be achieved for a three-qubit system, it becomes experimentally untractable when scaling the qubit count.</p> <p>However, this is not the case within the digital-analog paradigm. In fact, the two qubit Ising interaction required for the <code>CNOT</code> can be represented with a combination of the global system Hamiltonian and a specific set of single-qubit rotations. Full details about this transformation are to be found in the DAQC paper<sup>2</sup> but a more succint yet in-depth description takes place in the next section. It is conveniently available in Qadence by calling the <code>daqc_transform</code> function.</p> <p>In the most general sense, the <code>daqc_transform</code> function will return a circuit that represents the evolution of a target Hamiltonian \\(\\mathcal{H}_\\text{target}\\) (here the unitary of the gate) until a specified time \\(t_f\\) by using only the evolution of a build Hamiltonian \\(\\mathcal{H}_\\text{build}\\) (here \\(\\mathcal{H}_\\text{sys}\\)) together with local \\(X\\)-gates. In Qadence, <code>daqc_transform</code> is applicable for \\(\\mathcal{H}_\\text{target}\\) and \\(\\mathcal{H}_\\text{build}\\) composed only of \\(ZZ\\)- or \\(NN\\)-interactions. These generators are parsed by the <code>daqc_transform</code> function and the appropriate type is automatically determined together with the appropriate single-qubit detunings and global phases.</p> <p>Let's apply it for the <code>CNOT</code> implementation:</p> <pre><code>from qadence import daqc_transform, Strategy\n# Settings for the target CNOT operation\ni = 0  # Control qubit\nj = 1  # Target qubit\nk = 2  # The extra qubit\n# Define the target CNOT operation\n# by composing with identity on the extra qubit.\ncnot_target = kron(CNOT(i, j), I(k))\n# The two-qubit NN-Ising interaction term for the CPHASE\nh_int = (-1.0) * kron(N(i), N(j))\n# Transforming the two-qubit Ising interaction using only our system Hamiltonian\ntransformed_ising = daqc_transform(\nn_qubits=3,        # Total number of qubits in the transformation\ngen_target=h_int,  # The target Ising generator\nt_f=torch.pi,      # The target evolution time\ngen_build=h_sys,   # The building block Ising generator to be used\nstrategy=Strategy.SDAQC,   # Currently only sDAQC is implemented\nignore_global_phases=False  # Global phases from mapping between Z and N\n)\n# display(transformed_ising)\n</code></pre> %3 cluster_0fad7e4e749047649410a9b1280d09bc cluster_b9c69f0a4547461581aa9a1b2ec3e0e3 cluster_388b15b82e55441788cf76acf62fe766 cluster_a8cbdafe105d4ad1ad2f1cf099b6a96e cluster_9928fced755a4baaad2aa887d50d8fc7 cluster_78a2426626fd4fd8ad5b1d15dc9203ac cluster_b7572e6af4fd4f309685bbcfe69e6054 b62baf1114e74fda9151d80ddcda706d 0 e814dc6729de43f69e43972ec8a02aac HamEvo b62baf1114e74fda9151d80ddcda706d--e814dc6729de43f69e43972ec8a02aac 7c9da0003081461fb8fef1addc015419 1 c26e064ff18941129987751b08ec8f95 HamEvo e814dc6729de43f69e43972ec8a02aac--c26e064ff18941129987751b08ec8f95 bee4ae3e8c5644b78cc3d5ea54b7d8d7 HamEvo c26e064ff18941129987751b08ec8f95--bee4ae3e8c5644b78cc3d5ea54b7d8d7 9b1e73dbd0c647a496b4baa96ded79b5 X bee4ae3e8c5644b78cc3d5ea54b7d8d7--9b1e73dbd0c647a496b4baa96ded79b5 b06334572b2c48ee89fca80df2a84e24 HamEvo 9b1e73dbd0c647a496b4baa96ded79b5--b06334572b2c48ee89fca80df2a84e24 d760d9afbd584dcc87a17d757833224b HamEvo b06334572b2c48ee89fca80df2a84e24--d760d9afbd584dcc87a17d757833224b 803450504539466c8a82182f4f876f02 X d760d9afbd584dcc87a17d757833224b--803450504539466c8a82182f4f876f02 83972db4b7dc4b459dc13483623e6a76 803450504539466c8a82182f4f876f02--83972db4b7dc4b459dc13483623e6a76 930ec45016d54a669ea0bf078891c3bf HamEvo 83972db4b7dc4b459dc13483623e6a76--930ec45016d54a669ea0bf078891c3bf 6b3054841367469c99995887ed07ae30 HamEvo 930ec45016d54a669ea0bf078891c3bf--6b3054841367469c99995887ed07ae30 34bcad2e836449ceaf4cc75e4e30fcc7 6b3054841367469c99995887ed07ae30--34bcad2e836449ceaf4cc75e4e30fcc7 5da2af11aec8412ea88ebceb535d3bac 34bcad2e836449ceaf4cc75e4e30fcc7--5da2af11aec8412ea88ebceb535d3bac 9ee2590a071d45f29e0263d65eac92b0 5697d7ebc4754dfe850a7b5875827663 t = -3.142 7c9da0003081461fb8fef1addc015419--5697d7ebc4754dfe850a7b5875827663 c6d84f0c89834762958cccdc06156b06 2 3c9e81c991da4b46a409428b2ae80792 t = 3.142 5697d7ebc4754dfe850a7b5875827663--3c9e81c991da4b46a409428b2ae80792 8c32cbf95a7940f49029da911ebb0be9 t = -3.142 3c9e81c991da4b46a409428b2ae80792--8c32cbf95a7940f49029da911ebb0be9 43d710a7026b48fc85303030837a2557 8c32cbf95a7940f49029da911ebb0be9--43d710a7026b48fc85303030837a2557 e4ff3220e34e489e904f2a4013169c05 t = 1.571 43d710a7026b48fc85303030837a2557--e4ff3220e34e489e904f2a4013169c05 df73be3bd64e40d988e06c0fea613dbb t = 1.571 e4ff3220e34e489e904f2a4013169c05--df73be3bd64e40d988e06c0fea613dbb a62bb14e1efa4eb5b5544eae198a52d1 df73be3bd64e40d988e06c0fea613dbb--a62bb14e1efa4eb5b5544eae198a52d1 1296d36be1b24141820c0ef2f76fb992 X a62bb14e1efa4eb5b5544eae198a52d1--1296d36be1b24141820c0ef2f76fb992 81480682b7d245debc4c482de9400adb t = 1.571 1296d36be1b24141820c0ef2f76fb992--81480682b7d245debc4c482de9400adb 40a338deb1c542d48f6e4c0f6114ea9e t = 1.571 81480682b7d245debc4c482de9400adb--40a338deb1c542d48f6e4c0f6114ea9e a05e06d3800e4133b0a0d25c2b5ca13b X 40a338deb1c542d48f6e4c0f6114ea9e--a05e06d3800e4133b0a0d25c2b5ca13b a05e06d3800e4133b0a0d25c2b5ca13b--9ee2590a071d45f29e0263d65eac92b0 f7721636809f4fb8b4d37555e1b510cb 5c3ada21cdec42c594e58b6e8ca5b305 c6d84f0c89834762958cccdc06156b06--5c3ada21cdec42c594e58b6e8ca5b305 5bf6e99c71d5403f9e189908748a24fb 5c3ada21cdec42c594e58b6e8ca5b305--5bf6e99c71d5403f9e189908748a24fb 9da28ff16cff43f094b1de4dab01c02e 5bf6e99c71d5403f9e189908748a24fb--9da28ff16cff43f094b1de4dab01c02e bfffcdfe980049dba5c115c8926f6cd5 X 9da28ff16cff43f094b1de4dab01c02e--bfffcdfe980049dba5c115c8926f6cd5 041b5bca1c0140debbf63c28d0a4ca27 bfffcdfe980049dba5c115c8926f6cd5--041b5bca1c0140debbf63c28d0a4ca27 4a2870c5766d4e06b087fbf38bae743d 041b5bca1c0140debbf63c28d0a4ca27--4a2870c5766d4e06b087fbf38bae743d e0b75ea6b8ed41289f5bf21aed8b0e77 X 4a2870c5766d4e06b087fbf38bae743d--e0b75ea6b8ed41289f5bf21aed8b0e77 b21b655c8dee48279cbbe518d82985a3 X e0b75ea6b8ed41289f5bf21aed8b0e77--b21b655c8dee48279cbbe518d82985a3 726b0ef8c4e44e24bc45d5547b64d427 b21b655c8dee48279cbbe518d82985a3--726b0ef8c4e44e24bc45d5547b64d427 0b6167285f84465589635ce51d9bee98 726b0ef8c4e44e24bc45d5547b64d427--0b6167285f84465589635ce51d9bee98 a356afd37c0d4651a7925eb50e75ad5f X 0b6167285f84465589635ce51d9bee98--a356afd37c0d4651a7925eb50e75ad5f a356afd37c0d4651a7925eb50e75ad5f--f7721636809f4fb8b4d37555e1b510cb <p>The output circuit displays three groups of system Hamiltonian evolutions which account for global-phases and single-qubit detunings related to the mapping between the \\(Z\\) and \\(N\\) operators. Optionally, global phases can be ignored.</p> <p>In general, the mapping of a \\(n\\)-qubit Ising Hamiltonian to another will require at most \\(n(n-1)\\) evolutions. The transformed circuit performs these evolutions for specific times that are computed from the solution of a linear system of equations involving the set of interactions in the target and build Hamiltonians.</p> <p>In this case, the mapping is exact when using the step-wise DAQC strategy (<code>Strategy.SDAQC</code>) available in Qadence. In banged DAQC (<code>Strategy.BDAQC</code>) the mapping is approximate, but easier to implement on a physical device with always-on interactions such as neutral-atom systems.</p> <p>Just as before, the transformed Ising circuit can be checked to exactly recover the <code>CPHASE</code> gate:</p> <pre><code># CPHASE on (i, j), Identity on third qubit:\ncphase_matrix = block_to_tensor(kron(CPHASE(i, j, phi), I(k)))\n# CPHASE using the transformed circuit:\ncphase_evo_matrix = block_to_tensor(transformed_ising)\n# Check that it implements the CPHASE.\n# Will fail if global phases are ignored.\n</code></pre> <pre><code>cphase_matrix == cphase_evo_matrix : True\n</code></pre> <p>The <code>CNOT</code> gate can now finally be built:</p> <pre><code>from qadence import equivalent_state, run, sample\ncnot_daqc = chain(\nH(j),\ntransformed_ising,\nH(j)\n)\n# And finally apply the CNOT on a specific 3-qubit initial state:\ninit_state = product_state(\"101\")\n# Check we get an equivalent wavefunction\nwf_cnot = run(n_qubits, block=cnot_target, state=init_state)\nwf_daqc = run(n_qubits, block=cnot_daqc, state=init_state)\n# Visualize the CNOT bit-flip in samples.\n</code></pre> <pre><code>wf_cnot == wf_dacq : True\nsample cnot_target = [Counter({'111': 100})]\nsample cnot_dacq = [Counter({'111': 100})]\n</code></pre> <p>As one can see, a <code>CNOT</code> operation has been succesfully implemented on the desired target qubits by using only the global system as the building block Hamiltonian and single-qubit rotations. Decomposing a single digital gate into an Ising Hamiltonian serves as a proof of principle for the potential of this technique to represent universal quantum computation.</p>"},{"location":"digital_analog_qc/daqc-cnot/#technical-details-on-the-daqc-transformation","title":"Technical details on the DAQC transformation","text":"<ul> <li>The mapping between target generator and final circuit is performed by solving a linear system of size \\(n(n-1)\\) where \\(n\\) is the number of qubits, so it can be computed efficiently (i.e., with a polynomial cost in the number of qubits).</li> <li>The linear system to be solved is actually not invertible for \\(n=4\\) qubits. This is very specific edge case requiring a workaround, that is currently not yet implemented.</li> <li>As mentioned, the final circuit has at most \\(n(n-1)\\) slices, so there is at most a quadratic overhead in circuit depth.</li> </ul> <p>Finally, and most important to its usage:</p> <ul> <li>The target Hamiltonian should be sufficiently represented in the building block Hamiltonian.</li> </ul> <p>To illustrate this point, consider the following target and build Hamiltonians:</p> <pre><code># Interaction between qubits 0 and 1\ngen_target = 1.0 * (Z(0) @ Z(1))\n# Fixed interaction between qubits 1 and 2, and customizable between 0 and 1\ndef gen_build(g_int):\nreturn g_int * (Z(0) @ Z(1)) + 1.0 * (Z(1) @ Z(2))\n</code></pre> <p>And now we perform the DAQC transform by setting <code>g_int=1.0</code>, exactly matching the target Hamiltonian:</p> <pre><code>transformed_ising = daqc_transform(\nn_qubits=3,\ngen_target=gen_target,\nt_f=1.0,\ngen_build=gen_build(g_int=1.0),\n)\n# display(transformed_ising)\n</code></pre> %3 cluster_dc64b77e4880468190bd0b59c3fcded0 cluster_02a46a92d48140af880163ae3043be1c 69cdc7bf067b4101a4d208b10d7334f0 0 af9ef9ee9fdc4d25944efc453eb1b6bf X 69cdc7bf067b4101a4d208b10d7334f0--af9ef9ee9fdc4d25944efc453eb1b6bf 678d476954bb403991b4db77ce30dc7d 1 a75005ac71f9431285bfb5ed30a87a98 HamEvo af9ef9ee9fdc4d25944efc453eb1b6bf--a75005ac71f9431285bfb5ed30a87a98 eae26e678b5d4e638e71efc8186edcf9 X a75005ac71f9431285bfb5ed30a87a98--eae26e678b5d4e638e71efc8186edcf9 672191db0d0243268325d1b690a907a1 eae26e678b5d4e638e71efc8186edcf9--672191db0d0243268325d1b690a907a1 edc4fea47e264038b79316ba0a239a26 HamEvo 672191db0d0243268325d1b690a907a1--edc4fea47e264038b79316ba0a239a26 9f9f0255d36847d185f69d983d8728eb edc4fea47e264038b79316ba0a239a26--9f9f0255d36847d185f69d983d8728eb 003bda9911014543ab4df9ca16f919da 9f9f0255d36847d185f69d983d8728eb--003bda9911014543ab4df9ca16f919da 90cadb4844704070bd9fdaa4b60290cd 0e82fb846b354c84ad13d76d122d9fb8 678d476954bb403991b4db77ce30dc7d--0e82fb846b354c84ad13d76d122d9fb8 20719f1e6b6c4a6782e06de4f6e60397 2 b7236e36f1fa4119a4a7c07cd44a51e7 t = -0.500 0e82fb846b354c84ad13d76d122d9fb8--b7236e36f1fa4119a4a7c07cd44a51e7 14e8665c99654d9a9d0addbaa47e39dd b7236e36f1fa4119a4a7c07cd44a51e7--14e8665c99654d9a9d0addbaa47e39dd 08b88da5db774512b226c402665bdee9 X 14e8665c99654d9a9d0addbaa47e39dd--08b88da5db774512b226c402665bdee9 8f3efec02ed84c3dbabbda8063b7f14b t = -0.500 08b88da5db774512b226c402665bdee9--8f3efec02ed84c3dbabbda8063b7f14b 0913d5efa8d94e5e935ab0c72aacdec2 X 8f3efec02ed84c3dbabbda8063b7f14b--0913d5efa8d94e5e935ab0c72aacdec2 0913d5efa8d94e5e935ab0c72aacdec2--90cadb4844704070bd9fdaa4b60290cd b7a8844f9e464a8d8d0e02db70147248 2e52c6046dc64ff9811410e2e0ac72f7 X 20719f1e6b6c4a6782e06de4f6e60397--2e52c6046dc64ff9811410e2e0ac72f7 c2ec3c1a53a34dedb7dab3ee9635bd1f 2e52c6046dc64ff9811410e2e0ac72f7--c2ec3c1a53a34dedb7dab3ee9635bd1f cd4e1ac1f9544811a9e21ccff1ddefad X c2ec3c1a53a34dedb7dab3ee9635bd1f--cd4e1ac1f9544811a9e21ccff1ddefad eab047d779bc4d6d9e833b9e2f5e46e2 X cd4e1ac1f9544811a9e21ccff1ddefad--eab047d779bc4d6d9e833b9e2f5e46e2 5698358dd0ca43fca0828fa232b4a74f eab047d779bc4d6d9e833b9e2f5e46e2--5698358dd0ca43fca0828fa232b4a74f 9cecd1e80b424714bdfecd68df746107 X 5698358dd0ca43fca0828fa232b4a74f--9cecd1e80b424714bdfecd68df746107 9cecd1e80b424714bdfecd68df746107--b7a8844f9e464a8d8d0e02db70147248 <p>Now, if the interaction between qubits 0 and 1 is weakened in the build Hamiltonian:</p> <pre><code>transformed_ising = daqc_transform(\nn_qubits=3,\ngen_target=gen_target,\nt_f=1.0,\ngen_build=gen_build(g_int=0.001),\n)\n# display(transformed_ising)\n</code></pre> %3 cluster_d8305520c5c340e1bc15a083c4087943 cluster_d5a03c46e1774c308088311b14a647d6 5fb32a39f86c4c83b5690dde66e4f173 0 9fe346899d9e4d2498893a634a3b2110 X 5fb32a39f86c4c83b5690dde66e4f173--9fe346899d9e4d2498893a634a3b2110 85ed9d134b8644fdb98d060fbf4e2aa5 1 5e00f1e9765a45b28a38f4a0fd00e06e HamEvo 9fe346899d9e4d2498893a634a3b2110--5e00f1e9765a45b28a38f4a0fd00e06e 56165683a0bf43a1947b16bf47511c86 X 5e00f1e9765a45b28a38f4a0fd00e06e--56165683a0bf43a1947b16bf47511c86 0ba5e85a9cb64d239862c86a0c609f9f 56165683a0bf43a1947b16bf47511c86--0ba5e85a9cb64d239862c86a0c609f9f b25a9f5b8dbf43b086f4a97c482c709e HamEvo 0ba5e85a9cb64d239862c86a0c609f9f--b25a9f5b8dbf43b086f4a97c482c709e 7e317a18f72846d6b971aa56f99c5685 b25a9f5b8dbf43b086f4a97c482c709e--7e317a18f72846d6b971aa56f99c5685 60f45e43fd7c46b08f008ebddeb243dd 7e317a18f72846d6b971aa56f99c5685--60f45e43fd7c46b08f008ebddeb243dd b041fa34730440bba8aceee9e8ee0b74 e25627ca9ad940698c7f161dfdea55d4 85ed9d134b8644fdb98d060fbf4e2aa5--e25627ca9ad940698c7f161dfdea55d4 d2398e0df759440588c36a790ea8811b 2 569c85b64cca4fa2bf43730ff750bb8b t = -500.000000000000 e25627ca9ad940698c7f161dfdea55d4--569c85b64cca4fa2bf43730ff750bb8b 83bb3e3d36ad4e4a84f1f184458abfe5 569c85b64cca4fa2bf43730ff750bb8b--83bb3e3d36ad4e4a84f1f184458abfe5 b450937228ef4956a1a183fc194e4c9d X 83bb3e3d36ad4e4a84f1f184458abfe5--b450937228ef4956a1a183fc194e4c9d 9d710b8e19be4511a83ac2bfd4bac811 t = -500.000000000000 b450937228ef4956a1a183fc194e4c9d--9d710b8e19be4511a83ac2bfd4bac811 7f0926d1afb545daa9bd5f8c9fcdba83 X 9d710b8e19be4511a83ac2bfd4bac811--7f0926d1afb545daa9bd5f8c9fcdba83 7f0926d1afb545daa9bd5f8c9fcdba83--b041fa34730440bba8aceee9e8ee0b74 c7e4036137b7402a93c6b17a9b9c9c2f f4b331bbab984e838ae2344e03d13651 X d2398e0df759440588c36a790ea8811b--f4b331bbab984e838ae2344e03d13651 c5cd2d108b65404eb91c822b4d6fcea7 f4b331bbab984e838ae2344e03d13651--c5cd2d108b65404eb91c822b4d6fcea7 ba3eda62e0ec464f9b7f37b8db2920ac X c5cd2d108b65404eb91c822b4d6fcea7--ba3eda62e0ec464f9b7f37b8db2920ac 60f92040ad3546ecb920a0fcc05e6366 X ba3eda62e0ec464f9b7f37b8db2920ac--60f92040ad3546ecb920a0fcc05e6366 185cb1438c0749dfb50ec6445645bef9 60f92040ad3546ecb920a0fcc05e6366--185cb1438c0749dfb50ec6445645bef9 0c52d4338db0488b9b00a84aec6cb790 X 185cb1438c0749dfb50ec6445645bef9--0c52d4338db0488b9b00a84aec6cb790 0c52d4338db0488b9b00a84aec6cb790--c7e4036137b7402a93c6b17a9b9c9c2f <p>The times slices using the build Hamiltonian need now to evolve for much longer to represent the same interaction since it is not sufficiently represented in the building block Hamiltonian.</p> <p>In the limit where that interaction is not present, the transform will not work:</p> <pre><code>try:\ntransformed_ising = daqc_transform(\nn_qubits=3,\ngen_target=gen_target,\nt_f=1.0,\ngen_build=gen_build(g_int = 0.0),\n)\nexcept ValueError as error:\nprint(\"Error:\", error)\n</code></pre> <pre><code>Error: Incompatible interactions between target and build Hamiltonians.\n</code></pre>"},{"location":"digital_analog_qc/daqc-cnot/#references","title":"References","text":"<ol> <li> <p>Dodd et al., Universal quantum computation and simulation using any entangling Hamiltonian and local unitaries, PRA 65, 040301 (2002). \u21a9</p> </li> <li> <p>Parra-Rodriguez et al., Digital-Analog Quantum Computation, PRA 101, 022305 (2020). \u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"digital_analog_qc/pulser-basic/","title":"Pulse-level programming with Pulser","text":"<p>Qadence offers a direct interface with Pulser<sup>1</sup>, an open-source pulse-level interface written in Python and specifically designed for programming neutral atom quantum computers.</p> <p>Using directly Pulser requires advanced knowledge on pulse-level programming and on how neutral atom devices work. Qadence abstracts this complexity out by using the familiar block-based interface for building pulse sequences in Pulser while leaving the possibility to directly manipulate them if required by, for instance, optimal pulse shaping.</p> <p>Note</p> <p>The Pulser backend is still experimental and the interface might change in the future. Please note that it does not support <code>DiffMode.AD</code>.</p> <p>Note</p> <p>With the Pulser backend, <code>qadence</code> simulations can be executed on the cloud emulators available on the PASQAL cloud platform. In order to do so, make to have valid credentials for the PASQAL cloud platform and use the following configuration for the Pulser backend:</p> <pre><code>config = {\n\"cloud_configuration\": {\n\"username\": \"&lt;changeme&gt;\",\n\"password\": \"&lt;changeme&gt;\",\n\"project_id\": \"&lt;changeme&gt;\",  # the project should have access to emulators\n\"platform\": \"EMU_FREE\"  # choose between `EMU_TN` and `EMU_FREE`\n}\n}\n</code></pre> <p>For inquiries and more details on the cloud credentials, please contact info@pasqal.com.</p>"},{"location":"digital_analog_qc/pulser-basic/#default-qubit-interaction","title":"Default qubit interaction","text":"<p>When simulating pulse sequences written using Pulser, the underlying constructed Hamiltonian is equivalent to a digital-analog quantum computing program (see digital-analog emulation for more details) with the following interaction term:</p> \\[ \\mathcal{H}_{\\textrm{int}} = \\sum_{i&lt;j} \\frac{C_6}{|R_i - R_j|^6} \\hat{n}_i \\hat{n}_j \\] <p>where \\(C_6\\) is an interaction strength coefficient dependent on the principal quantum number of chosen the neutral atom system, \\(R_i\\) are atomic positions in Cartesian coordinates and \\(\\hat{n} = \\frac{1-\\sigma^z_i}{2}\\) the number operator.</p> <p>Note</p> <p>The Ising interaction is always-on for all computations performed with the Pulser backend. It cannot be switched off.</p>"},{"location":"digital_analog_qc/pulser-basic/#available-quantum-operations","title":"Available quantum operations","text":"<p>Currently, the Pulser backend supports the following operations:</p> gate description trainable parameter <code>RX</code>, <code>RY</code> Single qubit rotations. Notice that the interaction is on and this affects the resulting gate fidelity. rotation angle <code>AnalogRX</code>, <code>AnalogRY</code>, <code>AnalogRZ</code> Span a single qubit rotation among the entire register. rotation angle <code>entangle</code> Fully entangle the register. interaction time <code>wait</code> An idle block to wait for the system to free-evolve for a duration according to the interaction. free evolution time"},{"location":"digital_analog_qc/pulser-basic/#sequence-the-bell-state-on-a-two-qubit-register","title":"Sequence the Bell state on a two qubit register","text":"<p>The next example illustrates how to create a pulse sequence to prepare a Bell state. This is a sequence of an entanglement operation, represented as an <code>entangle</code> gate (using <code>CZ</code> interactions) in the \\(X\\)-basis and a \\(Y\\) rotation for readout in the \\(Z\\)-basis:</p> <pre><code>from qadence import chain, entangle, RY\nbell_state = chain(\nentangle(\"t\", qubit_support=(0,1)),\nRY(0, \"y\"),\n)\n</code></pre> <pre><code>bell_state = ChainBlock(0,1)\n\u251c\u2500\u2500 AnalogEntanglement(t=0.4033156033573492, support=(0, 1))\n\u2514\u2500\u2500 RY(0) [params: ['y']]\n</code></pre> <p>Next, a <code>Register</code> with two qubits is combined with the resulting <code>ChainBlock</code> to form a circuit. Then, the <code>QuantumModel</code> converts the circuit into a proper parametrized pulse sequence with the Pulser backend. Supplying the parameter values allows to sample the pulse sequence outcome:</p> <pre><code>import torch\nimport matplotlib.pyplot as plt\nfrom qadence import Register, QuantumCircuit, QuantumModel\nregister = Register.line(2, spacing = 8.0)  # Two qubits with a distance of 8\u00b5m\ncircuit = QuantumCircuit(register, bell_state)\nmodel = QuantumModel(circuit, backend=\"pulser\", diff_mode=\"gpsr\")\nparams = {\n\"t\": torch.tensor([1000]),  # ns\n\"y\": torch.tensor([3*torch.pi/2]),\n}\n# Return the final state vector\nfinal_vector = model.run(params)\n# Sample from the result state vector\nsample = model.sample(params, n_shots=50)[0]\n</code></pre> <pre><code>final_vector = tensor([[-0.7114-0.0169j, -0.0339+0.0156j,  0.0109-0.0457j,  0.6630-0.2244j]])\nsample = Counter({'00': 27, '11': 23})\n</code></pre> <p>Plot the distribution:</p> <p><pre><code>\n</code></pre> 2023-11-27T12:00:45.333796 image/svg+xml Matplotlib v3.7.4, https://matplotlib.org/  One can visualise the pulse sequence with different parameters using the <code>assign_paramters</code> method.</p> <pre><code>model.assign_parameters(params).draw(show=False)\n</code></pre> 2023-11-27T12:00:45.457194 image/svg+xml Matplotlib v3.7.4, https://matplotlib.org/"},{"location":"digital_analog_qc/pulser-basic/#change-device-specifications","title":"Change device specifications","text":"<p>At variance with other backends, Pulser provides the concept of <code>Device</code>. A <code>Device</code> instance encapsulates all the properties for the definition of a real neutral atoms processor, including but not limited to the maximum laser amplitude for pulses, the maximum distance between two qubits and the maximum duration of the pulse. For more information, please check this tutorial.</p> <p>Qadence offers a simplified interface with only two devices which are detailed here:</p> <ul> <li><code>IDEALIZED</code> (default): ideal device which should be used only for testing purposes. It does not restrict the simulation of pulse sequences.</li> <li><code>REALISTIC</code>: device specification close to real neutral atom quantum processors.</li> </ul> <p>Note</p> <p>If you want to perform simulations closer to the specifications of real neutral atom machines, always select the <code>REALISTIC</code> device.</p> <p>One can use the <code>Configuration</code> of the Pulser backend to select the appropriate device:</p> <pre><code>from qadence import BackendName, DiffMode\nfrom qadence.backends.pulser.devices import Device\nregister = Register.line(2, spacing = 8.0)\ncircuit = QuantumCircuit(register, bell_state)\n# Choose a realistic device\nmodel = QuantumModel(\ncircuit,\nbackend=BackendName.PULSER,\ndiff_mode=DiffMode.GPSR,\nconfiguration={\"device_type\": Device.REALISTIC}\n)\nparams = {\n\"t\": torch.tensor([1000]),  # ns\n\"y\": torch.tensor([3*torch.pi/2]),\n}\n# Sample from the result state vector\nsample = model.sample(params, n_shots=50)[0]\n</code></pre> <pre><code>sample = Counter({'00': 27, '11': 23})\n</code></pre>"},{"location":"digital_analog_qc/pulser-basic/#create-a-custom-gate","title":"Create a custom gate","text":"<p>A major advantage of the block-based interface in Qadence is the ease to compose complex operations from a restricted set of primitive ones. In the following, a custom entanglement operation is used as an example.</p> <p>The operation consists of moving all the qubits to the \\(X\\)-basis. This is realized when the atomic interaction performs a controlled-\\(Z\\) operation during the free evolution. As seen before, this is implemented with the <code>wait</code> and <code>AnalogRY</code> blocks and appropriate parameters.</p> <pre><code>from qadence import AnalogRY, chain, wait\n# Custom entanglement operation.\ndef my_entanglement(duration):\nreturn chain(\nAnalogRY(-torch.pi / 2),\nwait(duration)\n)\nprotocol = chain(\nmy_entanglement(\"t\"),\nRY(0, \"y\"),\n)\nregister = Register.line(2, spacing = 8.0)\ncircuit = QuantumCircuit(register, protocol)\nmodel = QuantumModel(circuit, backend=BackendName.PULSER, diff_mode=DiffMode.GPSR)\nparams = {\n\"t\": torch.tensor([500]),  # ns\n\"y\": torch.tensor([torch.pi / 2]),\n}\nsample = model.sample(params, n_shots=50)[0]\n</code></pre> 2023-11-27T12:00:45.932981 image/svg+xml Matplotlib v3.7.4, https://matplotlib.org/"},{"location":"digital_analog_qc/pulser-basic/#digital-analog-qnn-circuit","title":"Digital-analog QNN circuit","text":"<p>Finally, let's put all together by constructing a digital-analog version of a quantum neural network circuit with feature map and variational ansatz.</p> <pre><code>from qadence import kron, fourier_feature_map\nfrom qadence.operations import RX, RY, AnalogRX\nhea_one_layer = chain(\nkron(RY(0, \"th00\"), RY(1, \"th01\")),\nkron(RX(0, \"th10\"), RX(1, \"th11\")),\nkron(RY(0, \"th20\"), RY(1, \"th21\")),\nentangle(\"t\", qubit_support=(0,1)),\n)\nprotocol = chain(\nfourier_feature_map(1, param=\"x\"),\nhea_one_layer,\nAnalogRX(torch.pi/4)\n)\nregister = Register.line(2, spacing=8.0)\ncircuit = QuantumCircuit(register, protocol)\nmodel = QuantumModel(circuit, backend=BackendName.PULSER, diff_mode=DiffMode.GPSR)\nparams = {\n\"x\": torch.tensor([0.8]), # rad\n\"t\": torch.tensor([900]), # ns\n\"th00\":  torch.rand(1), # rad\n\"th01\":  torch.rand(1), # rad\n\"th10\":  torch.rand(1), # rad\n\"th11\":  torch.rand(1), # rad\n\"th20\":  torch.rand(1), # rad\n\"th21\":  torch.rand(1), # rad\n}\nmodel.assign_parameters(params).draw(draw_phase_area=True, show=False)\n</code></pre> 2023-11-27T12:00:46.095552 image/svg+xml Matplotlib v3.7.4, https://matplotlib.org/"},{"location":"digital_analog_qc/pulser-basic/#references","title":"References","text":"<ol> <li> <p>Pulser: An open-source package for the design of pulse sequences in programmable neutral-atom arrays \u21a9</p> </li> </ol>"},{"location":"digital_analog_qc/rydberg-hea/","title":"Hardware efficient ansatz with restricted addressability","text":"<p>Qadence simplifies the execution of digital-analog workloads on neutral atom quantum computers where the local addressability is restricted.</p> <p>In this regime, which we will refer to as semi-local addressing, the full Hamiltonian of the qubit system realized with neutral atoms comprises the following terms:</p> \\[ \\mathcal{H} = \\mathcal{H}_{\\textrm{global}} + \\mathcal{H}_{\\textrm{int}} + \\mathcal{H}_{\\textrm{local}} \\] <p>The first two terms are the standard components of a neutral atom Hamiltonians and read as follows:</p> <p>$$     \\mathcal{H}{\\textrm{global}} = \\frac{\\Omega}{2}\\sum{i}^N \\left(         \\textrm{cos}(\\phi)\\sigma^x_i - \\textrm{sin}(\\phi)\\sigma^y_i \\right) -         \\delta \\sum_{i}^N \\hat{n}i \\     \\mathcal{H}{\\textrm{int}} = \\sum_{i&lt;j} \\frac{C_6}{|R_i - R_j|^6} \\hat{n}_i \\hat{n}_j $$ where \\(\\Omega\\) is the Rabi frequency, \\(\\phi\\) the global phase, \\(\\delta\\) the detuning which can all be time-dependent (here omitted for simplicity). The operator \\(\\hat{n}_i = \\frac{1+\\sigma_i^z}{2}\\) is the occupation operator for the Rydberg state. \\(R_i\\) represents instead the spatial coordinates of the i-th qubit.</p> <p>The local addressability term reads instead:</p> \\[     \\mathcal{H}_{\\textrm{local}}(w^{drv}, w^{det}) = \\frac{\\tilde{\\Omega}}{2}\\sum_{i}^N         w_i^{drv}\\left(\\textrm{cos}(\\phi)\\sigma^x_i - \\textrm{sin}(\\phi)\\sigma^y_i \\right) -         \\Delta \\sum_{i}^N w_i^{det} \\hat{n}_i \\] <p>In this Hamiltonian, the local addressing pattern in both Rabi frequency and detuning is determined by the weights \\(w^{drv} = \\{w_i^{drv}\\}\\) and \\(w^{det} = \\{w_i^{det}\\}\\) respectively. These weights are assigned before starting the simulation and they should have a unit sum. Their action is to effectively modulate the amplitude of the local drive/detuning pulses given by \\(\\tilde{\\Omega}\\) and \\(\\Delta\\) which are here considered time-independent for simplicity.</p> <p>Qadence implements the Hamiltonian above in two different flavors of increasing complexity described below.</p>"},{"location":"digital_analog_qc/rydberg-hea/#circuit-constructor","title":"Circuit constructor","text":"<p>The <code>rydberg_hea</code> constructor routine allows to build a circuit instance implementing a basic version of the Hamiltonian evolution described above where both \\(\\Delta\\) and \\(\\tilde{\\Omega}\\) coefficients are considered constants. Furthemore, no global drive and detuning are explicitly added to the Hamiltonian. Therefore, the final Hamiltonian generator of the circuit reads as follows:</p> \\[ \\matchcal{H} = \\mathcal{H}_{\\textrm{local}}(w^{drv}, w^{det}) + \\mathcal{H}_{\\textrm{int}} \\] <p>This implementation does not perform any checks on the weights normalization, thus making it not realistic. This implies that global drive and detuning can be retrieved by appropriately choosing the weights.</p> <p>You can easily create a Rydberg hardware efficient ansatz implementing multiple layers of the evolution generated by the local addressing Hamiltonian:</p> \\[ \\mathcal{H}_{evo} = \\sum_j \\mathcal{H}_{\\textrm{local}}(w_{j}^{drv}, w_{j}^{det}) \\] <p>Notice that in real-device implementation, one layer only is usually possible.</p> <pre><code>import qadence as qd\nfrom qadence import rydberg_hea, rydberg_hea_layer\nn_qubits = 4\nn_layers = 2\nregister = qd.Register.line(n_qubits)\n# ansatz constructor\n# the evolution time is parametrized for each layer of the evolution\nansatz = rydberg_hea(\nregister,\nn_layers=n_layers,  # number of subsequent layers of Hamiltonian evolution\naddressable_detuning=True,  # make the local detuning weights w_i^{det} as variational parameters\naddressable_drive=True, # make the local drive weights w_i^{drv} as variational parameters\ntunable_phase=True, # make the phase \\phi as a variational parameter\n)\n# alternatively, a single ansatz layer can also be created for\n# better flexibility\n# these can be variational parameters\ntevo_drive = 1.0  # evolution time for the locally addressed drive term\ntevo_det = 1.0 # evolution time for the locally addressed detuning term\ntevo_int = 1.0  # evolution time for the interaction term\n# these can be list of variational parameters\nweights_drive = [0.0, 0.25, 0.5, 0.25]\nweights_det = [0.0, 0.0, 0.5, 0.5]\nansatz_layer = rydberg_hea_layer(\nregister,\ntevo_det,\ntevo_drive,\ntevo_int,\ndetunings=weights_det,\ndrives=weights_drive,\n)\n</code></pre> <pre><code>\n</code></pre> <p>This circuit constructor is meant to be used with fully differentiable backends such as PyQTorch and mainly for quick experimentation with neutral atom compatible ansatze.</p>"},{"location":"digital_analog_qc/rydberg-hea/#usage-with-digital-analog-emulation","title":"Usage with digital-analog emulation","text":"<p>A full integration with the emulated digital-analog framework for realistic simulations is coming soon.</p>"},{"location":"qadence/blocks/","title":"Block system","text":"<p><code>qadence</code> offers a block-based system to construct quantum circuits in a flexible manner.</p>"},{"location":"qadence/blocks/#qadence.blocks.abstract.AbstractBlock","title":"<code>AbstractBlock</code>  <code>dataclass</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Base class for both primitive and composite blocks.</p> ATTRIBUTE DESCRIPTION <code>name</code> <p>A human-readable name attached to the block type. Notice, this is the same for all the class instances so it cannot be used for identifying different blocks</p> <p> TYPE: <code>str</code> </p> <code>qubit_support</code> <p>The qubit support of the block expressed as a tuple of integers</p> <p> TYPE: <code>tuple[int, ...]</code> </p> <code>tag</code> <p>A tag identifying a particular instance of the block which can be used for identification and pretty printing</p> <p> TYPE: <code>str | None</code> </p> <code>eigenvalues</code> <p>The eigenvalues of the matrix representing the block. This is used mainly for primitive blocks and it's needed for generalized parameter shift rule computations. Currently unused.</p> <p> TYPE: <code>list[float] | None</code> </p>"},{"location":"qadence/blocks/#qadence.blocks.abstract.AbstractBlock.is_identity","title":"<code>is_identity: bool</code>  <code>property</code>","text":"<p>Identity predicate for blocks.</p>"},{"location":"qadence/blocks/#qadence.blocks.abstract.AbstractBlock.n_qubits","title":"<code>n_qubits()</code>","text":"<p>The number of qubits in the whole system.</p> <p>A block acting on qubit N would has at least n_qubits &gt;= N + 1.</p> Source code in <code>qadence/blocks/abstract.py</code> <pre><code>@abstractproperty\ndef n_qubits(self) -&gt; int:\n\"\"\"The number of qubits in the whole system.\n    A block acting on qubit N would has at least n_qubits &gt;= N + 1.\n    \"\"\"\npass\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.abstract.AbstractBlock.n_supports","title":"<code>n_supports()</code>","text":"<p>The number of qubits the block is acting on.</p> Source code in <code>qadence/blocks/abstract.py</code> <pre><code>@abstractproperty\ndef n_supports(self) -&gt; int:\n\"\"\"The number of qubits the block is acting on.\"\"\"\npass\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.abstract.AbstractBlock.qubit_support","title":"<code>qubit_support()</code>","text":"<p>The indices of the qubit(s) the block is acting on.</p> <p>Qadence uses the ordering [0..,N-1] for qubits.</p> Source code in <code>qadence/blocks/abstract.py</code> <pre><code>@abstractproperty\ndef qubit_support(self) -&gt; Tuple[int, ...]:\n\"\"\"The indices of the qubit(s) the block is acting on.\n    Qadence uses the ordering [0..,N-1] for qubits.\n    \"\"\"\npass\n</code></pre>"},{"location":"qadence/blocks/#primitive-blocks","title":"Primitive blocks","text":""},{"location":"qadence/blocks/#qadence.blocks.primitive.ControlBlock","title":"<code>ControlBlock(control, target_block)</code>","text":"<p>             Bases: <code>PrimitiveBlock</code></p> <p>The abstract ControlBlock.</p> Source code in <code>qadence/blocks/primitive.py</code> <pre><code>def __init__(self, control: tuple[int, ...], target_block: PrimitiveBlock) -&gt; None:\nself.blocks = (target_block,)\n# using tuple expansion because some control operations could\n# have multiple targets, e.g. CSWAP\nsuper().__init__((*control, *target_block.qubit_support))  # target_block.qubit_support[0]))\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.primitive.ParametricBlock","title":"<code>ParametricBlock(qubit_support)</code>","text":"<p>             Bases: <code>PrimitiveBlock</code></p> <p>Parameterized primitive blocks.</p> Source code in <code>qadence/blocks/primitive.py</code> <pre><code>def __init__(self, qubit_support: tuple[int, ...]):\nself._qubit_support = qubit_support\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.primitive.ParametricBlock.num_parameters","title":"<code>num_parameters()</code>  <code>abstractmethod</code>","text":"<p>The number of parameters required by the block.</p> <p>This is a class property since the number of parameters is defined automatically before instantiating the operation. Also, this could correspond to a larger number of actual user-facing parameters since any parameter expression is allowed</p> <p>Examples: - RX operation has 1 parameter - U operation has 3 parameters - HamEvo has 2 parameters (generator and time evolution)</p> Source code in <code>qadence/blocks/primitive.py</code> <pre><code>@abstractmethod\ndef num_parameters(cls) -&gt; int:\n\"\"\"The number of parameters required by the block.\n    This is a class property since the number of parameters is defined\n    automatically before instantiating the operation. Also, this could\n    correspond to a larger number of actual user-facing parameters\n    since any parameter expression is allowed\n    Examples:\n    - RX operation has 1 parameter\n    - U operation has 3 parameters\n    - HamEvo has 2 parameters (generator and time evolution)\n    \"\"\"\npass\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.primitive.ParametricControlBlock","title":"<code>ParametricControlBlock(control, target_block)</code>","text":"<p>             Bases: <code>ParametricBlock</code></p> <p>The abstract parametrized ControlBlock.</p> Source code in <code>qadence/blocks/primitive.py</code> <pre><code>def __init__(self, control: tuple[int, ...], target_block: ParametricBlock) -&gt; None:\nself.blocks = (target_block,)\nself.parameters = target_block.parameters\nsuper().__init__((*control, target_block.qubit_support[0]))\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.primitive.PrimitiveBlock","title":"<code>PrimitiveBlock(qubit_support)</code>","text":"<p>             Bases: <code>AbstractBlock</code></p> <p>Primitive blocks represent elementary unitary operations.</p> <p>Examples are single/multi-qubit gates or Hamiltonian evolution. See <code>qadence.operations</code> for a full list of primitive blocks.</p> Source code in <code>qadence/blocks/primitive.py</code> <pre><code>def __init__(self, qubit_support: tuple[int, ...]):\nself._qubit_support = qubit_support\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.primitive.PrimitiveBlock.digital_decomposition","title":"<code>digital_decomposition()</code>","text":"<p>Decomposition into purely digital gates.</p> <p>This method returns a decomposition of the Block in a combination of purely digital single-qubit and two-qubit 'gates', by manual/custom knowledge of how this can be done efficiently. :return:</p> Source code in <code>qadence/blocks/primitive.py</code> <pre><code>def digital_decomposition(self) -&gt; AbstractBlock:\n\"\"\"Decomposition into purely digital gates.\n    This method returns a decomposition of the Block in a\n    combination of purely digital single-qubit and two-qubit\n    'gates', by manual/custom knowledge of how this can be done efficiently.\n    :return:\n    \"\"\"\nreturn self\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.primitive.ScaleBlock","title":"<code>ScaleBlock(block, parameter)</code>","text":"<p>             Bases: <code>ParametricBlock</code></p> <p>Scale blocks are created when multiplying a block by a number or parameter.</p> <p>Example: <pre><code>from qadence import X\nprint(X(0) * 2)\n</code></pre> <pre><code>[mul: 2] \u2514\u2500\u2500 X(0)\n</code></pre> </p> Source code in <code>qadence/blocks/primitive.py</code> <pre><code>def __init__(self, block: AbstractBlock, parameter: Any):\nself.block = block\n# TODO: more meaningful name like `scale`?\nself.parameters = (\nparameter if isinstance(parameter, ParamMap) else ParamMap(parameter=parameter)\n)\nsuper().__init__(block.qubit_support)\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.primitive.TimeEvolutionBlock","title":"<code>TimeEvolutionBlock(qubit_support)</code>","text":"<p>             Bases: <code>ParametricBlock</code></p> <p>Simple time evolution block with time-independent Hamiltonian.</p> <p>This class is just a convenience class which is used to label blocks which contains simple time evolution with time-independent Hamiltonian operators</p> Source code in <code>qadence/blocks/primitive.py</code> <pre><code>def __init__(self, qubit_support: tuple[int, ...]):\nself._qubit_support = qubit_support\n</code></pre>"},{"location":"qadence/blocks/#analog-blocks","title":"Analog blocks","text":"<p>To learn how to use analog blocks and how to mix digital &amp; analog blocks, check out the digital-analog section of the documentation.</p> <p>Examples on how to use digital-analog blocks can be found in the *examples folder of the qadence repo:</p> <ul> <li>Fit a simple sinus: <code>examples/digital-analog/fit-sin.py</code></li> <li>Solve a QUBO: <code>examples/digital-analog/qubo.py</code></li> </ul>"},{"location":"qadence/blocks/#qadence.blocks.analog.AnalogChain","title":"<code>AnalogChain(blocks)</code>  <code>dataclass</code>","text":"<p>             Bases: <code>AnalogComposite</code></p> <p>A chain of analog blocks.</p> <p>Needed because analog blocks require stricter validation than the general <code>ChainBlock</code>.</p> <p><code>AnalogChain</code>s can only be constructed from <code>AnalogKron</code> blocks or globally supported, primitive, analog blocks (like <code>WaitBlock</code>s and <code>ConstantAnalogRotation</code>s).</p> <p>Automatically constructed by the <code>chain</code> function if only analog blocks are given.</p> <p>Example: <pre><code>from qadence import X, chain, wait\nb = chain(wait(200), wait(200))\nprint(type(b))  # this is an `AnalogChain`\nb = chain(X(0), wait(200))\nprint(type(b))  # this is a general `ChainBlock`\n</code></pre> <pre><code>&lt;class 'qadence.blocks.analog.AnalogChain'&gt;\n&lt;class 'qadence.blocks.composite.ChainBlock'&gt;\n</code></pre> </p> Source code in <code>qadence/blocks/analog.py</code> <pre><code>def __init__(self, blocks: Tuple[AnalogBlock, ...]):\n\"\"\"A chain of analog blocks.\n    Needed because analog blocks require\n    stricter validation than the general `ChainBlock`.\n    `AnalogChain`s can only be constructed from `AnalogKron` blocks or\n    _**globally supported**_, primitive, analog blocks (like `WaitBlock`s and\n    `ConstantAnalogRotation`s).\n    Automatically constructed by the [`chain`][qadence.blocks.utils.chain]\n    function if only analog blocks are given.\n    Example:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence import X, chain, wait\n    b = chain(wait(200), wait(200))\n    print(type(b))  # this is an `AnalogChain`\n    b = chain(X(0), wait(200))\n    print(type(b))  # this is a general `ChainBlock`\n    ```\n    \"\"\"\nfor b in blocks:\nif not (isinstance(b, AnalogKron) or b.qubit_support.is_global):\nraise ValueError(\"Only KronBlocks or global blocks can be chain'ed.\")\nself.blocks = blocks\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.analog.AnalogKron","title":"<code>AnalogKron(blocks, interaction=Interaction.NN)</code>  <code>dataclass</code>","text":"<p>             Bases: <code>AnalogComposite</code></p> <p>Stack analog blocks vertically (i.e. in time).</p> <p>Needed because analog require stricter validation than the general <code>KronBlock</code>.</p> <p><code>AnalogKron</code>s can only be constructed from non-global, analog blocks with the same duration.</p> Source code in <code>qadence/blocks/analog.py</code> <pre><code>def __init__(self, blocks: Tuple[AnalogBlock, ...], interaction: Interaction = Interaction.NN):\n\"\"\"Stack analog blocks vertically (i.e. in time).\n    Needed because analog require\n    stricter validation than the general `KronBlock`.\n    `AnalogKron`s can only be constructed from _**non-global**_, analog blocks\n    with the _**same duration**_.\n    \"\"\"\nif len(blocks) == 0:\nraise NotImplementedError(\"Empty KronBlocks not supported\")\nself.blocks = blocks\nself.interaction = interaction\nqubit_support = QubitSupport()\nduration = blocks[0].duration\nfor b in blocks:\nif not isinstance(b, AnalogBlock):\nraise ValueError(\"Can only kron `AnalgoBlock`s with other `AnalgoBlock`s.\")\nif b.qubit_support == QubitSupport(\"global\"):\nraise ValueError(\"Blocks with global support cannot be kron'ed.\")\nif not qubit_support.is_disjoint(b.qubit_support):\nraise ValueError(\"Make sure blocks act on distinct qubits!\")\nif not np.isclose(evaluate(duration), evaluate(b.duration)):\nraise ValueError(\"Kron'ed blocks have to have same duration.\")\nqubit_support += b.qubit_support\nself.blocks = blocks\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.analog.ConstantAnalogRotation","title":"<code>ConstantAnalogRotation</code>  <code>dataclass</code>","text":"<p>             Bases: <code>AnalogBlock</code></p> <p>Implements a constant analog rotation with interaction dictated by the chosen Hamiltonian.</p> <pre><code>H/h = \u2211\u1d62(\u03a9/2 cos(\u03c6)*X\u1d62 - sin(\u03c6)*Y\u1d62 - \u03b4n\u1d62) + H\u1d62\u2099\u209c.\n</code></pre> <p>To construct this block you can use of the following convenience wrappers: - The general rotation operation <code>AnalogRot</code> - Shorthands for rotatins around an axis:   <code>AnalogRX</code>,   <code>AnalogRY</code>,   <code>AnalogRZ</code></p> <p>Can be used with <code>add_interaction</code>. WARNING: do not use <code>ConstantAnalogRotation</code> with <code>alpha</code> as differentiable parameter - use the convenience wrappers mentioned above.</p>"},{"location":"qadence/blocks/#qadence.blocks.analog.WaitBlock","title":"<code>WaitBlock</code>  <code>dataclass</code>","text":"<p>             Bases: <code>AnalogBlock</code></p> <p>Waits.</p> <p>In real interacting quantum devices, it means letting the system evolve freely according to the time-dependent Schrodinger equation. With emulators, this block is translated to an appropriate interaction Hamiltonian, for example, an Ising interaction</p> <pre><code>H\u1d62\u2099\u209c = \u2211\u1d62\u2c7c C\u2086/r\u1d62\u2c7c\u2076 n\u1d62n\u2c7c\n</code></pre> <p>or an XY-interaction</p> <pre><code>H\u1d62\u2099\u209c = \u2211\u1d62\u2c7c C\u2083/r\u2c7c\u2c7c\u00b3 (X\u1d62X\u2c7c + Z\u1d62Z\u2c7c)\n</code></pre> <p>with <code>n\u1d62 = (1-Z\u1d62)/2</code>.</p> <p>To construct this block, use the <code>wait</code> function.</p> <p>Can be used with <code>add_interaction</code>.</p>"},{"location":"qadence/blocks/#composite-blocks","title":"Composite blocks","text":""},{"location":"qadence/blocks/#qadence.blocks.utils.chain","title":"<code>chain(*args)</code>","text":"<p>Chain blocks sequentially.</p> <p>On digital backends this can be interpreted loosely as a matrix mutliplication of blocks. In the analog case it chains blocks in time.</p> PARAMETER  DESCRIPTION <code>*args</code> <p>Blocks to chain. Can also be a generator.</p> <p> TYPE: <code>Union[AbstractBlock, Generator, List[AbstractBlock]]</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>ChainBlock</code> <p>ChainBlock</p> <p>Example: <pre><code>from qadence import X, Y, chain\nb = chain(X(0), Y(0))\n# or use a generator\nb = chain(X(i) for i in range(3))\nprint(b)\n</code></pre> <pre><code>ChainBlock(0,1,2)\n\u251c\u2500\u2500 X(0)\n\u251c\u2500\u2500 X(1)\n\u2514\u2500\u2500 X(2)\n</code></pre> </p> Source code in <code>qadence/blocks/utils.py</code> <pre><code>def chain(*args: Union[AbstractBlock, Generator, List[AbstractBlock]]) -&gt; ChainBlock:\n\"\"\"Chain blocks sequentially.\n    On digital backends this can be interpreted\n    loosely as a matrix mutliplication of blocks. In the analog case it chains\n    blocks in time.\n    Arguments:\n        *args: Blocks to chain. Can also be a generator.\n    Returns:\n        ChainBlock\n    Example:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence import X, Y, chain\n    b = chain(X(0), Y(0))\n    # or use a generator\n    b = chain(X(i) for i in range(3))\n    print(b)\n    ```\n    \"\"\"\n# ugly hack to use `AnalogChain` if we are dealing only with analog blocks\nif len(args) and all(\nisinstance(a, AnalogBlock) or isinstance(a, AnalogComposite) for a in args\n):\nreturn analog_chain(*args)  # type: ignore[return-value,arg-type]\nreturn _construct(ChainBlock, args)\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.utils.kron","title":"<code>kron(*args)</code>","text":"<p>Stack blocks vertically.</p> <p>On digital backends this can be intepreted loosely as a kronecker product of blocks. In the analog case it executes blocks parallel in time.</p> PARAMETER  DESCRIPTION <code>*args</code> <p>Blocks to kron. Can also be a generator.</p> <p> TYPE: <code>Union[AbstractBlock, Generator]</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>KronBlock</code> <p>KronBlock</p> <p>Example: <pre><code>from qadence import X, Y, kron\nb = kron(X(0), Y(1))\n# or use a generator\nb = kron(X(i) for i in range(3))\nprint(b)\n</code></pre> <pre><code>KronBlock(0,1,2)\n\u251c\u2500\u2500 X(0)\n\u251c\u2500\u2500 X(1)\n\u2514\u2500\u2500 X(2)\n</code></pre> </p> Source code in <code>qadence/blocks/utils.py</code> <pre><code>def kron(*args: Union[AbstractBlock, Generator]) -&gt; KronBlock:\n\"\"\"Stack blocks vertically.\n    On digital backends this can be intepreted\n    loosely as a kronecker product of blocks. In the analog case it executes\n    blocks parallel in time.\n    Arguments:\n        *args: Blocks to kron. Can also be a generator.\n    Returns:\n        KronBlock\n    Example:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence import X, Y, kron\n    b = kron(X(0), Y(1))\n    # or use a generator\n    b = kron(X(i) for i in range(3))\n    print(b)\n    ```\n    \"\"\"\n# ugly hack to use `AnalogKron` if we are dealing only with analog blocks\nif len(args) and all(\nisinstance(a, AnalogBlock) or isinstance(a, AnalogComposite) for a in args\n):\nreturn analog_kron(*args)  # type: ignore[return-value,arg-type]\nreturn _construct(KronBlock, args)\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.utils.add","title":"<code>add(*args)</code>","text":"<p>Sums blocks.</p> PARAMETER  DESCRIPTION <code>*args</code> <p>Blocks to add. Can also be a generator.</p> <p> TYPE: <code>Union[AbstractBlock, Generator]</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>AddBlock</code> <p>AddBlock</p> <p>Example: <pre><code>from qadence import X, Y, add\nb = add(X(0), Y(0))\n# or use a generator\nb = add(X(i) for i in range(3))\nprint(b)\n</code></pre> <pre><code>AddBlock(0,1,2)\n\u251c\u2500\u2500 X(0)\n\u251c\u2500\u2500 X(1)\n\u2514\u2500\u2500 X(2)\n</code></pre> </p> Source code in <code>qadence/blocks/utils.py</code> <pre><code>def add(*args: Union[AbstractBlock, Generator]) -&gt; AddBlock:\n\"\"\"Sums blocks.\n    Arguments:\n        *args: Blocks to add. Can also be a generator.\n    Returns:\n        AddBlock\n    Example:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence import X, Y, add\n    b = add(X(0), Y(0))\n    # or use a generator\n    b = add(X(i) for i in range(3))\n    print(b)\n    ```\n    \"\"\"\nreturn _construct(AddBlock, args)\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.composite.AddBlock","title":"<code>AddBlock(blocks)</code>","text":"<p>             Bases: <code>CompositeBlock</code></p> <p>Adds blocks.</p> <p>Constructed via <code>add</code>.</p> Source code in <code>qadence/blocks/composite.py</code> <pre><code>def __init__(self, blocks: Tuple[AbstractBlock, ...]):\nself.blocks = blocks\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.composite.ChainBlock","title":"<code>ChainBlock(blocks)</code>","text":"<p>             Bases: <code>CompositeBlock</code></p> <p>Chains blocks sequentially.</p> <p>Constructed via <code>chain</code></p> Source code in <code>qadence/blocks/composite.py</code> <pre><code>def __init__(self, blocks: Tuple[AbstractBlock, ...]):\nself.blocks = blocks\n</code></pre>"},{"location":"qadence/blocks/#qadence.blocks.composite.CompositeBlock","title":"<code>CompositeBlock</code>","text":"<p>             Bases: <code>AbstractBlock</code></p> <p>Block which composes multiple blocks into one larger block (which can again be composed).</p> <p>Composite blocks are constructed via <code>chain</code>, <code>kron</code>, and <code>add</code>.</p>"},{"location":"qadence/blocks/#qadence.blocks.composite.KronBlock","title":"<code>KronBlock(blocks)</code>","text":"<p>             Bases: <code>CompositeBlock</code></p> <p>Stacks blocks horizontally.</p> <p>Constructed via <code>kron</code>.</p> Source code in <code>qadence/blocks/composite.py</code> <pre><code>def __init__(self, blocks: Tuple[AbstractBlock, ...]):\nif len(blocks) == 0:\nraise NotImplementedError(\"Empty KronBlocks not supported\")\nqubit_support = QubitSupport()\nfor b in blocks:\nassert (\nQubitSupportType.GLOBAL,\n) != b.qubit_support, \"Blocks with global support cannot be kron'ed.\"\nassert qubit_support.is_disjoint(\nb.qubit_support\n), \"Make sure blocks act on distinct qubits!\"\nqubit_support += b.qubit_support\nself.blocks = blocks\n</code></pre>"},{"location":"qadence/blocks/#converting-blocks-to-matrices","title":"Converting blocks to matrices","text":""},{"location":"qadence/blocks/#qadence.blocks.block_to_tensor.block_to_tensor","title":"<code>block_to_tensor(block, values={}, qubit_support=None, use_full_support=True, tensor_type=TensorType.DENSE, endianness=Endianness.BIG)</code>","text":"<p>Convert a block into a torch tensor.</p> PARAMETER  DESCRIPTION <code>block</code> <p>The block to convert.</p> <p> TYPE: <code>AbstractBlock</code> </p> <code>values</code> <p>A optional dict with values for parameters.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p> <code>qubit_support</code> <p>The qubit_support of the block.</p> <p> TYPE: <code>tuple</code> DEFAULT: <code>None</code> </p> <code>use_full_support</code> <p>True infers the total number of qubits.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>tensor_type</code> <p>the target tensor type.</p> <p> TYPE: <code>TensorType</code> DEFAULT: <code>DENSE</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>A torch.Tensor.</p> <p>Examples: <pre><code>from qadence import hea, hamiltonian_factory, Z, block_to_tensor\nblock = hea(2,2)\nprint(block_to_tensor(block))\n# In case you have a diagonal observable, you can use\nobs = hamiltonian_factory(2, detuning = Z)\nprint(block_to_tensor(obs, tensor_type=\"SparseDiagonal\"))\n</code></pre> <pre><code>tensor([[[ 0.1709+0.3017j, -0.4932-0.4932j, -0.4975-0.2831j, -0.1649-0.1961j],\n[-0.0164-0.4321j,  0.3352+0.2216j, -0.3870-0.4641j, -0.5347+0.0218j],\n[-0.2988-0.5635j, -0.2746-0.4115j,  0.3084+0.2571j, -0.3356-0.2731j],\n[-0.0645-0.5308j, -0.3275+0.0013j, -0.1177-0.3636j,  0.6365+0.2357j]]],\ngrad_fn=&lt;UnsafeViewBackward0&gt;)\ntensor(indices=tensor([[0, 3],\n[0, 3]]),\nvalues=tensor([ 2.+0.j, -2.+0.j]),\nsize=(4, 4), nnz=2, layout=torch.sparse_coo)\n</code></pre> </p> Source code in <code>qadence/blocks/block_to_tensor.py</code> <pre><code>def block_to_tensor(\nblock: AbstractBlock,\nvalues: dict[str, TNumber | torch.Tensor] = {},\nqubit_support: tuple | None = None,\nuse_full_support: bool = True,\ntensor_type: TensorType = TensorType.DENSE,\nendianness: Endianness = Endianness.BIG,\n) -&gt; torch.Tensor:\n\"\"\"\n    Convert a block into a torch tensor.\n    Arguments:\n        block (AbstractBlock): The block to convert.\n        values (dict): A optional dict with values for parameters.\n        qubit_support (tuple): The qubit_support of the block.\n        use_full_support (bool): True infers the total number of qubits.\n        tensor_type (TensorType): the target tensor type.\n    Returns:\n        A torch.Tensor.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence import hea, hamiltonian_factory, Z, block_to_tensor\n    block = hea(2,2)\n    print(block_to_tensor(block))\n    # In case you have a diagonal observable, you can use\n    obs = hamiltonian_factory(2, detuning = Z)\n    print(block_to_tensor(obs, tensor_type=\"SparseDiagonal\"))\n    ```\n    \"\"\"\n# FIXME: default use_full_support to False. In general, it would\n# be more efficient to do that, and make sure that computations such\n# as observables only do the matmul of the size of the qubit support.\nif tensor_type == TensorType.DENSE:\nfrom qadence.blocks import embedding\n(ps, embed) = embedding(block)\nreturn _block_to_tensor_embedded(\nblock, embed(ps, values), qubit_support, use_full_support, endianness=endianness\n)\nelif tensor_type == TensorType.SPARSEDIAGONAL:\nt = block_to_diagonal(block, endianness=endianness)\nindices, values, size = torch.nonzero(t), t[t != 0], len(t)\nindices = torch.stack((indices.flatten(), indices.flatten()))\nreturn torch.sparse_coo_tensor(indices, values, (size, size))\n</code></pre>"},{"location":"qadence/constructors/","title":"Constructors for common quantum circuits","text":""},{"location":"qadence/constructors/#qadence.constructors.feature_maps.chebyshev_feature_map","title":"<code>chebyshev_feature_map(n_qubits, support=None, param='phi', op=RX)</code>","text":"<p>Construct a Chebyshev feature map.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>number of qubits across which the FM is created</p> <p> TYPE: <code>int</code> </p> <code>support</code> <p>The qubit support</p> <p> TYPE: <code>Iterable[int]</code> DEFAULT: <code>None</code> </p> <code>param</code> <p>The base name for the feature <code>Parameter</code></p> <p> TYPE: <code>str</code> DEFAULT: <code>'phi'</code> </p> Source code in <code>qadence/constructors/feature_maps.py</code> <pre><code>def chebyshev_feature_map(\nn_qubits: int, support: tuple[int, ...] = None, param: str = \"phi\", op: RotationTypes = RX\n) -&gt; AbstractBlock:\n\"\"\"Construct a Chebyshev feature map.\n    Args:\n        n_qubits: number of qubits across which the FM is created\n        support (Iterable[int]): The qubit support\n        param: The base name for the feature `Parameter`\n    \"\"\"\nwarnings.warn(\n\"Function 'chebyshev_feature_map' is deprecated. Please use 'feature_map' directly.\",\nFutureWarning,\n)\nfm = feature_map(n_qubits, support=support, param=param, op=op, fm_type=BasisSet.CHEBYSHEV)\nreturn fm\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.feature_maps.exp_fourier_feature_map","title":"<code>exp_fourier_feature_map(n_qubits, support=None, param='x', feature_range=None)</code>","text":"<p>Exponential fourier feature map.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>number of qubits in the feature</p> <p> TYPE: <code>int</code> </p> <code>support</code> <p>qubit support</p> <p> TYPE: <code>tuple[int, ...]</code> DEFAULT: <code>None</code> </p> <code>param</code> <p>name of feature <code>Parameter</code></p> <p> TYPE: <code>str</code> DEFAULT: <code>'x'</code> </p> <code>feature_range</code> <p>min and max value of the feature, as floats in a Tuple</p> <p> TYPE: <code>tuple[float, float]</code> DEFAULT: <code>None</code> </p> Source code in <code>qadence/constructors/feature_maps.py</code> <pre><code>def exp_fourier_feature_map(\nn_qubits: int,\nsupport: tuple[int, ...] = None,\nparam: str = \"x\",\nfeature_range: tuple[float, float] = None,\n) -&gt; AbstractBlock:\n\"\"\"\n    Exponential fourier feature map.\n    Args:\n        n_qubits: number of qubits in the feature\n        support: qubit support\n        param: name of feature `Parameter`\n        feature_range: min and max value of the feature, as floats in a Tuple\n    \"\"\"\nif feature_range is None:\nfeature_range = (0.0, 2.0**n_qubits)\nsupport = tuple(range(n_qubits)) if support is None else support\nhlayer = kron(H(qubit) for qubit in support)\nrlayer = feature_map(\nn_qubits,\nsupport=support,\nparam=param,\nop=RZ,\nfm_type=BasisSet.FOURIER,\nreupload_scaling=ReuploadScaling.EXP,\nfeature_range=feature_range,\ntarget_range=(0.0, 2 * pi),\n)\nrlayer.tag = None\nreturn tag(chain(hlayer, rlayer), f\"ExpFourierFM({param})\")\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.feature_maps.feature_map","title":"<code>feature_map(n_qubits, support=None, param='phi', op=RX, fm_type=BasisSet.FOURIER, reupload_scaling=ReuploadScaling.CONSTANT, feature_range=None, target_range=None, multiplier=None)</code>","text":"<p>Construct a feature map of a given type.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>Number of qubits the feature map covers. Results in <code>support=range(n_qubits)</code>.</p> <p> TYPE: <code>int</code> </p> <code>support</code> <p>Puts one feature-encoding rotation gate on every qubit in <code>support</code>. n_qubits in this case specifies the total overall qubits of the circuit, which may be wider than the support itself, but not narrower.</p> <p> TYPE: <code>tuple[int, ...] | None</code> DEFAULT: <code>None</code> </p> <code>param</code> <p>Parameter of the feature map; you can pass a string or Parameter; it will be set as non-trainable (FeatureParameter) regardless.</p> <p> TYPE: <code>Parameter | str</code> DEFAULT: <code>'phi'</code> </p> <code>op</code> <p>Rotation operation of the feature map; choose from RX, RY, RZ or PHASE.</p> <p> TYPE: <code>RotationTypes</code> DEFAULT: <code>RX</code> </p> <code>fm_type</code> <p>Basis set for data encoding; choose from <code>BasisSet.FOURIER</code> for Fourier encoding, or <code>BasisSet.CHEBYSHEV</code> for Chebyshev polynomials of the first kind.</p> <p> TYPE: <code>BasisSet | type[Function] | str</code> DEFAULT: <code>FOURIER</code> </p> <code>reupload_scaling</code> <p>how the feature map scales the data that is re-uploaded for each qubit. choose from <code>ReuploadScaling</code> enumeration or provide your own function with a single int as input and int or float as output.</p> <p> TYPE: <code>ReuploadScaling | Callable | str</code> DEFAULT: <code>CONSTANT</code> </p> <code>feature_range</code> <p>range of data that the input data is assumed to come from.</p> <p> TYPE: <code>tuple[float, float] | None</code> DEFAULT: <code>None</code> </p> <code>target_range</code> <p>range of data the data encoder assumes as the natural range. For example, in Chebyshev polynomials it is (-1, 1), while for Fourier it may be chosen as (0, 2*pi).</p> <p> TYPE: <code>tuple[float, float] | None</code> DEFAULT: <code>None</code> </p> <code>multiplier</code> <p>overall multiplier; this is useful for reuploading the feature map serially with different scalings; can be a number or parameter/expression.</p> <p> TYPE: <code>Parameter | TParameter | None</code> DEFAULT: <code>None</code> </p> <p>Example: <pre><code>from qadence import feature_map, BasisSet, ReuploadScaling\nfm = feature_map(3, fm_type=BasisSet.FOURIER)\nprint(f\"{fm = }\")\nfm = feature_map(3, fm_type=BasisSet.CHEBYSHEV)\nprint(f\"{fm = }\")\nfm = feature_map(3, fm_type=BasisSet.FOURIER, reupload_scaling = ReuploadScaling.TOWER)\nprint(f\"{fm = }\")\n</code></pre> <pre><code>fm = KronBlock(0,1,2) [tag: Constant Fourier FM]\n\u251c\u2500\u2500 RX(0) [params: ['phi']]\n\u251c\u2500\u2500 RX(1) [params: ['phi']]\n\u2514\u2500\u2500 RX(2) [params: ['phi']]\nfm = KronBlock(0,1,2) [tag: Constant Chebyshev FM]\n\u251c\u2500\u2500 RX(0) [params: ['acos(phi)']]\n\u251c\u2500\u2500 RX(1) [params: ['acos(phi)']]\n\u2514\u2500\u2500 RX(2) [params: ['acos(phi)']]\nfm = KronBlock(0,1,2) [tag: Tower Fourier FM]\n\u251c\u2500\u2500 RX(0) [params: ['1_0*phi']]\n\u251c\u2500\u2500 RX(1) [params: ['2_0*phi']]\n\u2514\u2500\u2500 RX(2) [params: ['3_0*phi']]\n</code></pre> </p> Source code in <code>qadence/constructors/feature_maps.py</code> <pre><code>def feature_map(\nn_qubits: int,\nsupport: tuple[int, ...] | None = None,\nparam: Parameter | str = \"phi\",\nop: RotationTypes = RX,\nfm_type: BasisSet | type[Function] | str = BasisSet.FOURIER,\nreupload_scaling: ReuploadScaling | Callable | str = ReuploadScaling.CONSTANT,\nfeature_range: tuple[float, float] | None = None,\ntarget_range: tuple[float, float] | None = None,\nmultiplier: Parameter | TParameter | None = None,\n) -&gt; KronBlock:\n\"\"\"Construct a feature map of a given type.\n    Arguments:\n        n_qubits: Number of qubits the feature map covers. Results in `support=range(n_qubits)`.\n        support: Puts one feature-encoding rotation gate on every qubit in `support`. n_qubits in\n            this case specifies the total overall qubits of the circuit, which may be wider than the\n            support itself, but not narrower.\n        param: Parameter of the feature map; you can pass a string or Parameter;\n            it will be set as non-trainable (FeatureParameter) regardless.\n        op: Rotation operation of the feature map; choose from RX, RY, RZ or PHASE.\n        fm_type: Basis set for data encoding; choose from `BasisSet.FOURIER` for Fourier\n            encoding, or `BasisSet.CHEBYSHEV` for Chebyshev polynomials of the first kind.\n        reupload_scaling: how the feature map scales the data that is re-uploaded for each qubit.\n            choose from `ReuploadScaling` enumeration or provide your own function with a single\n            int as input and int or float as output.\n        feature_range: range of data that the input data is assumed to come from.\n        target_range: range of data the data encoder assumes as the natural range. For example,\n            in Chebyshev polynomials it is (-1, 1), while for Fourier it may be chosen as (0, 2*pi).\n        multiplier: overall multiplier; this is useful for reuploading the feature map serially with\n            different scalings; can be a number or parameter/expression.\n    Example:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence import feature_map, BasisSet, ReuploadScaling\n    fm = feature_map(3, fm_type=BasisSet.FOURIER)\n    print(f\"{fm = }\")\n    fm = feature_map(3, fm_type=BasisSet.CHEBYSHEV)\n    print(f\"{fm = }\")\n    fm = feature_map(3, fm_type=BasisSet.FOURIER, reupload_scaling = ReuploadScaling.TOWER)\n    print(f\"{fm = }\")\n    ```\n    \"\"\"\n# Process input\nif support is None:\nsupport = tuple(range(n_qubits))\nelif len(support) != n_qubits:\nraise ValueError(\"Wrong qubit support supplied\")\nif op not in ROTATIONS:\nraise ValueError(\nf\"Operation {op} not supported. \"\nf\"Please provide one from {[rot.__name__ for rot in ROTATIONS]}.\"\n)\n# Backwards compatibility\nif fm_type in (\"fourier\", \"chebyshev\", \"tower\"):\nlogger.warning(\n\"Selecting `fm_type` as 'fourier', 'chebyshev' or 'tower' is deprecated. \"\n\"Please use the respective enumerations: 'fm_type = BasisSet.FOURIER', \"\n\"'fm_type = BasisSet.CHEBYSHEV' or 'reupload_scaling = ReuploadScaling.TOWER'.\"\n)\nif fm_type == \"fourier\":\nfm_type = BasisSet.FOURIER\nelif fm_type == \"chebyshev\":\nfm_type = BasisSet.CHEBYSHEV\nelif fm_type == \"tower\":\nfm_type = BasisSet.CHEBYSHEV\nreupload_scaling = ReuploadScaling.TOWER\nif isinstance(param, Parameter):\nfparam = param\nfparam.trainable = False\nelse:\nfparam = FeatureParameter(param)\n# Set feature and target range\nfeature_range = _set_range(fm_type) if feature_range is None else feature_range\ntarget_range = _set_range(fm_type) if target_range is None else target_range\n# Rescale the feature parameter\nscaling = (max(target_range) - min(target_range)) / (max(feature_range) - min(feature_range))\nshift = min(target_range) - min(feature_range) * scaling\nif isclose(scaling, 1.0):\n# So we don't get 1.0 factor in visualization\nscaled_fparam = fparam + shift\nelse:\nscaled_fparam = scaling * fparam + shift\n# Transform feature parameter\nif fm_type == BasisSet.FOURIER:\ntransformed_feature = scaled_fparam\nelif fm_type == BasisSet.CHEBYSHEV:\ntransformed_feature = acos(scaled_fparam)\nelif inspect.isclass(fm_type) and issubclass(fm_type, Function):\ntransformed_feature = fm_type(scaled_fparam)\nelse:\nraise NotImplementedError(\nf\"Feature map type {fm_type} not implemented. Choose an item from the BasisSet \"\nf\"enum: {[bs.name for bs in BasisSet]}, or your own sympy.Function to wrap \"\n\"the given feature parameter with.\"\n)\nbasis_tag = fm_type.value if isinstance(fm_type, BasisSet) else str(fm_type)\n# Set reupload scaling function\nif callable(reupload_scaling):\nrs_func = reupload_scaling\nrs_tag = \"Custom\"\nelse:\nrs_func = RS_FUNC_DICT.get(reupload_scaling, None)  # type: ignore [call-overload]\nif rs_func is None:\nraise NotImplementedError(\nf\"Reupload scaling {reupload_scaling} not implemented; choose an item from \"\nf\"the ReuploadScaling enum: {[rs.name for rs in ReuploadScaling]}, or your own \"\n\"python function with a single int arg as input and int or float output.\"\n)\nif isinstance(reupload_scaling, ReuploadScaling):\nrs_tag = reupload_scaling.value\nelse:\nrs_tag = reupload_scaling\n# Set overall multiplier\nmultiplier = 1 if multiplier is None else multiplier\n# Build feature map\nop_list = []\nfor i, qubit in enumerate(support):\nop_list.append(op(qubit, multiplier * rs_func(i) * transformed_feature))\nfm = kron(*op_list)\nfm.tag = rs_tag + \" \" + basis_tag + \" FM\"\nreturn fm\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.feature_maps.fourier_feature_map","title":"<code>fourier_feature_map(n_qubits, support=None, param='phi', op=RX)</code>","text":"<p>Construct a Fourier feature map.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>number of qubits across which the FM is created</p> <p> TYPE: <code>int</code> </p> <code>param</code> <p>The base name for the feature <code>Parameter</code></p> <p> TYPE: <code>str</code> DEFAULT: <code>'phi'</code> </p> Source code in <code>qadence/constructors/feature_maps.py</code> <pre><code>def fourier_feature_map(\nn_qubits: int, support: tuple[int, ...] = None, param: str = \"phi\", op: RotationTypes = RX\n) -&gt; AbstractBlock:\n\"\"\"Construct a Fourier feature map.\n    Args:\n        n_qubits: number of qubits across which the FM is created\n        param: The base name for the feature `Parameter`\n    \"\"\"\nwarnings.warn(\n\"Function 'fourier_feature_map' is deprecated. Please use 'feature_map' directly.\",\nFutureWarning,\n)\nfm = feature_map(n_qubits, support=support, param=param, op=op, fm_type=BasisSet.FOURIER)\nreturn fm\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.feature_maps.tower_feature_map","title":"<code>tower_feature_map(n_qubits, support=None, param='phi', op=RX)</code>","text":"<p>Construct a Chebyshev tower feature map.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>number of qubits across which the FM is created</p> <p> TYPE: <code>int</code> </p> <code>param</code> <p>The base name for the feature <code>Parameter</code></p> <p> TYPE: <code>str</code> DEFAULT: <code>'phi'</code> </p> Source code in <code>qadence/constructors/feature_maps.py</code> <pre><code>def tower_feature_map(\nn_qubits: int, support: tuple[int, ...] = None, param: str = \"phi\", op: RotationTypes = RX\n) -&gt; AbstractBlock:\n\"\"\"Construct a Chebyshev tower feature map.\n    Args:\n        n_qubits: number of qubits across which the FM is created\n        param: The base name for the feature `Parameter`\n    \"\"\"\nwarnings.warn(\n\"Function 'tower_feature_map' is deprecated. Please use feature_map directly.\",\nFutureWarning,\n)\nfm = feature_map(\nn_qubits,\nsupport=support,\nparam=param,\nop=op,\nfm_type=BasisSet.CHEBYSHEV,\nreupload_scaling=ReuploadScaling.TOWER,\n)\nreturn fm\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.ansatze.build_qnn","title":"<code>build_qnn(n_qubits, n_features, depth=None, ansatz=None, fm_pauli=RY, spectrum='simple', basis='fourier', fm_strategy='parallel')</code>","text":"<p>Helper function to build a qadence QNN quantum circuit.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>The number of qubits.</p> <p> TYPE: <code>int</code> </p> <code>n_features</code> <p>The number of input dimensions.</p> <p> TYPE: <code>int</code> </p> <code>depth</code> <p>The depth of the ansatz.</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> <code>ansatz</code> <p>An optional argument to pass a custom qadence ansatz.</p> <p> TYPE: <code>Optional[AbstractBlock]</code> DEFAULT: <code>None</code> </p> <code>fm_pauli</code> <p>The type of Pauli gate for the feature map. Must be one of 'RX', 'RY', or 'RZ'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>RY</code> </p> <code>spectrum</code> <p>The desired spectrum of the feature map generator. The options simple, tower and exponential produce a spectrum with linear, quadratic and exponential eigenvalues with respect to the number of qubits.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'simple'</code> </p> <code>basis</code> <p>The encoding function. The options fourier and chebyshev correspond to \u03a6(x)=x and arcos(x) respectively.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'fourier'</code> </p> <code>fm_strategy</code> <p>The feature map encoding strategy. If \"parallel\", the features are encoded in one block of rotation gates, with each feature given an equal number of qubits. If \"serial\", the features are encoded sequentially, with a HEA block between.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'parallel'</code> </p> RETURNS DESCRIPTION <code>list[AbstractBlock]</code> <p>A list of Abstract blocks to be used for constructing a quantum circuit</p> Source code in <code>qadence/constructors/ansatze.py</code> <pre><code>def build_qnn(\nn_qubits: int,\nn_features: int,\ndepth: int = None,\nansatz: Optional[AbstractBlock] = None,\nfm_pauli: Type[RY] = RY,\nspectrum: str = \"simple\",\nbasis: str = \"fourier\",\nfm_strategy: str = \"parallel\",\n) -&gt; list[AbstractBlock]:\n\"\"\"Helper function to build a qadence QNN quantum circuit.\n    Args:\n        n_qubits (int): The number of qubits.\n        n_features (int): The number of input dimensions.\n        depth (int): The depth of the ansatz.\n        ansatz (Optional[AbstractBlock]):  An optional argument to pass a custom qadence ansatz.\n        fm_pauli (str): The type of Pauli gate for the feature map. Must be one of 'RX',\n            'RY', or 'RZ'.\n        spectrum (str): The desired spectrum of the feature map generator. The options simple,\n            tower and exponential produce a spectrum with linear, quadratic and exponential\n            eigenvalues with respect to the number of qubits.\n        basis (str): The encoding function. The options fourier and chebyshev correspond to \u03a6(x)=x\n            and arcos(x) respectively.\n        fm_strategy (str): The feature map encoding strategy. If \"parallel\", the features\n            are encoded in one block of rotation gates, with each feature given\n            an equal number of qubits. If \"serial\", the features are encoded\n            sequentially, with a HEA block between.\n    Returns:\n        A list of Abstract blocks to be used for constructing a quantum circuit\n    \"\"\"\ndepth = n_qubits if depth is None else depth\nidx_fms = build_idx_fms(basis, fm_pauli, fm_strategy, n_features, n_qubits, spectrum)\nif fm_strategy == \"parallel\":\n_fm = kron(*idx_fms)\nfm = tag(_fm, tag=\"FM\")\nelif fm_strategy == \"serial\":\nfm_components: list[AbstractBlock] = []\nfor j, fm_idx in enumerate(idx_fms[:-1]):\nfm_idx = tag(fm_idx, tag=f\"FM{j}\")  # type: ignore[assignment]\nfm_component = (fm_idx, hea(n_qubits, 1, f\"theta_{j}\"))\nfm_components.extend(fm_component)\nfm_components.append(tag(idx_fms[-1], tag=f\"FM{len(idx_fms) - 1}\"))\nfm = chain(*fm_components)  # type: ignore[assignment]\nansatz = hea(n_qubits, depth=depth) if ansatz is None else ansatz\nreturn [fm, ansatz]\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.ansatze.hea","title":"<code>hea(n_qubits, depth=1, param_prefix='theta', support=None, strategy=Strategy.DIGITAL, **strategy_args)</code>","text":"<p>Factory function for the Hardware Efficient Ansatz (HEA).</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>number of qubits in the block</p> <p> TYPE: <code>int</code> </p> <code>depth</code> <p>number of layers of the HEA</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>param_prefix</code> <p>the base name of the variational parameters</p> <p> TYPE: <code>str</code> DEFAULT: <code>'theta'</code> </p> <code>support</code> <p>qubit indexes where the HEA is applied</p> <p> TYPE: <code>tuple[int, ...]</code> DEFAULT: <code>None</code> </p> <code>strategy</code> <p>Strategy.Digital or Strategy.DigitalAnalog</p> <p> TYPE: <code>Strategy</code> DEFAULT: <code>DIGITAL</code> </p> <code>**strategy_args</code> <p>see below</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> PARAMETER DESCRIPTION <code>operations</code> <p>list of operations to cycle through in the digital single-qubit rotations of each layer. Valid for Digital and DigitalAnalog HEA.</p> <p> TYPE: <code>list</code> </p> <code>periodic</code> <p>if the qubits should be linked periodically. periodic=False is not supported in emu-c. Valid for only for Digital HEA.</p> <p> TYPE: <code>bool</code> </p> <code>entangler</code> <ul> <li>Digital: 2-qubit entangling operation. Supports CNOT, CZ, CRX, CRY, CRZ, CPHASE. Controlled rotations will have variational parameters on the rotation angles.</li> <li>DigitaAnalog | Analog: Hamiltonian generator for the analog entangling layer. Defaults to global ZZ Hamiltonian. Time parameter is considered variational.</li> </ul> <p> TYPE: <code>AbstractBlock</code> </p> <p>Examples: <pre><code>from qadence import RZ, RX\nfrom qadence import hea\n# create the circuit\nn_qubits, depth = 2, 4\nansatz = hea(\nn_qubits=n_qubits,\ndepth=depth,\nstrategy=\"sDAQC\",\noperations=[RZ,RX,RZ]\n)\n</code></pre> <pre><code>\n</code></pre> </p> Source code in <code>qadence/constructors/ansatze.py</code> <pre><code>def hea(\nn_qubits: int,\ndepth: int = 1,\nparam_prefix: str = \"theta\",\nsupport: tuple[int, ...] = None,\nstrategy: Strategy = Strategy.DIGITAL,\n**strategy_args: Any,\n) -&gt; AbstractBlock:\n\"\"\"\n    Factory function for the Hardware Efficient Ansatz (HEA).\n    Args:\n        n_qubits: number of qubits in the block\n        depth: number of layers of the HEA\n        param_prefix: the base name of the variational parameters\n        support: qubit indexes where the HEA is applied\n        strategy: Strategy.Digital or Strategy.DigitalAnalog\n        **strategy_args: see below\n    Keyword Arguments:\n        operations (list): list of operations to cycle through in the\n            digital single-qubit rotations of each layer. Valid for\n            Digital and DigitalAnalog HEA.\n        periodic (bool): if the qubits should be linked periodically.\n            periodic=False is not supported in emu-c. Valid for only\n            for Digital HEA.\n        entangler (AbstractBlock):\n            - Digital: 2-qubit entangling operation. Supports CNOT, CZ,\n            CRX, CRY, CRZ, CPHASE. Controlled rotations will have variational\n            parameters on the rotation angles.\n            - DigitaAnalog | Analog: Hamiltonian generator for the\n            analog entangling layer. Defaults to global ZZ Hamiltonian.\n            Time parameter is considered variational.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence import RZ, RX\n    from qadence import hea\n    # create the circuit\n    n_qubits, depth = 2, 4\n    ansatz = hea(\n        n_qubits=n_qubits,\n        depth=depth,\n        strategy=\"sDAQC\",\n        operations=[RZ,RX,RZ]\n    )\n    ```\n    \"\"\"\nif support is None:\nsupport = tuple(range(n_qubits))\nhea_func_dict = {\nStrategy.DIGITAL: hea_digital,\nStrategy.SDAQC: hea_sDAQC,\nStrategy.BDAQC: hea_bDAQC,\nStrategy.ANALOG: hea_analog,\n}\ntry:\nhea_func = hea_func_dict[strategy]\nexcept KeyError:\nraise KeyError(f\"Strategy {strategy} not recognized.\")\nhea_block: AbstractBlock = hea_func(\nn_qubits=n_qubits,\ndepth=depth,\nparam_prefix=param_prefix,\nsupport=support,\n**strategy_args,\n)  # type: ignore\nreturn hea_block\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.ansatze.hea_digital","title":"<code>hea_digital(n_qubits, depth=1, param_prefix='theta', periodic=False, operations=[RX, RY, RX], support=None, entangler=CNOT)</code>","text":"<p>Construct the Digital Hardware Efficient Ansatz (HEA).</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>number of qubits in the block.</p> <p> TYPE: <code>int</code> </p> <code>depth</code> <p>number of layers of the HEA.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>param_prefix</code> <p>the base name of the variational parameters</p> <p> TYPE: <code>str</code> DEFAULT: <code>'theta'</code> </p> <code>periodic</code> <p>if the qubits should be linked periodically. periodic=False is not supported in emu-c.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>operations</code> <p>list of operations to cycle through in the digital single-qubit rotations of each layer.</p> <p> TYPE: <code>list</code> DEFAULT: <code>[RX, RY, RX]</code> </p> <code>support</code> <p>qubit indexes where the HEA is applied.</p> <p> TYPE: <code>tuple</code> DEFAULT: <code>None</code> </p> <code>entangler</code> <p>2-qubit entangling operation. Supports CNOT, CZ, CRX, CRY, CRZ. Controlld rotations will have variational parameters on the rotation angles.</p> <p> TYPE: <code>AbstractBlock</code> DEFAULT: <code>CNOT</code> </p> Source code in <code>qadence/constructors/ansatze.py</code> <pre><code>def hea_digital(\nn_qubits: int,\ndepth: int = 1,\nparam_prefix: str = \"theta\",\nperiodic: bool = False,\noperations: list[type[AbstractBlock]] = [RX, RY, RX],\nsupport: tuple[int, ...] = None,\nentangler: Type[DigitalEntanglers] = CNOT,\n) -&gt; AbstractBlock:\n\"\"\"\n    Construct the Digital Hardware Efficient Ansatz (HEA).\n    Args:\n        n_qubits (int): number of qubits in the block.\n        depth (int): number of layers of the HEA.\n        param_prefix (str): the base name of the variational parameters\n        periodic (bool): if the qubits should be linked periodically.\n            periodic=False is not supported in emu-c.\n        operations (list): list of operations to cycle through in the\n            digital single-qubit rotations of each layer.\n        support (tuple): qubit indexes where the HEA is applied.\n        entangler (AbstractBlock): 2-qubit entangling operation.\n            Supports CNOT, CZ, CRX, CRY, CRZ. Controlld rotations\n            will have variational parameters on the rotation angles.\n    \"\"\"\ntry:\nif entangler not in [CNOT, CZ, CRX, CRY, CRZ, CPHASE]:\nraise ValueError(\n\"Please provide a valid two-qubit entangler operation for digital HEA.\"\n)\nexcept TypeError:\nraise ValueError(\"Please provide a valid two-qubit entangler operation for digital HEA.\")\nrot_list = _rotations_digital(\nn_qubits=n_qubits,\ndepth=depth,\nparam_prefix=param_prefix,\nsupport=support,\noperations=operations,\n)\nent_list = _entanglers_digital(\nn_qubits=n_qubits,\ndepth=depth,\nparam_prefix=param_prefix,\nsupport=support,\nperiodic=periodic,\nentangler=entangler,\n)\nlayers = []\nfor d in range(depth):\nlayers.append(rot_list[d])\nlayers.append(ent_list[d])\nreturn tag(chain(*layers), \"HEA\")\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.ansatze.hea_sDAQC","title":"<code>hea_sDAQC(n_qubits, depth=1, param_prefix='theta', operations=[RX, RY, RX], support=None, entangler=None)</code>","text":"<p>Construct the Hardware Efficient Ansatz (HEA) with analog entangling layers.</p> <p>It uses step-wise digital-analog computation.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>number of qubits in the block.</p> <p> TYPE: <code>int</code> </p> <code>depth</code> <p>number of layers of the HEA.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>param_prefix</code> <p>the base name of the variational parameters</p> <p> TYPE: <code>str</code> DEFAULT: <code>'theta'</code> </p> <code>operations</code> <p>list of operations to cycle through in the digital single-qubit rotations of each layer.</p> <p> TYPE: <code>list</code> DEFAULT: <code>[RX, RY, RX]</code> </p> <code>support</code> <p>qubit indexes where the HEA is applied.</p> <p> TYPE: <code>tuple</code> DEFAULT: <code>None</code> </p> <code>entangler</code> <p>Hamiltonian generator for the analog entangling layer. Defaults to global ZZ Hamiltonian. Time parameter is considered variational.</p> <p> TYPE: <code>AbstractBlock</code> DEFAULT: <code>None</code> </p> Source code in <code>qadence/constructors/ansatze.py</code> <pre><code>def hea_sDAQC(\nn_qubits: int,\ndepth: int = 1,\nparam_prefix: str = \"theta\",\noperations: list[type[AbstractBlock]] = [RX, RY, RX],\nsupport: tuple[int, ...] = None,\nentangler: AbstractBlock | None = None,\n) -&gt; AbstractBlock:\n\"\"\"\n    Construct the Hardware Efficient Ansatz (HEA) with analog entangling layers.\n    It uses step-wise digital-analog computation.\n    Args:\n        n_qubits (int): number of qubits in the block.\n        depth (int): number of layers of the HEA.\n        param_prefix (str): the base name of the variational parameters\n        operations (list): list of operations to cycle through in the\n            digital single-qubit rotations of each layer.\n        support (tuple): qubit indexes where the HEA is applied.\n        entangler (AbstractBlock): Hamiltonian generator for the\n            analog entangling layer. Defaults to global ZZ Hamiltonian.\n            Time parameter is considered variational.\n    \"\"\"\n# TODO: Add qubit support\nif entangler is None:\nentangler = hamiltonian_factory(n_qubits, interaction=Interaction.NN)\ntry:\nif not block_is_qubit_hamiltonian(entangler):\nraise ValueError(\n\"Please provide a valid Pauli Hamiltonian generator for digital-analog HEA.\"\n)\nexcept NotImplementedError:\nraise ValueError(\n\"Please provide a valid Pauli Hamiltonian generator for digital-analog HEA.\"\n)\nrot_list = _rotations_digital(\nn_qubits=n_qubits,\ndepth=depth,\nparam_prefix=param_prefix,\nsupport=support,\noperations=operations,\n)\nent_list = _entanglers_analog(\ndepth=depth,\nparam_prefix=param_prefix,\nentangler=entangler,\n)\nlayers = []\nfor d in range(depth):\nlayers.append(rot_list[d])\nlayers.append(ent_list[d])\nreturn tag(chain(*layers), \"HEA-sDA\")\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.hamiltonians.hamiltonian_factory","title":"<code>hamiltonian_factory(register, interaction=None, detuning=None, interaction_strength=None, detuning_strength=None, random_strength=False, force_update=False, use_complete_graph=False)</code>","text":"<p>General Hamiltonian creation function.</p> <p>Can be used to create Hamiltonians with 2-qubit interactions and single-qubit detunings, both with arbitrary strength or parameterized.</p> PARAMETER  DESCRIPTION <code>register</code> <p>register of qubits with a specific graph topology, or number of qubits. When passing a number of qubits a register with all-to-all connectivity is created.</p> <p> TYPE: <code>Register | int</code> </p> <code>interaction</code> <p>Interaction.ZZ, Interaction.NN, Interaction.XY, or Interacton.XYZ.</p> <p> TYPE: <code>Interaction | None</code> DEFAULT: <code>None</code> </p> <code>detuning</code> <p>single-qubit operator N, X, Y, or Z.</p> <p> TYPE: <code>TDetuning | None</code> DEFAULT: <code>None</code> </p> <code>interaction_strength</code> <p>list of values to be used as the interaction strength for each pair of qubits. Should be ordered following the order of <code>Register(n_qubits).edges</code>. Alternatively, some string \"x\" can be passed, which will create a parameterized interactions for each pair of qubits, each labelled as <code>\"x_ij\"</code>.</p> <p> TYPE: <code>TArray | str | None</code> DEFAULT: <code>None</code> </p> <code>detuning_strength</code> <p>list of values to be used as the detuning strength for each qubit. Alternatively, some string \"x\" can be passed, which will create a parameterized detuning for each qubit, each labelled as <code>\"x_i\"</code>.</p> <p> TYPE: <code>TArray | str | None</code> DEFAULT: <code>None</code> </p> <code>random_strength</code> <p>set random interaction and detuning strengths between -1 and 1.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>force_update</code> <p>force override register detuning and interaction strengths.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>use_complete_graph</code> <p>computes an interaction for every edge in a complete graph, independent of the edges in the register. Useful for defining Hamiltonians where the interaction strength decays with the distance.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <p>Examples:</p> <pre><code>from qadence import hamiltonian_factory, Interaction, Register, Z\nn_qubits = 3\n# Constant total magnetization observable:\nobservable = hamiltonian_factory(n_qubits, detuning = Z)\n# Parameterized total magnetization observable:\nobservable = hamiltonian_factory(n_qubits, detuning = Z, detuning_strength = \"z\")\n# Random all-to-all XY Hamiltonian generator:\ngenerator = hamiltonian_factory(\nn_qubits,\ninteraction = Interaction.XY,\nrandom_strength = True,\n)\n# Parameterized NN Hamiltonian generator with a square grid interaction topology:\nregister = Register.square(qubits_side = n_qubits)\ngenerator = hamiltonian_factory(\nregister,\ninteraction = Interaction.NN,\ninteraction_strength = \"theta\"\n)\n</code></pre> <pre><code>\n</code></pre> Source code in <code>qadence/constructors/hamiltonians.py</code> <pre><code>def hamiltonian_factory(\nregister: Register | int,\ninteraction: Interaction | None = None,\ndetuning: TDetuning | None = None,\ninteraction_strength: TArray | str | None = None,\ndetuning_strength: TArray | str | None = None,\nrandom_strength: bool = False,\nforce_update: bool = False,\nuse_complete_graph: bool = False,\n) -&gt; AbstractBlock:\n\"\"\"\n    General Hamiltonian creation function.\n    Can be used to create Hamiltonians with 2-qubit\n    interactions and single-qubit detunings, both with arbitrary strength or parameterized.\n    Arguments:\n        register: register of qubits with a specific graph topology, or number of qubits.\n            When passing a number of qubits a register with all-to-all connectivity\n            is created.\n        interaction: Interaction.ZZ, Interaction.NN, Interaction.XY, or Interacton.XYZ.\n        detuning: single-qubit operator N, X, Y, or Z.\n        interaction_strength: list of values to be used as the interaction strength for each\n            pair of qubits. Should be ordered following the order of `Register(n_qubits).edges`.\n            Alternatively, some string \"x\" can be passed, which will create a parameterized\n            interactions for each pair of qubits, each labelled as `\"x_ij\"`.\n        detuning_strength: list of values to be used as the detuning strength for each qubit.\n            Alternatively, some string \"x\" can be passed, which will create a parameterized\n            detuning for each qubit, each labelled as `\"x_i\"`.\n        random_strength: set random interaction and detuning strengths between -1 and 1.\n        force_update: force override register detuning and interaction strengths.\n        use_complete_graph: computes an interaction for every edge in a complete graph,\n            independent of the edges in the register. Useful for defining Hamiltonians\n            where the interaction strength decays with the distance.\n    Examples:\n        ```python exec=\"on\" source=\"material-block\" result=\"json\"\n        from qadence import hamiltonian_factory, Interaction, Register, Z\n        n_qubits = 3\n        # Constant total magnetization observable:\n        observable = hamiltonian_factory(n_qubits, detuning = Z)\n        # Parameterized total magnetization observable:\n        observable = hamiltonian_factory(n_qubits, detuning = Z, detuning_strength = \"z\")\n        # Random all-to-all XY Hamiltonian generator:\n        generator = hamiltonian_factory(\n            n_qubits,\n            interaction = Interaction.XY,\n            random_strength = True,\n            )\n        # Parameterized NN Hamiltonian generator with a square grid interaction topology:\n        register = Register.square(qubits_side = n_qubits)\n        generator = hamiltonian_factory(\n            register,\n            interaction = Interaction.NN,\n            interaction_strength = \"theta\"\n            )\n        ```\n    \"\"\"\nif interaction is None and detuning is None:\nraise ValueError(\"Please provide an interaction and/or detuning for the Hamiltonian.\")\n# If number of qubits is given, creates all-to-all register\nregister = Register(register) if isinstance(register, int) else register\n# Get interaction function\ntry:\nint_fn = INTERACTION_DICT[interaction]  # type: ignore [index]\nexcept (KeyError, ValueError) as error:\nif interaction is None:\npass\nelse:\nraise KeyError(f\"Interaction {interaction} not supported.\")\n# Check single-qubit detuning\nif (detuning is not None) and (detuning not in DETUNINGS):\nraise TypeError(f\"Detuning of type {type(detuning)} not supported.\")\n# Pre-process detuning and interaction strengths and update register\nhas_detuning_strength, detuning_strength = _preprocess_strengths(\nregister, detuning_strength, \"nodes\", force_update, random_strength\n)\nedge_str = \"all_edges\" if use_complete_graph else \"edges\"\nhas_interaction_strength, interaction_strength = _preprocess_strengths(\nregister, interaction_strength, edge_str, force_update, random_strength\n)\nif (not has_detuning_strength) or force_update:\nregister = _update_detuning_strength(register, detuning_strength)\nif (not has_interaction_strength) or force_update:\nregister = _update_interaction_strength(register, interaction_strength, use_complete_graph)\n# Create single-qubit detunings:\nsingle_qubit_terms: List[AbstractBlock] = []\nif detuning is not None:\nfor node in register.nodes:\nblock_sq = detuning(node)  # type: ignore [operator]\nstrength_sq = register.nodes[node][\"strength\"]\nsingle_qubit_terms.append(strength_sq * block_sq)\n# Create two-qubit interactions:\ntwo_qubit_terms: List[AbstractBlock] = []\nedge_data = register.all_edges if use_complete_graph else register.edges\nif interaction is not None:\nfor edge in edge_data:\nblock_tq = int_fn(*edge)  # type: ignore [operator]\nstrength_tq = edge_data[edge][\"strength\"]\ntwo_qubit_terms.append(strength_tq * block_tq)\nreturn add(*single_qubit_terms, *two_qubit_terms)\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.hamiltonians.interaction_nn","title":"<code>interaction_nn(i, j)</code>","text":"<p>Ising NN interaction.</p> Source code in <code>qadence/constructors/hamiltonians.py</code> <pre><code>def interaction_nn(i: int, j: int) -&gt; AbstractBlock:\n\"\"\"Ising NN interaction.\"\"\"\nreturn N(i) @ N(j)\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.hamiltonians.interaction_xy","title":"<code>interaction_xy(i, j)</code>","text":"<p>XY interaction.</p> Source code in <code>qadence/constructors/hamiltonians.py</code> <pre><code>def interaction_xy(i: int, j: int) -&gt; AbstractBlock:\n\"\"\"XY interaction.\"\"\"\nreturn X(i) @ X(j) + Y(i) @ Y(j)\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.hamiltonians.interaction_xyz","title":"<code>interaction_xyz(i, j)</code>","text":"<p>Heisenberg XYZ interaction.</p> Source code in <code>qadence/constructors/hamiltonians.py</code> <pre><code>def interaction_xyz(i: int, j: int) -&gt; AbstractBlock:\n\"\"\"Heisenberg XYZ interaction.\"\"\"\nreturn X(i) @ X(j) + Y(i) @ Y(j) + Z(i) @ Z(j)\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.hamiltonians.interaction_zz","title":"<code>interaction_zz(i, j)</code>","text":"<p>Ising ZZ interaction.</p> Source code in <code>qadence/constructors/hamiltonians.py</code> <pre><code>def interaction_zz(i: int, j: int) -&gt; AbstractBlock:\n\"\"\"Ising ZZ interaction.\"\"\"\nreturn Z(i) @ Z(j)\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.qft.qft","title":"<code>qft(n_qubits, support=None, inverse=False, reverse_in=False, swaps_out=False, strategy=Strategy.DIGITAL, gen_build=None)</code>","text":"<p>The Quantum Fourier Transform.</p> <p>Depending on the application, user should be careful with qubit ordering in the input and output. This can be controlled with reverse_in and swaps_out arguments.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>number of qubits in the QFT</p> <p> TYPE: <code>int</code> </p> <code>support</code> <p>qubit support to use</p> <p> TYPE: <code>tuple[int, ...]</code> DEFAULT: <code>None</code> </p> <code>inverse</code> <p>True performs the inverse QFT</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>reverse_in</code> <p>Reverses the input qubits to account for endianness</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>swaps_out</code> <p>Performs swaps on the output qubits to match the \"textbook\" QFT.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>strategy</code> <p>Strategy.Digital or Strategy.sDAQC</p> <p> TYPE: <code>Strategy</code> DEFAULT: <code>DIGITAL</code> </p> <code>gen_build</code> <p>building block Ising Hamiltonian for the DAQC transform. Defaults to constant all-to-all Ising.</p> <p> TYPE: <code>AbstractBlock | None</code> DEFAULT: <code>None</code> </p> <p>Examples:</p> <pre><code>from qadence import qft\nn_qubits = 3\nqft_circuit = qft(n_qubits, strategy = \"sDAQC\")\n</code></pre> <pre><code>\n</code></pre> Source code in <code>qadence/constructors/qft.py</code> <pre><code>def qft(\nn_qubits: int,\nsupport: tuple[int, ...] = None,\ninverse: bool = False,\nreverse_in: bool = False,\nswaps_out: bool = False,\nstrategy: Strategy = Strategy.DIGITAL,\ngen_build: AbstractBlock | None = None,\n) -&gt; AbstractBlock:\n\"\"\"\n    The Quantum Fourier Transform.\n    Depending on the application, user should be careful with qubit ordering\n    in the input and output. This can be controlled with reverse_in and swaps_out\n    arguments.\n    Args:\n        n_qubits: number of qubits in the QFT\n        support: qubit support to use\n        inverse: True performs the inverse QFT\n        reverse_in: Reverses the input qubits to account for endianness\n        swaps_out: Performs swaps on the output qubits to match the \"textbook\" QFT.\n        strategy: Strategy.Digital or Strategy.sDAQC\n        gen_build: building block Ising Hamiltonian for the DAQC transform.\n            Defaults to constant all-to-all Ising.\n    Examples:\n        ```python exec=\"on\" source=\"material-block\" result=\"json\"\n        from qadence import qft\n        n_qubits = 3\n        qft_circuit = qft(n_qubits, strategy = \"sDAQC\")\n        ```\n    \"\"\"\nif support is None:\nsupport = tuple(range(n_qubits))\nassert len(support) &lt;= n_qubits, \"Wrong qubit support supplied\"\nif reverse_in:\nsupport = support[::-1]\nqft_layer_dict = {\nStrategy.DIGITAL: _qft_layer_digital,\nStrategy.SDAQC: _qft_layer_sDAQC,\nStrategy.BDAQC: _qft_layer_bDAQC,\nStrategy.ANALOG: _qft_layer_analog,\n}\ntry:\nlayer_func = qft_layer_dict[strategy]\nexcept KeyError:\nraise KeyError(f\"Strategy {strategy} not recognized.\")\nqft_layers = reversed(range(n_qubits)) if inverse else range(n_qubits)\nqft_circ = chain(\nlayer_func(\nn_qubits=n_qubits, support=support, layer=layer, inverse=inverse, gen_build=gen_build\n)  # type: ignore\nfor layer in qft_layers\n)\nif swaps_out:\nswap_ops = [SWAP(support[i], support[n_qubits - i - 1]) for i in range(n_qubits // 2)]\nqft_circ = chain(*swap_ops, qft_circ) if inverse else chain(qft_circ, *swap_ops)\nreturn tag(qft_circ, tag=\"iQFT\") if inverse else tag(qft_circ, tag=\"QFT\")\n</code></pre>"},{"location":"qadence/constructors/#hardware-efficient-ansatz-for-rydberg-atom-arrays","title":"Hardware efficient ansatz for Rydberg atom arrays","text":""},{"location":"qadence/constructors/#qadence.constructors.rydberg_hea.rydberg_hea","title":"<code>rydberg_hea(register, n_layers=1, addressable_detuning=True, addressable_drive=False, tunable_phase=False, additional_prefix=None)</code>","text":"<p>Hardware efficient ansatz for neutral atom (Rydberg) platforms.</p> <p>This constructor implements a variational ansatz which is very close to what is implementable on 2nd generation PASQAL quantum devices. In particular, it implements evolution over a specific Hamiltonian which can be realized on the device. This Hamiltonian contains:</p> <ul> <li> <p>an interaction term given by the standard NN interaction and determined starting     from the positions in the input register: H\u1d62\u2099\u209c = \u2211\u1d62\u2c7c C\u2086/r\u1d62\u2c7c\u2076 n\u1d62n\u2c7c</p> </li> <li> <p>a detuning term which corresponding to a n_i = (1+sigma_i^z)/2 applied to     all the qubits. If the <code>addressable_detuning</code> flag is set to True, the routine     effectively a local n_i = (1+sigma_i^z)/2 term in the     evolved Hamiltonian with a different coefficient for each atom. These     coefficients determine a local addressing pattern for the detuning on a subset     of the qubits. In this routine, the coefficients are variational parameters     and they will therefore be optimized at each optimizer step</p> </li> <li> <p>a drive term which corresponding to a sigma^x evolution operation applied to     all the qubits. If the <code>addressable_drive</code> flag is set to True, the routine     effectively a local sigma_i^x term in the evolved Hamiltonian with a different     coefficient for each atom. These coefficients determine a local addressing pattern     for the drive on a subset of the qubits. In this routine, the coefficients are     variational parameters and they will therefore be optimized at each optimizer step</p> </li> <li> <p>if the <code>tunable_phase</code> flag is set to True, the drive term is modified in the following     way: drive = cos(phi) * sigma^x - sin(phi) * sigma^y     The addressable pattern above is maintained and the phase is considered just as an     additional variational parameter which is optimized with the rest</p> </li> </ul> <p>Notice that, on real devices, the coefficients assigned to each qubit in both the detuning and drive patterns should be non-negative and they should always sum to 1. This is not the case for the implementation in this routine since the coefficients (weights) do not have any constraint. Therefore, this HEA is not completely realizable on neutral atom devices.</p> PARAMETER  DESCRIPTION <code>register</code> <p>the input atomic register with Cartesian coordinates.</p> <p> TYPE: <code>Register</code> </p> <code>n_layers</code> <p>number layers in the HEA, each layer includes a drive, detuning and pure interaction pulses whose is a variational parameter</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>addressable_detuning</code> <p>whether to turn on the trainable semi-local addressing pattern on the detuning (n_i terms in the Hamiltonian)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>addressable_drive</code> <p>whether to turn on the trainable semi-local addressing pattern on the drive (sigma_i^x terms in the Hamiltonian)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tunable_phase</code> <p>whether to have a tunable phase to get both sigma^x and sigma^y rotations in the drive term. If False, only a sigma^x term will be included in the drive part of the Hamiltonian generator</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>additional_prefix</code> <p>an additional prefix to attach to the parameter names</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>ChainBlock</code> <p>The Rydberg HEA block</p> Source code in <code>qadence/constructors/rydberg_hea.py</code> <pre><code>def rydberg_hea(\nregister: qd.Register,\nn_layers: int = 1,\naddressable_detuning: bool = True,\naddressable_drive: bool = False,\ntunable_phase: bool = False,\nadditional_prefix: str = None,\n) -&gt; qd.blocks.ChainBlock:\n\"\"\"Hardware efficient ansatz for neutral atom (Rydberg) platforms.\n    This constructor implements a variational ansatz which is very close to\n    what is implementable on 2nd generation PASQAL quantum devices. In particular,\n    it implements evolution over a specific Hamiltonian which can be realized on\n    the device. This Hamiltonian contains:\n    * an interaction term given by the standard NN interaction and determined starting\n        from the positions in the input register: H\u1d62\u2099\u209c = \u2211\u1d62\u2c7c C\u2086/r\u1d62\u2c7c\u2076 n\u1d62n\u2c7c\n    * a detuning term which corresponding to a n_i = (1+sigma_i^z)/2 applied to\n        all the qubits. If the `addressable_detuning` flag is set to True, the routine\n        effectively a local n_i = (1+sigma_i^z)/2 term in the\n        evolved Hamiltonian with a different coefficient for each atom. These\n        coefficients determine a local addressing pattern for the detuning on a subset\n        of the qubits. In this routine, the coefficients are variational parameters\n        and they will therefore be optimized at each optimizer step\n    * a drive term which corresponding to a sigma^x evolution operation applied to\n        all the qubits. If the `addressable_drive` flag is set to True, the routine\n        effectively a local sigma_i^x term in the evolved Hamiltonian with a different\n        coefficient for each atom. These coefficients determine a local addressing pattern\n        for the drive on a subset of the qubits. In this routine, the coefficients are\n        variational parameters and they will therefore be optimized at each optimizer step\n    * if the `tunable_phase` flag is set to True, the drive term is modified in the following\n        way: drive = cos(phi) * sigma^x - sin(phi) * sigma^y\n        The addressable pattern above is maintained and the phase is considered just as an\n        additional variational parameter which is optimized with the rest\n    Notice that, on real devices, the coefficients assigned to each qubit in both the detuning\n    and drive patterns should be non-negative and they should always sum to 1. This is not the\n    case for the implementation in this routine since the coefficients (weights) do not have any\n    constraint. Therefore, this HEA is not completely realizable on neutral atom devices.\n    Args:\n        register: the input atomic register with Cartesian coordinates.\n        n_layers: number layers in the HEA, each layer includes a drive, detuning and\n            pure interaction pulses whose is a variational parameter\n        addressable_detuning: whether to turn on the trainable semi-local addressing pattern\n            on the detuning (n_i terms in the Hamiltonian)\n        addressable_drive: whether to turn on the trainable semi-local addressing pattern\n            on the drive (sigma_i^x terms in the Hamiltonian)\n        tunable_phase: whether to have a tunable phase to get both sigma^x and sigma^y rotations\n            in the drive term. If False, only a sigma^x term will be included in the drive part\n            of the Hamiltonian generator\n        additional_prefix: an additional prefix to attach to the parameter names\n    Returns:\n        The Rydberg HEA block\n    \"\"\"\nn_qubits = register.n_qubits\nprefix = \"\" if additional_prefix is None else \"_\" + additional_prefix\ndetunings = None\n# add a detuning pattern locally addressing the atoms\nif addressable_detuning:\ndetunings = [qd.VariationalParameter(f\"detmap_{j}\") for j in range(n_qubits)]\ndrives = None\n# add a drive pattern locally addressing the atoms\nif addressable_drive:\ndrives = [qd.VariationalParameter(f\"drivemap_{j}\") for j in range(n_qubits)]\nphase = None\nif tunable_phase:\nphase = qd.VariationalParameter(\"phase\")\nreturn chain(\nrydberg_hea_layer(\nregister,\nVariationalParameter(f\"At{prefix}_{layer}\"),\nVariationalParameter(f\"Omega{prefix}_{layer}\"),\nVariationalParameter(f\"wait{prefix}_{layer}\"),\ndetunings=detunings,\ndrives=drives,\nphase=phase,\n)\nfor layer in range(n_layers)\n)\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.rydberg_hea.rydberg_hea_layer","title":"<code>rydberg_hea_layer(register, tevo_drive, tevo_det, tevo_wait, phase=None, detunings=None, drives=None, drive_scaling=1.0)</code>","text":"<p>A single layer of the Rydberg hardware efficient ansatz.</p> PARAMETER  DESCRIPTION <code>register</code> <p>the input register with atomic coordinates needed to build the interaction.</p> <p> TYPE: <code>Register</code> </p> <code>tevo_drive</code> <p>a variational parameter for the duration of the drive term of the Hamiltonian generator, including optional semi-local addressing</p> <p> TYPE: <code>Parameter | float</code> </p> <code>tevo_det</code> <p>a variational parameter for the duration of the detuning term of the Hamiltonian generator, including optional semi-local addressing</p> <p> TYPE: <code>Parameter | float</code> </p> <code>tevo_wait</code> <p>a variational parameter for the duration of the waiting time with interaction only</p> <p> TYPE: <code>Parameter | float</code> </p> <code>phase</code> <p>a variational parameter representing the global phase. If None, the global phase is set to 0 which results in a drive term in sigma^x only. Otherwise both sigma^x and sigma^y terms will be present</p> <p> TYPE: <code>Parameter | float | None</code> DEFAULT: <code>None</code> </p> <code>detunings</code> <p>a list of parameters with the weights of the locally addressed detuning terms. These are variational parameters which are tuned by the optimizer</p> <p> TYPE: <code>list[Parameter] | list[float] | None</code> DEFAULT: <code>None</code> </p> <code>drives</code> <p>a list of parameters with the weights of the locally addressed drive terms. These are variational parameters which are tuned by the optimizer</p> <p> TYPE: <code>list[Parameter] | list[float] | None</code> DEFAULT: <code>None</code> </p> <code>drive_scaling</code> <p>a scaling term to be added to the drive Hamiltonian generator</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> RETURNS DESCRIPTION <code>ChainBlock</code> <p>A block with a single layer of Rydberg HEA</p> Source code in <code>qadence/constructors/rydberg_hea.py</code> <pre><code>def rydberg_hea_layer(\nregister: qd.Register,\ntevo_drive: Parameter | float,\ntevo_det: Parameter | float,\ntevo_wait: Parameter | float,\nphase: Parameter | float | None = None,\ndetunings: list[Parameter] | list[float] | None = None,\ndrives: list[Parameter] | list[float] | None = None,\ndrive_scaling: float = 1.0,\n) -&gt; ChainBlock:\n\"\"\"A single layer of the Rydberg hardware efficient ansatz.\n    Args:\n        register: the input register with atomic coordinates needed to build the interaction.\n        tevo_drive: a variational parameter for the duration of the drive term of\n            the Hamiltonian generator, including optional semi-local addressing\n        tevo_det: a variational parameter for the duration of the detuning term of the\n            Hamiltonian generator, including optional semi-local addressing\n        tevo_wait: a variational parameter for the duration of the waiting\n            time with interaction only\n        phase: a variational parameter representing the global phase. If None, the\n            global phase is set to 0 which results in a drive term in sigma^x only. Otherwise\n            both sigma^x and sigma^y terms will be present\n        detunings: a list of parameters with the weights of the locally addressed\n            detuning terms. These are variational parameters which are tuned by the optimizer\n        drives: a list of parameters with the weights of the locally addressed\n            drive terms. These are variational parameters which are tuned by the optimizer\n        drive_scaling: a scaling term to be added to the drive Hamiltonian generator\n    Returns:\n        A block with a single layer of Rydberg HEA\n    \"\"\"\nn_qubits = register.n_qubits\ndrive_x = _amplitude_map(n_qubits, qd.X, weights=drives)\ndrive_y = _amplitude_map(n_qubits, qd.Y, weights=drives)\ndetuning = _amplitude_map(n_qubits, qd.N, weights=detunings)\ninteraction = hamiltonian_factory(register, qd.Interaction.NN)\n# drive and interaction are not commuting thus they need to be\n# added directly into the final Hamiltonian generator\nif phase is not None:\ngenerator = (\ndrive_scaling * sympy.cos(phase) * drive_x\n- drive_scaling * sympy.sin(phase) * drive_y\n+ interaction\n)\nelse:\ngenerator = drive_scaling * drive_x + interaction\nreturn chain(\nqd.HamEvo(generator, tevo_drive),\n# detuning and interaction are commuting, so they\n# can be ordered arbitrarily and treated separately\nqd.HamEvo(interaction, tevo_wait),\nqd.HamEvo(detuning, tevo_det),\n)\n</code></pre>"},{"location":"qadence/constructors/#the-daqc-transform","title":"The DAQC Transform","text":""},{"location":"qadence/constructors/#qadence.constructors.daqc.daqc.daqc_transform","title":"<code>daqc_transform(n_qubits, gen_target, t_f, gen_build=None, zero_tol=1e-08, strategy=Strategy.SDAQC, ignore_global_phases=False)</code>","text":"<p>Implements the DAQC transform for representing an arbitrary 2-body Hamiltonian.</p> <p>The result is another fixed 2-body Hamiltonian.</p> <p>Reference for universality of 2-body Hamiltonians:</p> <p>-- https://arxiv.org/abs/quant-ph/0106064</p> <p>Based on the transformation for Ising (ZZ) interactions, as described in the paper</p> <p>-- https://arxiv.org/abs/1812.03637</p> <p>The transform translates a target weighted generator of the type:</p> <pre><code>`gen_target = add(g_jk * kron(op(j), op(k)) for j &lt; k)`\n</code></pre> <p>To a circuit using analog evolutions with a fixed building block generator:</p> <pre><code>`gen_build = add(f_jk * kron(op(j), op(k)) for j &lt; k)`\n</code></pre> <p>where <code>op = Z</code> or <code>op = N</code>.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>total number of qubits to use.</p> <p> TYPE: <code>int</code> </p> <code>gen_target</code> <p>target generator built with the structure above. The type of the generator will be automatically evaluated when parsing.</p> <p> TYPE: <code>AbstractBlock</code> </p> <code>t_f</code> <p>total time for the gen_target evolution.</p> <p> TYPE: <code>float</code> </p> <code>gen_build</code> <p>fixed generator to act as a building block. Defaults to constant NN: add(1.0 * kron(N(j), N(k)) for j &lt; k). The type of the generator will be automatically evaluated when parsing.</p> <p> TYPE: <code>AbstractBlock | None</code> DEFAULT: <code>None</code> </p> <code>zero_tol</code> <p>default \"zero\" for a missing interaction. Included for numerical reasons, see notes below.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1e-08</code> </p> <code>strategy</code> <p>sDAQC or bDAQC, following definitions in the reference paper.</p> <p> TYPE: <code>Strategy</code> DEFAULT: <code>SDAQC</code> </p> <code>ignore_global_phases</code> <p>if <code>True</code> the transform does not correct the global phases coming from the mapping between ZZ and NN interactions.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <p>Notes:</p> <pre><code>The paper follows an index convention of running from 1 to N. A few functions\nhere also use that convention to be consistent with the paper. However, for qadence\nrelated things the indices are converted to [0, N-1].\n\nThe case for `n_qubits = 4` is an edge case where the sign matrix is not invertible.\nThere is a workaround for this described in the paper, but it is currently not implemented.\n\nThe current implementation may result in evolution times that are both positive or\nnegative. In practice, both can be represented by simply changing the signs of the\ninteractions. However, for a real implementation where the interactions should remain\nfixed, the paper discusses a workaround that is not currently implemented.\n\nThe transformation works by representing each interaction in the target hamiltonian by\na set of evolutions using the build hamiltonian. As a consequence, some care must be\ntaken when choosing the build hamiltonian. Some cases:\n\n- The target hamiltonian can have any interaction, as long as it is sufficiently\nrepresented in the build hamiltonian. E.g., if the interaction `g_01 * kron(Z(0), Z(1))`\nis in the target hamiltonian, the corresponding interaction `f_01 * kron(Z(0), Z(1))`\nneeds to be in the build hamiltonian. This is checked when the generators are parsed.\n\n- The build hamiltonian can have any interaction, irrespectively of it being needed\nfor the target hamiltonian. This is especially useful for designing local operations\nthrough the repeated evolution of a \"global\" hamiltonian.\n\n- The parameter `zero_tol` controls what it means for an interaction to be \"missing\".\nAny interaction strength smaller than `zero_tol` in the build hamiltonian will not be\nconsidered, and thus that interaction is missing.\n\n- The various ratios `g_jk / f_jk` will influence the time parameter for the various\nevolution slices, meaning that if there is a big discrepancy in the interaction strength\nfor a given qubit pair (j, k), the output circuit may require the usage of hamiltonian\nevolutions with very large times.\n\n- A warning will be issued for evolution times larger than `1/sqrt(zero_tol)`. Evolution\ntimes smaller than `zero_tol` will not be represented.\n</code></pre> <p>Examples:</p> <pre><code>from qadence import Z, N, daqc_transform\nn_qubits = 3\ngen_build = 0.5 * (N(0)@N(1)) + 0.7 * (N(1)@N(2)) + 0.2 * (N(0)@N(2))\ngen_target = 0.1 * (Z(1)@Z(2))\nt_f = 2.0\ntransformed_circuit = daqc_transform(\nn_qubits = n_qubits,\ngen_target = gen_target,\nt_f = t_f,\ngen_build = gen_build,\n)\n</code></pre> <pre><code>\n</code></pre> Source code in <code>qadence/constructors/daqc/daqc.py</code> <pre><code>def daqc_transform(\nn_qubits: int,\ngen_target: AbstractBlock,\nt_f: float,\ngen_build: AbstractBlock | None = None,\nzero_tol: float = 1e-08,\nstrategy: Strategy = Strategy.SDAQC,\nignore_global_phases: bool = False,\n) -&gt; AbstractBlock:\n\"\"\"\n    Implements the DAQC transform for representing an arbitrary 2-body Hamiltonian.\n    The result is another fixed 2-body Hamiltonian.\n    Reference for universality of 2-body Hamiltonians:\n    -- https://arxiv.org/abs/quant-ph/0106064\n    Based on the transformation for Ising (ZZ) interactions, as described in the paper\n    -- https://arxiv.org/abs/1812.03637\n    The transform translates a target weighted generator of the type:\n        `gen_target = add(g_jk * kron(op(j), op(k)) for j &lt; k)`\n    To a circuit using analog evolutions with a fixed building block generator:\n        `gen_build = add(f_jk * kron(op(j), op(k)) for j &lt; k)`\n    where `op = Z` or `op = N`.\n    Args:\n        n_qubits: total number of qubits to use.\n        gen_target: target generator built with the structure above. The type\n            of the generator will be automatically evaluated when parsing.\n        t_f (float): total time for the gen_target evolution.\n        gen_build: fixed generator to act as a building block. Defaults to\n            constant NN: add(1.0 * kron(N(j), N(k)) for j &lt; k). The type\n            of the generator will be automatically evaluated when parsing.\n        zero_tol: default \"zero\" for a missing interaction. Included for\n            numerical reasons, see notes below.\n        strategy: sDAQC or bDAQC, following definitions in the reference paper.\n        ignore_global_phases: if `True` the transform does not correct the global\n            phases coming from the mapping between ZZ and NN interactions.\n    Notes:\n        The paper follows an index convention of running from 1 to N. A few functions\n        here also use that convention to be consistent with the paper. However, for qadence\n        related things the indices are converted to [0, N-1].\n        The case for `n_qubits = 4` is an edge case where the sign matrix is not invertible.\n        There is a workaround for this described in the paper, but it is currently not implemented.\n        The current implementation may result in evolution times that are both positive or\n        negative. In practice, both can be represented by simply changing the signs of the\n        interactions. However, for a real implementation where the interactions should remain\n        fixed, the paper discusses a workaround that is not currently implemented.\n        The transformation works by representing each interaction in the target hamiltonian by\n        a set of evolutions using the build hamiltonian. As a consequence, some care must be\n        taken when choosing the build hamiltonian. Some cases:\n        - The target hamiltonian can have any interaction, as long as it is sufficiently\n        represented in the build hamiltonian. E.g., if the interaction `g_01 * kron(Z(0), Z(1))`\n        is in the target hamiltonian, the corresponding interaction `f_01 * kron(Z(0), Z(1))`\n        needs to be in the build hamiltonian. This is checked when the generators are parsed.\n        - The build hamiltonian can have any interaction, irrespectively of it being needed\n        for the target hamiltonian. This is especially useful for designing local operations\n        through the repeated evolution of a \"global\" hamiltonian.\n        - The parameter `zero_tol` controls what it means for an interaction to be \"missing\".\n        Any interaction strength smaller than `zero_tol` in the build hamiltonian will not be\n        considered, and thus that interaction is missing.\n        - The various ratios `g_jk / f_jk` will influence the time parameter for the various\n        evolution slices, meaning that if there is a big discrepancy in the interaction strength\n        for a given qubit pair (j, k), the output circuit may require the usage of hamiltonian\n        evolutions with very large times.\n        - A warning will be issued for evolution times larger than `1/sqrt(zero_tol)`. Evolution\n        times smaller than `zero_tol` will not be represented.\n    Examples:\n        ```python exec=\"on\" source=\"material-block\" result=\"json\"\n        from qadence import Z, N, daqc_transform\n        n_qubits = 3\n        gen_build = 0.5 * (N(0)@N(1)) + 0.7 * (N(1)@N(2)) + 0.2 * (N(0)@N(2))\n        gen_target = 0.1 * (Z(1)@Z(2))\n        t_f = 2.0\n        transformed_circuit = daqc_transform(\n            n_qubits = n_qubits,\n            gen_target = gen_target,\n            t_f = t_f,\n            gen_build = gen_build,\n        )\n        ```\n    \"\"\"\n##################\n# Input controls #\n##################\nif strategy != Strategy.SDAQC:\nraise NotImplementedError(\"Currently only the sDAQC transform is implemented.\")\nif n_qubits == 4:\nraise NotImplementedError(\"DAQC transform 4-qubit edge case not implemented.\")\nif gen_build is None:\ngen_build = hamiltonian_factory(n_qubits, interaction=Interaction.NN)\ntry:\nif (not block_is_qubit_hamiltonian(gen_target)) or (\nnot block_is_qubit_hamiltonian(gen_build)\n):\nraise ValueError(\n\"Generator block is not a qubit Hamiltonian. Only ZZ or NN interactions allowed.\"\n)\nexcept NotImplementedError:\n# Happens when block_is_qubit_hamiltonian is called on something that is not a block.\nraise TypeError(\n\"Generator block is not a qubit Hamiltonian. Only ZZ or NN interactions allowed.\"\n)\n#####################\n# Generator parsing #\n#####################\ng_jk_target, mat_jk_target, target_type = _parse_generator(n_qubits, gen_target, 0.0)\ng_jk_build, mat_jk_build, build_type = _parse_generator(n_qubits, gen_build, zero_tol)\n# Get the global phase hamiltonian and single-qubit detuning hamiltonian\nif build_type == GenDAQC.NN:\nh_phase_build, h_sq_build = _nn_phase_and_detunings(n_qubits, mat_jk_build)\nif target_type == GenDAQC.NN:\nh_phase_target, h_sq_target = _nn_phase_and_detunings(n_qubits, mat_jk_target)\n# Time re-scalings\nif build_type == GenDAQC.ZZ and target_type == GenDAQC.NN:\nt_star = t_f / 4.0\nelif build_type == GenDAQC.NN and target_type == GenDAQC.ZZ:\nt_star = 4.0 * t_f\nelse:\nt_star = t_f\n# Check if target Hamiltonian can be mapped with the build Hamiltonian\nassert _check_compatibility(g_jk_target, g_jk_build, zero_tol)\n##################\n# DAQC Transform #\n##################\n# Section III A of https://arxiv.org/abs/1812.03637:\n# Matrix M for the linear system, exemplified in Table I:\nmatrix_M = _build_matrix_M(n_qubits)\n# Linear system mapping interaction ratios -&gt; evolution times.\nt_slices = torch.linalg.solve(matrix_M, g_jk_target / g_jk_build) * t_star\n# ZZ-DAQC with ZZ or NN build Hamiltonian\ndaqc_slices = []\nfor m in range(2, n_qubits + 1):\nfor n in range(1, m):\nalpha = _ix_map(n_qubits, n, m)\nt = t_slices[alpha - 1]\nif abs(t) &gt; zero_tol:\nif abs(t) &gt; (1 / (zero_tol**0.5)):\nlogger.warning(\n\"\"\"\nTransformed circuit with very long evolution time.\nMake sure your target interactions are sufficiently\nrepresented in the build Hamiltonian.\"\"\"\n)\nx_gates = kron(X(n - 1), X(m - 1))\nanalog_evo = HamEvo(gen_build, t)\n# TODO: Fix repeated X-gates\nif build_type == GenDAQC.NN:\n# Local detuning at each DAQC layer for NN build Hamiltonian\nsq_detuning_build = HamEvo(h_sq_build, t)\ndaqc_slices.append(chain(x_gates, sq_detuning_build, analog_evo, x_gates))\nelif build_type == GenDAQC.ZZ:\ndaqc_slices.append(chain(x_gates, analog_evo, x_gates))\ndaqc_circuit = chain(*daqc_slices)\n########################\n# Phases and Detunings #\n########################\nif target_type == GenDAQC.NN:\n# Local detuning given a NN target Hamiltonian\nsq_detuning_target = HamEvo(h_sq_target, t_f).dagger()\ndaqc_circuit = chain(sq_detuning_target, daqc_circuit)\nif not ignore_global_phases:\nif build_type == GenDAQC.NN:\n# Constant global phase given a NN build Hamiltonian\nglobal_phase_build = HamEvo(h_phase_build, t_slices.sum())\ndaqc_circuit = chain(global_phase_build, daqc_circuit)\nif target_type == GenDAQC.NN:\n# Constant global phase and given a NN target Hamiltonian\nglobal_phase_target = HamEvo(h_phase_target, t_f).dagger()\ndaqc_circuit = chain(global_phase_target, daqc_circuit)\nreturn daqc_circuit\n</code></pre>"},{"location":"qadence/constructors/#some-utility-functions","title":"Some utility functions","text":""},{"location":"qadence/constructors/#qadence.constructors.utils.build_idx_fms","title":"<code>build_idx_fms(basis, fm_pauli, fm_strategy, n_features, n_qubits, spectrum)</code>","text":"<p>Builds the index feature maps based on the given parameters.</p> PARAMETER  DESCRIPTION <code>basis</code> <p>Type of basis chosen for the feature map.</p> <p> TYPE: <code>str</code> </p> <code>fm_pauli</code> <p>The chosen Pauli rotation type.</p> <p> TYPE: <code>PrimitiveBlock type</code> </p> <code>fm_strategy</code> <p>The feature map strategy to be used. Possible values are 'parallel' or 'serial'.</p> <p> TYPE: <code>str</code> </p> <code>n_features</code> <p>The number of features.</p> <p> TYPE: <code>int</code> </p> <code>n_qubits</code> <p>The number of qubits.</p> <p> TYPE: <code>int</code> </p> <code>spectrum</code> <p>The chosen spectrum.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>list[KronBlock]</code> <p>List[KronBlock]: The list of index feature maps.</p> Source code in <code>qadence/constructors/utils.py</code> <pre><code>def build_idx_fms(\nbasis: str,\nfm_pauli: Type[RY],\nfm_strategy: str,\nn_features: int,\nn_qubits: int,\nspectrum: str,\n) -&gt; list[KronBlock]:\n\"\"\"Builds the index feature maps based on the given parameters.\n    Args:\n        basis (str): Type of basis chosen for the feature map.\n        fm_pauli (PrimitiveBlock type): The chosen Pauli rotation type.\n        fm_strategy (str): The feature map strategy to be used. Possible values are\n            'parallel' or 'serial'.\n        n_features (int): The number of features.\n        n_qubits (int): The number of qubits.\n        spectrum (str): The chosen spectrum.\n    Returns:\n        List[KronBlock]: The list of index feature maps.\n    \"\"\"\nidx_fms = []\nfor i in range(n_features):\ntarget_qubits = get_fm_qubits(fm_strategy, i, n_qubits, n_features)\nparam = FeatureParameter(f\"x{i}\")\nblock = kron(\n*[\nfm_pauli(qubit, generator_prefactor(spectrum, j) * basis_func(basis, param))\nfor j, qubit in enumerate(target_qubits)\n]\n)\nidx_fm = block\nidx_fms.append(idx_fm)\nreturn idx_fms\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.utils.generator_prefactor","title":"<code>generator_prefactor(spectrum, qubit_index)</code>","text":"<p>Converts a spectrum string, e.g. tower or exponential.</p> <p>The result is the correct generator prefactor.</p> Source code in <code>qadence/constructors/utils.py</code> <pre><code>def generator_prefactor(spectrum: str, qubit_index: int) -&gt; float | int:\n\"\"\"Converts a spectrum string, e.g. tower or exponential.\n    The result is the correct generator prefactor.\n    \"\"\"\nspectrum = spectrum.lower()\nconversion_dict: dict[str, float | int] = {\n\"simple\": 1,\n\"tower\": qubit_index + 1,\n\"exponential\": 2 * np.pi / (2 ** (qubit_index + 1)),\n}\nreturn conversion_dict[spectrum]\n</code></pre>"},{"location":"qadence/constructors/#qadence.constructors.utils.get_fm_qubits","title":"<code>get_fm_qubits(fm_strategy, i, n_qubits, n_features)</code>","text":"<p>Returns the list of target qubits for the given feature map strategy and feature index.</p> PARAMETER  DESCRIPTION <code>fm_strategy</code> <p>The feature map strategy to be used. Possible values are 'parallel' or 'serial'.</p> <p> TYPE: <code>str</code> </p> <code>i</code> <p>The feature index.</p> <p> TYPE: <code>int</code> </p> <code>n_qubits</code> <p>The number of qubits.</p> <p> TYPE: <code>int</code> </p> <code>n_features</code> <p>The number of features.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>Iterable</code> <p>List[int]: The list of target qubits.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If the feature map strategy is not implemented.</p> Source code in <code>qadence/constructors/utils.py</code> <pre><code>def get_fm_qubits(fm_strategy: str, i: int, n_qubits: int, n_features: int) -&gt; Iterable:\n\"\"\"Returns the list of target qubits for the given feature map strategy and feature index.\n    Args:\n        fm_strategy (str): The feature map strategy to be used. Possible values\n            are 'parallel' or 'serial'.\n        i (int): The feature index.\n        n_qubits (int): The number of qubits.\n        n_features (int): The number of features.\n    Returns:\n        List[int]: The list of target qubits.\n    Raises:\n        ValueError: If the feature map strategy is not implemented.\n    \"\"\"\nif fm_strategy == \"parallel\":\nn_qubits_per_feature = int(n_qubits / n_features)\ntarget_qubits = range(i * n_qubits_per_feature, (i + 1) * n_qubits_per_feature)\nelif fm_strategy == \"serial\":\ntarget_qubits = range(0, n_qubits)\nelse:\nraise ValueError(f\"Feature map strategy {fm_strategy} not implemented.\")\nreturn target_qubits\n</code></pre>"},{"location":"qadence/draw/","title":"Drawing","text":""},{"location":"qadence/draw/#drawing","title":"Drawing","text":""},{"location":"qadence/draw/#qadence.draw.display","title":"<code>display(x, qcd=None, layout='LR', theme='light', fill=True, **kwargs)</code>","text":"<p>Display a block, circuit, or quantum model.</p> <p>The <code>kwargs</code> are forwarded to the underlying <code>nx.Graph</code>, so you can e.g. specify the size of the resulting plot via <code>size=\"2,2\"</code> (see examples)</p> PARAMETER  DESCRIPTION <code>x</code> <p><code>AbstractBlock</code>, <code>QuantumCircuit</code>, or <code>QuantumModel</code>.</p> <p> TYPE: <code>Any</code> </p> <code>qcd</code> <p>Circuit diagram to plot the block into.</p> <p> TYPE: <code>QuantumCircuitDiagram | Cluster | None</code> DEFAULT: <code>None</code> </p> <code>layout</code> <p>Can be either \"LR\" (left-right), or \"TB\" (top-bottom).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'LR'</code> </p> <code>theme</code> <p>Available themes are: [\"light\", \"dark\", \"black\", \"white\"].</p> <p> TYPE: <code>str</code> DEFAULT: <code>'light'</code> </p> <code>fill</code> <p>Whether to fill the passed <code>x</code> with identities.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>kwargs</code> <p>Passed on to <code>nx.Graph</code></p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> <p>Examples: <pre><code>from qadence import X, Y, kron\nfrom qadence.draw import display\nb = kron(X(0), Y(1))\ndisplay(b, size=\"1,1\", theme=\"dark\")\n</code></pre> </p> Source code in <code>qadence/draw/__init__.py</code> <pre><code>def display(\nx: Any,\nqcd: QuantumCircuitDiagram | Cluster | None = None,\nlayout: str = \"LR\",\ntheme: str = \"light\",\nfill: bool = True,\n**kwargs: Any,\n) -&gt; Graph:\n\"\"\"Display a block, circuit, or quantum model.\n    The `kwargs` are forwarded to\n    the underlying `nx.Graph`, so you can e.g. specify the size of the resulting plot via\n    `size=\"2,2\"` (see examples)\n    Arguments:\n        x: `AbstractBlock`, `QuantumCircuit`, or `QuantumModel`.\n        qcd: Circuit diagram to plot the block into.\n        layout: Can be either \"LR\" (left-right), or \"TB\" (top-bottom).\n        theme: Available themes are: [\"light\", \"dark\", \"black\", \"white\"].\n        fill: Whether to fill the passed `x` with identities.\n        kwargs: Passed on to `nx.Graph`\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" html=\"1\"\n    from qadence import X, Y, kron\n    from qadence.draw import display\n    b = kron(X(0), Y(1))\n    def display(*args, **kwargs): return args # markdown-exec: hide\n    display(b, size=\"1,1\", theme=\"dark\")\n    ```\n    \"\"\"\nreturn make_diagram(x, **kwargs).show()\n</code></pre>"},{"location":"qadence/draw/#qadence.draw.savefig","title":"<code>savefig(x, filename, *args, **kwargs)</code>","text":"<p>Save a block, circuit, or quantum model to file. Accepts the same args/kwargs as <code>display</code>.</p> PARAMETER  DESCRIPTION <code>x</code> <p><code>AbstractBlock</code>, <code>QuantumCircuit</code>, or <code>QuantumModel</code>.</p> <p> TYPE: <code>Any</code> </p> <code>filename</code> <p>Should end in svg/png.</p> <p> TYPE: <code>str</code> </p> <code>args</code> <p>Same as in <code>display</code>.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>()</code> </p> <code>kwargs</code> <p>Same as in <code>display</code>.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> <p>Examples: <pre><code>from qadence import X, Y, kron\nfrom qadence.draw import display\nb = kron(X(0), Y(1))\nsavefig(b, \"test.svg\", size=\"1,1\", theme=\"dark\")\n</code></pre> </p> Source code in <code>qadence/draw/__init__.py</code> <pre><code>def savefig(x: Any, filename: str, *args: Any, **kwargs: Any) -&gt; None:\n\"\"\"Save a block, circuit, or quantum model to file. Accepts the same args/kwargs as `display`.\n    Arguments:\n        x: `AbstractBlock`, `QuantumCircuit`, or `QuantumModel`.\n        filename: Should end in svg/png.\n        args: Same as in `display`.\n        kwargs: Same as in `display`.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" html=\"1\"\n    from qadence import X, Y, kron\n    from qadence.draw import display\n    b = kron(X(0), Y(1))\n    def savefig(*args, **kwargs): return args # markdown-exec: hide\n    savefig(b, \"test.svg\", size=\"1,1\", theme=\"dark\")\n    ```\n    \"\"\"\nmake_diagram(x, *args, **kwargs).savefig(filename)\n</code></pre>"},{"location":"qadence/execution/","title":"Execution","text":""},{"location":"qadence/execution/#qadence.execution.expectation","title":"<code>expectation(x, observable, values={}, state=None, backend=BackendName.PYQTORCH, diff_mode=None, noise=None, endianness=Endianness.BIG, configuration=None)</code>","text":"<p>Convenience wrapper for the <code>QuantumModel.expectation</code> method.</p> PARAMETER  DESCRIPTION <code>x</code> <p>Circuit, block, or (register+block) to run.</p> <p> TYPE: <code>Union[QuantumCircuit, AbstractBlock, Register, int]</code> </p> <code>observable</code> <p>Observable(s) w.r.t. which the expectation is computed.</p> <p> TYPE: <code>Union[list[AbstractBlock], AbstractBlock]</code> </p> <code>values</code> <p>User-facing parameter dict.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p> <code>state</code> <p>Initial state.</p> <p> TYPE: <code>Tensor</code> DEFAULT: <code>None</code> </p> <code>backend</code> <p>Name of the backend to run on.</p> <p> TYPE: <code>BackendName</code> DEFAULT: <code>PYQTORCH</code> </p> <code>diff_mode</code> <p>Which differentiation mode to use.</p> <p> TYPE: <code>Union[DiffMode, str, None]</code> DEFAULT: <code>None</code> </p> <code>endianness</code> <p>The target device endianness.</p> <p> TYPE: <code>Endianness</code> DEFAULT: <code>BIG</code> </p> <code>configuration</code> <p>The backend configuration.</p> <p> TYPE: <code>Union[BackendConfiguration, dict, None]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>A wavefunction</p> <pre><code>from qadence import RX, Z, Register, QuantumCircuit, expectation\nreg = Register(1)\nblock = RX(0, 0.5)\nobservable = Z(0)\ncirc = QuantumCircuit(reg, block)\n# You can compute the expectation for a\n# QuantumCircuit with a given observable.\nexpectation(circ, observable)\n# You can also use only a block.\n# In this case the register is constructed automatically to\n# Register.line(block.n_qubits)\nexpectation(block, observable)\n# Or a register and block\nexpectation(reg, block, observable)\n</code></pre> Source code in <code>qadence/execution.py</code> <pre><code>@singledispatch\ndef expectation(\nx: Union[QuantumCircuit, AbstractBlock, Register, int],\nobservable: Union[list[AbstractBlock], AbstractBlock],\nvalues: dict = {},\nstate: Tensor = None,\nbackend: BackendName = BackendName.PYQTORCH,\ndiff_mode: Union[DiffMode, str, None] = None,\nnoise: Union[Noise, None] = None,\nendianness: Endianness = Endianness.BIG,\nconfiguration: Union[BackendConfiguration, dict, None] = None,\n) -&gt; Tensor:\n\"\"\"Convenience wrapper for the `QuantumModel.expectation` method.\n    Arguments:\n        x: Circuit, block, or (register+block) to run.\n        observable: Observable(s) w.r.t. which the expectation is computed.\n        values: User-facing parameter dict.\n        state: Initial state.\n        backend: Name of the backend to run on.\n        diff_mode: Which differentiation mode to use.\n        endianness: The target device endianness.\n        configuration: The backend configuration.\n    Returns:\n        A wavefunction\n    ```python exec=\"on\" source=\"material-block\"\n    from qadence import RX, Z, Register, QuantumCircuit, expectation\n    reg = Register(1)\n    block = RX(0, 0.5)\n    observable = Z(0)\n    circ = QuantumCircuit(reg, block)\n    # You can compute the expectation for a\n    # QuantumCircuit with a given observable.\n    expectation(circ, observable)\n    # You can also use only a block.\n    # In this case the register is constructed automatically to\n    # Register.line(block.n_qubits)\n    expectation(block, observable)\n    # Or a register and block\n    expectation(reg, block, observable)\n    ```\n    \"\"\"\nraise ValueError(f\"Cannot execute {type(x)}\")\n</code></pre>"},{"location":"qadence/execution/#qadence.execution.run","title":"<code>run(x, *args, values={}, state=None, backend=BackendName.PYQTORCH, endianness=Endianness.BIG, configuration=None)</code>","text":"<p>Convenience wrapper for the <code>QuantumModel.run</code> method.</p> <p>This is a <code>functools.singledispatch</code>ed function so it can be called with a number of different arguments. See the examples of the <code>expectation</code> function. This function works exactly the same.</p> PARAMETER  DESCRIPTION <code>x</code> <p>Circuit, block, or (register+block) to run.</p> <p> TYPE: <code>Union[QuantumCircuit, AbstractBlock, Register, int]</code> </p> <code>values</code> <p>User-facing parameter dict.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p> <code>state</code> <p>Initial state.</p> <p> TYPE: <code>Tensor</code> DEFAULT: <code>None</code> </p> <code>backend</code> <p>Name of the backend to run on.</p> <p> TYPE: <code>BackendName</code> DEFAULT: <code>PYQTORCH</code> </p> <code>endianness</code> <p>The target device endianness.</p> <p> TYPE: <code>Endianness</code> DEFAULT: <code>BIG</code> </p> <code>configuration</code> <p>The backend configuration.</p> <p> TYPE: <code>Union[BackendConfiguration, dict, None]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>A wavefunction</p> Source code in <code>qadence/execution.py</code> <pre><code>@singledispatch\ndef run(\nx: Union[QuantumCircuit, AbstractBlock, Register, int],\n*args: Any,\nvalues: dict = {},\nstate: Tensor = None,\nbackend: BackendName = BackendName.PYQTORCH,\nendianness: Endianness = Endianness.BIG,\nconfiguration: Union[BackendConfiguration, dict, None] = None,\n) -&gt; Tensor:\n\"\"\"Convenience wrapper for the `QuantumModel.run` method.\n     This is a\n    `functools.singledispatch`ed function so it can be called with a number of different arguments.\n    See the examples of the [`expectation`][qadence.execution.expectation] function. This function\n    works exactly the same.\n    Arguments:\n        x: Circuit, block, or (register+block) to run.\n        values: User-facing parameter dict.\n        state: Initial state.\n        backend: Name of the backend to run on.\n        endianness: The target device endianness.\n        configuration: The backend configuration.\n    Returns:\n        A wavefunction\n    \"\"\"\nraise ValueError(f\"Cannot run {type(x)}\")\n</code></pre>"},{"location":"qadence/execution/#qadence.execution.sample","title":"<code>sample(x, *args, values={}, state=None, n_shots=100, backend=BackendName.PYQTORCH, endianness=Endianness.BIG, noise=None, configuration=None)</code>","text":"<p>Convenience wrapper for the <code>QuantumModel.sample</code> method.</p> PARAMETER  DESCRIPTION <code>x</code> <p>Circuit, block, or (register+block) to run.</p> <p> TYPE: <code>Union[QuantumCircuit, AbstractBlock, Register, int]</code> </p> <code>values</code> <p>User-facing parameter dict.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p> <code>state</code> <p>Initial state.</p> <p> TYPE: <code>Union[Tensor, None]</code> DEFAULT: <code>None</code> </p> <code>n_shots</code> <p>Number of shots per element in the batch.</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>backend</code> <p>Name of the backend to run on.</p> <p> TYPE: <code>BackendName</code> DEFAULT: <code>PYQTORCH</code> </p> <code>endianness</code> <p>The target device endianness.</p> <p> TYPE: <code>Endianness</code> DEFAULT: <code>BIG</code> </p> <code>noise</code> <p>The noise model to use if any.</p> <p> TYPE: <code>Union[Noise, None]</code> DEFAULT: <code>None</code> </p> <code>configuration</code> <p>The backend configuration.</p> <p> TYPE: <code>Union[BackendConfiguration, dict, None]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>list[Counter]</code> <p>A list of Counter instances with the sample results</p> Source code in <code>qadence/execution.py</code> <pre><code>@singledispatch\ndef sample(\nx: Union[QuantumCircuit, AbstractBlock, Register, int],\n*args: Any,\nvalues: dict = {},\nstate: Union[Tensor, None] = None,\nn_shots: int = 100,\nbackend: BackendName = BackendName.PYQTORCH,\nendianness: Endianness = Endianness.BIG,\nnoise: Union[Noise, None] = None,\nconfiguration: Union[BackendConfiguration, dict, None] = None,\n) -&gt; list[Counter]:\n\"\"\"Convenience wrapper for the `QuantumModel.sample` method.\n    Arguments:\n        x: Circuit, block, or (register+block) to run.\n        values: User-facing parameter dict.\n        state: Initial state.\n        n_shots: Number of shots per element in the batch.\n        backend: Name of the backend to run on.\n        endianness: The target device endianness.\n        noise: The noise model to use if any.\n        configuration: The backend configuration.\n    Returns:\n        A list of Counter instances with the sample results\n    \"\"\"\nraise ValueError(f\"Cannot sample from {type(x)}\")\n</code></pre>"},{"location":"qadence/ml_tools/","title":"QML tools","text":""},{"location":"qadence/ml_tools/#ml-tools","title":"ML Tools","text":"<p>This module implements gradient-free and gradient-based training loops for torch Modules and QuantumModel.</p>"},{"location":"qadence/ml_tools/#qadence.ml_tools.config.TrainConfig","title":"<code>TrainConfig</code>  <code>dataclass</code>","text":"<p>Default config for the train function.</p> <p>The default value of each field can be customized with the constructor:</p> <pre><code>from qadence.ml_tools import TrainConfig\nc = TrainConfig(folder=\"/tmp/train\")\n</code></pre> <pre><code>TrainConfig(max_iter=10000, print_every=1000, write_every=50, checkpoint_every=5000, folder=PosixPath('/tmp/train'), create_subfolder_per_run=False, checkpoint_best_only=False, validation_criterion=&lt;function TrainConfig.__post_init__.&lt;locals&gt;.&lt;lambda&gt; at 0x7f30dd112560&gt;, trainstop_criterion=&lt;function TrainConfig.__post_init__.&lt;locals&gt;.&lt;lambda&gt; at 0x7f30dd113be0&gt;, batch_size=1, verbose=True)\n</code></pre>"},{"location":"qadence/ml_tools/#qadence.ml_tools.config.TrainConfig.batch_size","title":"<code>batch_size: int = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The batch_size to use when passing a list/tuple of torch.Tensors.</p>"},{"location":"qadence/ml_tools/#qadence.ml_tools.config.TrainConfig.checkpoint_best_only","title":"<code>checkpoint_best_only: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Write model/optimizer checkpoint only if a metric has improved.</p>"},{"location":"qadence/ml_tools/#qadence.ml_tools.config.TrainConfig.checkpoint_every","title":"<code>checkpoint_every: int = 5000</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Write model/optimizer checkpoint.</p>"},{"location":"qadence/ml_tools/#qadence.ml_tools.config.TrainConfig.create_subfolder_per_run","title":"<code>create_subfolder_per_run: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Checkpoint/tensorboard logs stored in subfolder with name <code>&lt;timestamp&gt;_&lt;PID&gt;</code>.</p> <p>Prevents continuing from previous checkpoint, useful for fast prototyping.</p>"},{"location":"qadence/ml_tools/#qadence.ml_tools.config.TrainConfig.folder","title":"<code>folder: Optional[Path] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Checkpoint/tensorboard logs folder.</p>"},{"location":"qadence/ml_tools/#qadence.ml_tools.config.TrainConfig.max_iter","title":"<code>max_iter: int = 10000</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of training iterations.</p>"},{"location":"qadence/ml_tools/#qadence.ml_tools.config.TrainConfig.print_every","title":"<code>print_every: int = 1000</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Print loss/metrics.</p>"},{"location":"qadence/ml_tools/#qadence.ml_tools.config.TrainConfig.trainstop_criterion","title":"<code>trainstop_criterion: Optional[Callable] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A boolean function which evaluates a given training stopping metric is satisfied.</p>"},{"location":"qadence/ml_tools/#qadence.ml_tools.config.TrainConfig.validation_criterion","title":"<code>validation_criterion: Optional[Callable] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A boolean function which evaluates a given validation metric is satisfied.</p>"},{"location":"qadence/ml_tools/#qadence.ml_tools.config.TrainConfig.verbose","title":"<code>verbose: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether or not to print out metrics values during training.</p>"},{"location":"qadence/ml_tools/#qadence.ml_tools.config.TrainConfig.write_every","title":"<code>write_every: int = 50</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Write tensorboard logs.</p>"},{"location":"qadence/ml_tools/#qadence.ml_tools.parameters.get_parameters","title":"<code>get_parameters(model)</code>","text":"<p>Retrieve all trainable model parameters in a single vector.</p> PARAMETER  DESCRIPTION <code>model</code> <p>the input PyTorch model</p> <p> TYPE: <code>Module</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>a 1-dimensional tensor with the parameters</p> <p> TYPE: <code>Tensor</code> </p> Source code in <code>qadence/ml_tools/parameters.py</code> <pre><code>def get_parameters(model: Module) -&gt; Tensor:\n\"\"\"Retrieve all trainable model parameters in a single vector.\n    Args:\n        model (Module): the input PyTorch model\n    Returns:\n        Tensor: a 1-dimensional tensor with the parameters\n    \"\"\"\nps = [p.reshape(-1) for p in model.parameters() if p.requires_grad]\nreturn torch.concat(ps)\n</code></pre>"},{"location":"qadence/ml_tools/#qadence.ml_tools.parameters.num_parameters","title":"<code>num_parameters(model)</code>","text":"<p>Return the total number of parameters of the given model.</p> Source code in <code>qadence/ml_tools/parameters.py</code> <pre><code>def num_parameters(model: Module) -&gt; int:\n\"\"\"Return the total number of parameters of the given model.\"\"\"\nreturn len(get_parameters(model))\n</code></pre>"},{"location":"qadence/ml_tools/#qadence.ml_tools.parameters.set_parameters","title":"<code>set_parameters(model, theta)</code>","text":"<p>Set all trainable parameters of a model from a single vector.</p> <p>Notice that this function assumes prior knowledge of right number of parameters in the model</p> PARAMETER  DESCRIPTION <code>model</code> <p>the input PyTorch model</p> <p> TYPE: <code>Module</code> </p> <code>theta</code> <p>the parameters to assign</p> <p> TYPE: <code>Tensor</code> </p> Source code in <code>qadence/ml_tools/parameters.py</code> <pre><code>def set_parameters(model: Module, theta: Tensor) -&gt; None:\n\"\"\"Set all trainable parameters of a model from a single vector.\n    Notice that this function assumes prior knowledge of right number\n    of parameters in the model\n    Args:\n        model (Module): the input PyTorch model\n        theta (Tensor): the parameters to assign\n    \"\"\"\nwith torch.no_grad():\nidx = 0\nfor ps in model.parameters():\nif ps.requires_grad:\nn = torch.numel(ps)\nif ps.ndim == 0:\nps[()] = theta[idx : idx + n]\nelse:\nps[:] = theta[idx : idx + n].reshape(ps.size())\nidx += n\n</code></pre>"},{"location":"qadence/ml_tools/#qadence.ml_tools.optimize_step.optimize_step","title":"<code>optimize_step(model, optimizer, loss_fn, xs)</code>","text":"<p>Default Torch optimize step with closure.</p> <p>This is the default optimization step which should work for most of the standard use cases of optimization of Torch models</p> PARAMETER  DESCRIPTION <code>model</code> <p>The input model</p> <p> TYPE: <code>Module</code> </p> <code>optimizer</code> <p>The chosen Torch optimizer</p> <p> TYPE: <code>Optimizer</code> </p> <code>loss_fn</code> <p>A custom loss function</p> <p> TYPE: <code>Callable</code> </p> <code>xs</code> <p>the input data. If None it means that the given model does not require any input data</p> <p> TYPE: <code>dict | list | Tensor | None</code> </p> RETURNS DESCRIPTION <code>tuple</code> <p>tuple containing the model, the optimizer, a dictionary with the collected metrics and the compute value loss</p> <p> TYPE: <code>tuple[Tensor | float, dict | None]</code> </p> Source code in <code>qadence/ml_tools/optimize_step.py</code> <pre><code>def optimize_step(\nmodel: Module,\noptimizer: Optimizer,\nloss_fn: Callable,\nxs: dict | list | torch.Tensor | None,\n) -&gt; tuple[torch.Tensor | float, dict | None]:\n\"\"\"Default Torch optimize step with closure.\n    This is the default optimization step which should work for most\n    of the standard use cases of optimization of Torch models\n    Args:\n        model (Module): The input model\n        optimizer (Optimizer): The chosen Torch optimizer\n        loss_fn (Callable): A custom loss function\n        xs (dict | list | torch.Tensor | None): the input data. If None it means\n            that the given model does not require any input data\n    Returns:\n        tuple: tuple containing the model, the optimizer, a dictionary with\n            the collected metrics and the compute value loss\n    \"\"\"\nloss, metrics = None, {}\ndef closure() -&gt; Any:\n# NOTE: We need the nonlocal as we can't return a metric dict and\n# because e.g. LBFGS calls this closure multiple times but for some\n# reason the returned loss is always the first one...\nnonlocal metrics, loss\noptimizer.zero_grad()\nloss, metrics = loss_fn(model, xs)\nloss.backward(retain_graph=True)\nreturn loss.item()\noptimizer.step(closure)\n# return the loss/metrics that are being mutated inside the closure...\nreturn loss, metrics\n</code></pre>"},{"location":"qadence/ml_tools/#qadence.ml_tools.train_grad.train","title":"<code>train(model, dataloader, optimizer, config, loss_fn, device='cpu', optimize_step=optimize_step, write_tensorboard=write_tensorboard)</code>","text":"<p>Runs the training loop with gradient-based optimizer.</p> <p>Assumes that <code>loss_fn</code> returns a tuple of (loss, metrics: dict), where <code>metrics</code> is a dict of scalars. Loss and metrics are written to tensorboard. Checkpoints are written every <code>config.checkpoint_every</code> steps (and after the last training step).  If a checkpoint is found at <code>config.folder</code> we resume training from there.  The tensorboard logs can be viewed via <code>tensorboard --logdir /path/to/folder</code>.</p> PARAMETER  DESCRIPTION <code>model</code> <p>The model to train.</p> <p> TYPE: <code>Module</code> </p> <code>dataloader</code> <p>dataloader of different types. If None, no data is required by the model</p> <p> TYPE: <code>Union[None, DataLoader, DictDataLoader]</code> </p> <code>optimizer</code> <p>The optimizer to use.</p> <p> TYPE: <code>Optimizer</code> </p> <code>config</code> <p><code>TrainConfig</code> with additional training options.</p> <p> TYPE: <code>TrainConfig</code> </p> <code>loss_fn</code> <p>Loss function returning (loss: float, metrics: dict[str, float])</p> <p> TYPE: <code>Callable</code> </p> <code>device</code> <p>String defining device to train on, pass 'cuda' for GPU.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'cpu'</code> </p> <code>optimize_step</code> <p>Customizable optimization callback which is called at every iteration.= The function must have the signature <code>optimize_step(model, optimizer, loss_fn, xs, device=\"cpu\")</code> (see the example below). Apart from the default we already supply three other optimization functions <code>optimize_step_evo</code>, <code>optimize_step_grad_norm</code>, and <code>optimize_step_inv_dirichlet</code>. Learn more about how to use this in the Advancded features tutorial of the documentation.</p> <p> TYPE: <code>Callable</code> DEFAULT: <code>optimize_step</code> </p> <code>write_tensorboard</code> <p>Customizable tensorboard logging callback which is called every <code>config.write_every</code> iterations. The function must have the signature <code>write_tensorboard(writer, loss, metrics, iteration)</code> (see the example below).</p> <p> TYPE: <code>Callable</code> DEFAULT: <code>write_tensorboard</code> </p> <p>Example: <pre><code>from pathlib import Path\nimport torch\nfrom itertools import count\nfrom qadence import Parameter, QuantumCircuit, Z\nfrom qadence import hamiltonian_factory, hea, feature_map, chain\nfrom qadence.models import QNN\nfrom qadence.ml_tools import TrainConfig, train_with_grad, to_dataloader\nn_qubits = 2\nfm = feature_map(n_qubits)\nansatz = hea(n_qubits=n_qubits, depth=3)\nobservable = hamiltonian_factory(n_qubits, detuning = Z)\ncircuit = QuantumCircuit(n_qubits, fm, ansatz)\nmodel = QNN(circuit, observable, backend=\"pyqtorch\", diff_mode=\"ad\")\nbatch_size = 1\ninput_values = {\"phi\": torch.rand(batch_size, requires_grad=True)}\npred = model(input_values)\n## lets prepare the train routine\ncnt = count()\ncriterion = torch.nn.MSELoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.1)\ndef loss_fn(model: torch.nn.Module, data: torch.Tensor) -&gt; tuple[torch.Tensor, dict]:\nnext(cnt)\nx, y = data[0], data[1]\nout = model(x)\nloss = criterion(out, y)\nreturn loss, {}\ntmp_path = Path(\"/tmp\")\nn_epochs = 5\nbatch_size = 25\nconfig = TrainConfig(\nfolder=tmp_path,\nmax_iter=n_epochs,\ncheckpoint_every=100,\nwrite_every=100,\n)\nx = torch.linspace(0, 1, batch_size).reshape(-1, 1)\ny = torch.sin(x)\ndata = to_dataloader(x, y, batch_size=batch_size, infinite=True)\ntrain_with_grad(model, data, optimizer, config, loss_fn=loss_fn)\n</code></pre> </p> Source code in <code>qadence/ml_tools/train_grad.py</code> <pre><code>def train(\nmodel: Module,\ndataloader: Union[None, DataLoader, DictDataLoader],\noptimizer: Optimizer,\nconfig: TrainConfig,\nloss_fn: Callable,\ndevice: str = \"cpu\",\noptimize_step: Callable = optimize_step,\nwrite_tensorboard: Callable = write_tensorboard,\n) -&gt; tuple[Module, Optimizer]:\n\"\"\"Runs the training loop with gradient-based optimizer.\n    Assumes that `loss_fn` returns a tuple of (loss,\n    metrics: dict), where `metrics` is a dict of scalars. Loss and metrics are\n    written to tensorboard. Checkpoints are written every\n    `config.checkpoint_every` steps (and after the last training step).  If a\n    checkpoint is found at `config.folder` we resume training from there.  The\n    tensorboard logs can be viewed via `tensorboard --logdir /path/to/folder`.\n    Args:\n        model: The model to train.\n        dataloader: dataloader of different types. If None, no data is required by\n            the model\n        optimizer: The optimizer to use.\n        config: `TrainConfig` with additional training options.\n        loss_fn: Loss function returning (loss: float, metrics: dict[str, float])\n        device: String defining device to train on, pass 'cuda' for GPU.\n        optimize_step: Customizable optimization callback which is called at every iteration.=\n            The function must have the signature `optimize_step(model,\n            optimizer, loss_fn, xs, device=\"cpu\")` (see the example below).\n            Apart from the default we already supply three other optimization\n            functions `optimize_step_evo`, `optimize_step_grad_norm`, and\n            `optimize_step_inv_dirichlet`. Learn more about how to use this in\n            the [Advancded features](../../tutorials/advanced) tutorial of the\n            documentation.\n        write_tensorboard: Customizable tensorboard logging callback which is\n            called every `config.write_every` iterations. The function must have\n            the signature `write_tensorboard(writer, loss, metrics, iteration)`\n            (see the example below).\n    Example:\n    ```python exec=\"on\" source=\"material-block\"\n    from pathlib import Path\n    import torch\n    from itertools import count\n    from qadence import Parameter, QuantumCircuit, Z\n    from qadence import hamiltonian_factory, hea, feature_map, chain\n    from qadence.models import QNN\n    from qadence.ml_tools import TrainConfig, train_with_grad, to_dataloader\n    n_qubits = 2\n    fm = feature_map(n_qubits)\n    ansatz = hea(n_qubits=n_qubits, depth=3)\n    observable = hamiltonian_factory(n_qubits, detuning = Z)\n    circuit = QuantumCircuit(n_qubits, fm, ansatz)\n    model = QNN(circuit, observable, backend=\"pyqtorch\", diff_mode=\"ad\")\n    batch_size = 1\n    input_values = {\"phi\": torch.rand(batch_size, requires_grad=True)}\n    pred = model(input_values)\n    ## lets prepare the train routine\n    cnt = count()\n    criterion = torch.nn.MSELoss()\n    optimizer = torch.optim.Adam(model.parameters(), lr=0.1)\n    def loss_fn(model: torch.nn.Module, data: torch.Tensor) -&gt; tuple[torch.Tensor, dict]:\n        next(cnt)\n        x, y = data[0], data[1]\n        out = model(x)\n        loss = criterion(out, y)\n        return loss, {}\n    tmp_path = Path(\"/tmp\")\n    n_epochs = 5\n    batch_size = 25\n    config = TrainConfig(\n        folder=tmp_path,\n        max_iter=n_epochs,\n        checkpoint_every=100,\n        write_every=100,\n    )\n    x = torch.linspace(0, 1, batch_size).reshape(-1, 1)\n    y = torch.sin(x)\n    data = to_dataloader(x, y, batch_size=batch_size, infinite=True)\n    train_with_grad(model, data, optimizer, config, loss_fn=loss_fn)\n    ```\n    \"\"\"\n# Move model to device before optimizer is loaded\nmodel = model.to(device)\n# load available checkpoint\ninit_iter = 0\nif config.folder:\nmodel, optimizer, init_iter = load_checkpoint(config.folder, model, optimizer)\nlogger.debug(f\"Loaded model and optimizer from {config.folder}\")\n# initialize tensorboard\nwriter = SummaryWriter(config.folder, purge_step=init_iter)\n## Training\nprogress = Progress(\nTextColumn(\"[progress.description]{task.description}\"),\nBarColumn(),\nTaskProgressColumn(),\nTimeRemainingColumn(elapsed_when_finished=True),\n)\nwith progress:\ndl_iter = iter(dataloader) if dataloader is not None else None\n# outer epoch loop\nfor iteration in progress.track(range(init_iter, init_iter + config.max_iter)):\ntry:\n# in case there is not data needed by the model\n# this is the case, for example, of quantum models\n# which do not have classical input data (e.g. chemistry)\nif dataloader is None:\nloss, metrics = optimize_step(model, optimizer, loss_fn, None)\nloss = loss.item()\nelif isinstance(dataloader, (DictDataLoader, DataLoader)):\ndata = data_to_device(next(dl_iter), device)  # type: ignore[arg-type]\nloss, metrics = optimize_step(model, optimizer, loss_fn, data)\nelse:\nraise NotImplementedError(\nf\"Unsupported dataloader type: {type(dataloader)}. \"\n\"You can use e.g. `qadence.ml_tools.to_dataloader` to build a dataloader.\"\n)\nif iteration % config.print_every == 0 and config.verbose:\nprint_metrics(loss, metrics, iteration)\nif iteration % config.write_every == 0:\nwrite_tensorboard(writer, loss, metrics, iteration)\nif config.folder:\nif iteration % config.checkpoint_every == 0:\nwrite_checkpoint(config.folder, model, optimizer, iteration)\nexcept KeyboardInterrupt:\nprint(\"Terminating training gracefully after the current iteration.\")\nbreak\n# Final writing and checkpointing\nif config.folder:\nwrite_checkpoint(config.folder, model, optimizer, iteration)\nwrite_tensorboard(writer, loss, metrics, iteration)\nwriter.close()\nreturn model, optimizer\n</code></pre>"},{"location":"qadence/ml_tools/#qadence.ml_tools.train_no_grad.train","title":"<code>train(model, dataloader, optimizer, config, loss_fn)</code>","text":"<p>Runs the training loop with a gradient-free optimizer.</p> <p>Assumes that <code>loss_fn</code> returns a tuple of (loss, metrics: dict), where <code>metrics</code> is a dict of scalars. Loss and metrics are written to tensorboard. Checkpoints are written every <code>config.checkpoint_every</code> steps (and after the last training step).  If a checkpoint is found at <code>config.folder</code> we resume training from there.  The tensorboard logs can be viewed via <code>tensorboard --logdir /path/to/folder</code>.</p> PARAMETER  DESCRIPTION <code>model</code> <p>The model to train</p> <p> TYPE: <code>Module</code> </p> <code>dataloader</code> <p>Dataloader constructed via <code>dictdataloader</code></p> <p> TYPE: <code>DictDataLoader | DataLoader | None</code> </p> <code>optimizer</code> <p>The optimizer to use taken from the Nevergrad library. If this is not the case the function will raise an AssertionError</p> <p> TYPE: <code>Optimizer</code> </p> <code>loss_fn</code> <p>Loss function returning (loss: float, metrics: dict[str, float])</p> <p> TYPE: <code>Callable</code> </p> Source code in <code>qadence/ml_tools/train_no_grad.py</code> <pre><code>def train(\nmodel: Module,\ndataloader: DictDataLoader | DataLoader | None,\noptimizer: NGOptimizer,\nconfig: TrainConfig,\nloss_fn: Callable,\n) -&gt; tuple[Module, NGOptimizer]:\n\"\"\"Runs the training loop with a gradient-free optimizer.\n    Assumes that `loss_fn` returns a tuple of (loss, metrics: dict), where\n    `metrics` is a dict of scalars. Loss and metrics are written to\n    tensorboard. Checkpoints are written every `config.checkpoint_every` steps\n    (and after the last training step).  If a checkpoint is found at `config.folder`\n    we resume training from there.  The tensorboard logs can be viewed via\n    `tensorboard --logdir /path/to/folder`.\n    Args:\n        model: The model to train\n        dataloader: Dataloader constructed via `dictdataloader`\n        optimizer: The optimizer to use taken from the Nevergrad library. If this is not\n            the case the function will raise an AssertionError\n        loss_fn: Loss function returning (loss: float, metrics: dict[str, float])\n    \"\"\"\ninit_iter = 0\nif config.folder:\nmodel, optimizer, init_iter = load_checkpoint(config.folder, model, optimizer)\nlogger.debug(f\"Loaded model and optimizer from {config.folder}\")\ndef _update_parameters(\ndata: Tensor | None, ng_params: ng.p.Array\n) -&gt; tuple[float, dict, ng.p.Array]:\nloss, metrics = loss_fn(model, data)  # type: ignore[misc]\noptimizer.tell(ng_params, float(loss))\nng_params = optimizer.ask()  # type: ignore [assignment]\nparams = promote_to_tensor(ng_params.value, requires_grad=False)\nset_parameters(model, params)\nreturn loss, metrics, ng_params\nassert loss_fn is not None, \"Provide a valid loss function\"\n# TODO: support also Scipy optimizers\nassert isinstance(optimizer, NGOptimizer), \"Use only optimizers from the Nevergrad library\"\n# initialize tensorboard\nwriter = SummaryWriter(config.folder, purge_step=init_iter)\n# set optimizer configuration and initial parameters\noptimizer.budget = config.max_iter\noptimizer.enable_pickling()\n# TODO: Make it GPU compatible if possible\nparams = get_parameters(model).detach().numpy()\nng_params = ng.p.Array(init=params)\n# serial training\n# TODO: Add a parallelization using the num_workers argument in Nevergrad\nprogress = Progress(\nTextColumn(\"[progress.description]{task.description}\"),\nBarColumn(),\nTaskProgressColumn(),\nTimeRemainingColumn(elapsed_when_finished=True),\n)\nwith progress:\ndl_iter = iter(dataloader) if dataloader is not None else None\nfor iteration in progress.track(range(init_iter, init_iter + config.max_iter)):\nif dataloader is None:\nloss, metrics, ng_params = _update_parameters(None, ng_params)\nelif isinstance(dataloader, (DictDataLoader, DataLoader)):\ndata = next(dl_iter)  # type: ignore[arg-type]\nloss, metrics, ng_params = _update_parameters(data, ng_params)\nelse:\nraise NotImplementedError(\"Unsupported dataloader type!\")\nif iteration % config.print_every == 0 and config.verbose:\nprint_metrics(loss, metrics, iteration)\nif iteration % config.write_every == 0:\nwrite_tensorboard(writer, loss, metrics, iteration)\nif config.folder:\nif iteration % config.checkpoint_every == 0:\nwrite_checkpoint(config.folder, model, optimizer, iteration)\nif iteration &gt;= init_iter + config.max_iter:\nbreak\n## Final writing and stuff\nif config.folder:\nwrite_checkpoint(config.folder, model, optimizer, iteration)\nwrite_tensorboard(writer, loss, metrics, iteration)\nwriter.close()\nreturn model, optimizer\n</code></pre>"},{"location":"qadence/ml_tools/#qadence.ml_tools.data.DictDataLoader","title":"<code>DictDataLoader</code>  <code>dataclass</code>","text":"<p>This class only holds a dictionary of <code>DataLoader</code>s and samples from them.</p>"},{"location":"qadence/ml_tools/#qadence.ml_tools.data.InfiniteTensorDataset","title":"<code>InfiniteTensorDataset(*tensors)</code>","text":"<p>             Bases: <code>IterableDataset</code></p> <p>Randomly sample points from the first dimension of the given tensors.</p> <p>Behaves like a normal torch <code>Dataset</code> just that we can sample from it as many times as we want.</p> <p>Examples: <pre><code>import torch\nfrom qadence.ml_tools.data import InfiniteTensorDataset\nx_data, y_data = torch.rand(5,2), torch.ones(5,1)\n# The dataset accepts any number of tensors with the same batch dimension\nds = InfiniteTensorDataset(x_data, y_data)\n# call `next` to get one sample from each tensor:\nxs = next(iter(ds))\n</code></pre> <pre><code>(tensor([0.4065, 0.8547]), tensor([1.]))\n</code></pre></p> Source code in <code>qadence/ml_tools/data.py</code> <pre><code>def __init__(self, *tensors: Tensor):\n\"\"\"Randomly sample points from the first dimension of the given tensors.\n    Behaves like a normal torch `Dataset` just that we can sample from it as\n    many times as we want.\n    Examples:\n    ```python exec=\"on\" source=\"above\" result=\"json\"\n    import torch\n    from qadence.ml_tools.data import InfiniteTensorDataset\n    x_data, y_data = torch.rand(5,2), torch.ones(5,1)\n    # The dataset accepts any number of tensors with the same batch dimension\n    ds = InfiniteTensorDataset(x_data, y_data)\n    # call `next` to get one sample from each tensor:\n    xs = next(iter(ds))\n    print(str(xs)) # markdown-exec: hide\n    ```\n    \"\"\"\nself.tensors = tensors\n</code></pre>"},{"location":"qadence/ml_tools/#qadence.ml_tools.data.to_dataloader","title":"<code>to_dataloader(*tensors, batch_size=1, infinite=False)</code>","text":"<p>Convert torch tensors an (infinite) Dataloader.</p> PARAMETER  DESCRIPTION <code>*tensors</code> <p>Torch tensors to use in the dataloader.</p> <p> TYPE: <code>Tensor</code> DEFAULT: <code>()</code> </p> <code>batch_size</code> <p>batch size of sampled tensors</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>infinite</code> <p>if <code>True</code>, the dataloader will keep sampling indefinitely even after the whole dataset was sampled once</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <p>Examples:</p> <pre><code>import torch\nfrom qadence.ml_tools import to_dataloader\n(x, y, z) = [torch.rand(10) for _ in range(3)]\nloader = iter(to_dataloader(x, y, z, batch_size=5, infinite=True))\nprint(next(loader))\nprint(next(loader))\nprint(next(loader))\n</code></pre> <pre><code>[tensor([0.5520, 0.5128, 0.8844, 0.3853, 0.1138]), tensor([0.7267, 0.4795, 0.8860, 0.1588, 0.1412]), tensor([0.4323, 0.2156, 0.6628, 0.0107, 0.0522])]\n[tensor([0.1679, 0.2914, 0.0584, 0.0124, 0.3985]), tensor([0.8215, 0.9256, 0.2762, 0.3432, 0.2289]), tensor([0.5735, 0.7052, 0.1925, 0.1755, 0.1534])]\n[tensor([0.5520, 0.5128, 0.8844, 0.3853, 0.1138]), tensor([0.7267, 0.4795, 0.8860, 0.1588, 0.1412]), tensor([0.4323, 0.2156, 0.6628, 0.0107, 0.0522])]\n</code></pre> Source code in <code>qadence/ml_tools/data.py</code> <pre><code>def to_dataloader(*tensors: Tensor, batch_size: int = 1, infinite: bool = False) -&gt; DataLoader:\n\"\"\"Convert torch tensors an (infinite) Dataloader.\n    Arguments:\n        *tensors: Torch tensors to use in the dataloader.\n        batch_size: batch size of sampled tensors\n        infinite: if `True`, the dataloader will keep sampling indefinitely even after the whole\n            dataset was sampled once\n    Examples:\n    ```python exec=\"on\" source=\"above\" result=\"json\"\n    import torch\n    from qadence.ml_tools import to_dataloader\n    (x, y, z) = [torch.rand(10) for _ in range(3)]\n    loader = iter(to_dataloader(x, y, z, batch_size=5, infinite=True))\n    print(next(loader))\n    print(next(loader))\n    print(next(loader))\n    ```\n    \"\"\"\nds = InfiniteTensorDataset(*tensors) if infinite else TensorDataset(*tensors)\nreturn DataLoader(ds, batch_size=batch_size)\n</code></pre>"},{"location":"qadence/operations/","title":"Operations","text":"<p>Operations are common <code>PrimitiveBlocks</code>, these are often called gates elsewhere.</p>"},{"location":"qadence/operations/#constant-blocks","title":"Constant blocks","text":"<p>CY gate not implemented</p>"},{"location":"qadence/operations/#qadence.operations.X","title":"<code>X(target)</code>","text":"<p>             Bases: <code>PrimitiveBlock</code></p> <p>The X gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, target: int):\nsuper().__init__((target,))\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.Y","title":"<code>Y(target)</code>","text":"<p>             Bases: <code>PrimitiveBlock</code></p> <p>The Y gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, target: int):\nsuper().__init__((target,))\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.Z","title":"<code>Z(target)</code>","text":"<p>             Bases: <code>PrimitiveBlock</code></p> <p>The Z gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, target: int):\nsuper().__init__((target,))\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.I","title":"<code>I(target)</code>","text":"<p>             Bases: <code>PrimitiveBlock</code></p> <p>The identity gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, target: int):\nsuper().__init__((target,))\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.H","title":"<code>H(target)</code>","text":"<p>             Bases: <code>PrimitiveBlock</code></p> <p>The Hadamard or H gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, target: int):\nself.generator = (1 / np.sqrt(2)) * (X(target) + Z(target) - np.sqrt(2) * I(target))\nsuper().__init__((target,))\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.S","title":"<code>S(target)</code>","text":"<p>             Bases: <code>PrimitiveBlock</code></p> <p>The S / Phase gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, target: int):\nself.generator = I(target) - Z(target)\nsuper().__init__((target,))\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.SDagger","title":"<code>SDagger(target)</code>","text":"<p>             Bases: <code>PrimitiveBlock</code></p> <p>The Hermitian adjoint/conjugate transpose of the S / Phase gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, target: int):\nself.generator = I(target) - Z(target)\nsuper().__init__((target,))\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.SWAP","title":"<code>SWAP(control, target)</code>","text":"<p>             Bases: <code>PrimitiveBlock</code></p> <p>The SWAP gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, control: int, target: int) -&gt; None:\na11 = 0.5 * (Z(control) - I(control))\na22 = -0.5 * (Z(target) + I(target))\na12 = 0.5 * (chain(X(control), Z(control)) + X(control))\na21 = 0.5 * (chain(Z(target), X(target)) + X(target))\nself.generator = (\nkron(-1.0 * a22, a11) + kron(-1.0 * a11, a22) + kron(a12, a21) + kron(a21, a12)\n)\nsuper().__init__((control, target))\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.T","title":"<code>T(target)</code>","text":"<p>             Bases: <code>PrimitiveBlock</code></p> <p>The T gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, target: int):\nself.generator = I(target) - Z(target)\nsuper().__init__((target,))\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.TDagger","title":"<code>TDagger(target)</code>","text":"<p>             Bases: <code>PrimitiveBlock</code></p> <p>The Hermitian adjoint/conjugate transpose of the T gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, target: int):\nself.generator = I(target) - Z(target)\nsuper().__init__((target,))\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.CNOT","title":"<code>CNOT(control, target)</code>","text":"<p>             Bases: <code>ControlBlock</code></p> <p>The CNot, or CX, gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, control: int, target: int) -&gt; None:\nself.generator = kron((I(control) - Z(control)) * 0.5, X(target) - I(target))\nsuper().__init__((control,), X(target))\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.CZ","title":"<code>CZ(control, target)</code>","text":"<p>             Bases: <code>MCZ</code></p> <p>The CZ gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, control: int, target: int) -&gt; None:\nsuper().__init__((control,), target)\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.CPHASE","title":"<code>CPHASE(control, target, parameter)</code>","text":"<p>             Bases: <code>MCPHASE</code></p> <p>The CPHASE gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(\nself,\ncontrol: int,\ntarget: int,\nparameter: Parameter | TNumber | sympy.Expr | str,\n):\nsuper().__init__((control,), target, parameter)\n</code></pre>"},{"location":"qadence/operations/#parametrized-blocks","title":"Parametrized blocks","text":""},{"location":"qadence/operations/#qadence.operations.RX","title":"<code>RX(target, parameter)</code>","text":"<p>             Bases: <code>ParametricBlock</code></p> <p>The Rx gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, target: int, parameter: Parameter | TParameter | ParamMap):\n# TODO: should we give them more meaningful names? like 'angle'?\nself.parameters = (\nparameter if isinstance(parameter, ParamMap) else ParamMap(parameter=parameter)\n)\nself.generator = X(target)\nsuper().__init__((target,))\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.RY","title":"<code>RY(target, parameter)</code>","text":"<p>             Bases: <code>ParametricBlock</code></p> <p>The Ry gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, target: int, parameter: Parameter | TParameter | ParamMap):\nself.parameters = (\nparameter if isinstance(parameter, ParamMap) else ParamMap(parameter=parameter)\n)\nself.generator = Y(target)\nsuper().__init__((target,))\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.RZ","title":"<code>RZ(target, parameter)</code>","text":"<p>             Bases: <code>ParametricBlock</code></p> <p>The Rz gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, target: int, parameter: Parameter | TParameter | ParamMap):\nself.parameters = (\nparameter if isinstance(parameter, ParamMap) else ParamMap(parameter=parameter)\n)\nself.generator = Z(target)\nsuper().__init__((target,))\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.CRX","title":"<code>CRX(control, target, parameter)</code>","text":"<p>             Bases: <code>MCRX</code></p> <p>The CRX gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(\nself,\ncontrol: int,\ntarget: int,\nparameter: Parameter | TNumber | sympy.Expr | str,\n):\nsuper().__init__((control,), target, parameter)\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.CRY","title":"<code>CRY(control, target, parameter)</code>","text":"<p>             Bases: <code>MCRY</code></p> <p>The CRY gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(\nself,\ncontrol: int,\ntarget: int,\nparameter: Parameter | TNumber | sympy.Expr | str,\n):\nsuper().__init__((control,), target, parameter)\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.CRZ","title":"<code>CRZ(control, target, parameter)</code>","text":"<p>             Bases: <code>MCRZ</code></p> <p>The CRZ gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(\nself,\ncontrol: int,\ntarget: int,\nparameter: Parameter | TNumber | sympy.Expr | str,\n):\nsuper().__init__((control,), target, parameter)\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.PHASE","title":"<code>PHASE(target, parameter)</code>","text":"<p>             Bases: <code>ParametricBlock</code></p> <p>The Parametric Phase / S gate.</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, target: int, parameter: Parameter | TNumber | sympy.Expr | str):\nself.parameters = ParamMap(parameter=parameter)\nself.generator = I(target) - Z(target)\nsuper().__init__((target,))\n</code></pre>"},{"location":"qadence/operations/#hamiltonian-evolution","title":"Hamiltonian Evolution","text":"<p>AnalogSWAP should be turned into a proper analog block</p>"},{"location":"qadence/operations/#qadence.operations.HamEvo","title":"<code>HamEvo(generator, parameter, qubit_support=None)</code>","text":"<p>             Bases: <code>TimeEvolutionBlock</code></p> <p>A block implementing the Hamiltonian evolution operation H where:</p> <pre><code>H = exp(-iG, t)\n</code></pre> <p>where G represents a square generator and t represents the time parameter which can be parametrized.</p> PARAMETER  DESCRIPTION <code>generator</code> <p>Either a AbstractBlock, torch.Tensor or numpy.ndarray.</p> <p> TYPE: <code>Union[TGenerator, AbstractBlock]</code> </p> <code>parameter</code> <p>A scalar or vector of numeric or torch.Tensor type.</p> <p> TYPE: <code>TParameter</code> </p> <code>qubit_support</code> <p>The qubits on which the evolution will be performed on.</p> <p> TYPE: <code>tuple[int, ...]</code> DEFAULT: <code>None</code> </p> <p>Examples:</p> <pre><code>from qadence import RX, HamEvo, run\nimport torch\nhevo = HamEvo(generator=RX(0, torch.pi), parameter=torch.rand(2))\nprint(run(hevo))\n# Now lets use a torch.Tensor as a generator, Now we have to pass the support\ngen = torch.rand(2,2, dtype=torch.complex128)\nhevo = HamEvo(generator=gen, parameter=torch.rand(2), qubit_support=(0,))\nprint(run(hevo))\n</code></pre> <pre><code>tensor([[ 1.1804-4.2794e-17j, -0.6272+2.2739e-17j],\n[ 1.0007-2.3573e-18j, -0.0385+9.0640e-20j]])\ntensor([[1.6181-0.0440j, 0.2614-0.1383j],\n[1.3914-0.0214j, 0.1634-0.0779j]])\n</code></pre> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(\nself,\ngenerator: Union[TGenerator, AbstractBlock],\nparameter: TParameter,\nqubit_support: tuple[int, ...] = None,\n):\ngen_exprs = {}\nif qubit_support is None and not isinstance(generator, AbstractBlock):\nraise ValueError(\"You have to supply a qubit support for non-block generators.\")\nsuper().__init__(qubit_support if qubit_support else generator.qubit_support)\nif isinstance(generator, AbstractBlock):\nqubit_support = generator.qubit_support\nif generator.is_parametric:\ngen_exprs = {str(e): e for e in expressions(generator)}\nelif isinstance(generator, torch.Tensor):\nmsg = \"Please provide a square generator.\"\nif len(generator.shape) == 2:\nassert generator.shape[0] == generator.shape[1], msg\nelif len(generator.shape) == 3:\nassert generator.shape[1] == generator.shape[2], msg\nassert generator.shape[0] == 1, \"Qadence doesnt support batched generators.\"\nelse:\nraise TypeError(\n\"Only 2D or 3D generators are supported.\\\n                            In case of a 3D generator, the batch dim\\\n                            is expected to be at dim 0.\"\n)\ngen_exprs = {str(generator.__hash__()): generator}\nelif isinstance(generator, (sympy.Basic, sympy.Array)):\ngen_exprs = {str(generator): generator}\nelse:\nraise TypeError(\nf\"Generator of type {type(generator)} not supported.\\\n                        If you're using a numpy.ndarray, please cast it to a torch tensor.\"\n)\nps = {\"parameter\": Parameter(parameter), **gen_exprs}\nself.parameters = ParamMap(**ps)\nself.generator = generator\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.HamEvo.digital_decomposition","title":"<code>digital_decomposition(approximation=LTSOrder.ST4)</code>","text":"<p>Decompose the Hamiltonian evolution into digital gates.</p> PARAMETER  DESCRIPTION <code>approximation</code> <p>Choose the type of decomposition. Defaults to \"st4\". Available types are: * 'basic' = apply first-order Trotter formula and decompose each term of     the exponential into digital gates. It is exact only if applied to an     operator whose terms are mutually commuting. * 'st2' = Trotter-Suzuki 2nd order formula for approximating non-commuting     Hamiltonians. * 'st4' = Trotter-Suzuki 4th order formula for approximating non-commuting     Hamiltonians.</p> <p> TYPE: <code>str</code> DEFAULT: <code>ST4</code> </p> RETURNS DESCRIPTION <code>AbstractBlock</code> <p>a block with the digital decomposition</p> <p> TYPE: <code>AbstractBlock</code> </p> Source code in <code>qadence/operations.py</code> <pre><code>def digital_decomposition(self, approximation: LTSOrder = LTSOrder.ST4) -&gt; AbstractBlock:\n\"\"\"Decompose the Hamiltonian evolution into digital gates.\n    Args:\n        approximation (str, optional): Choose the type of decomposition. Defaults to \"st4\".\n            Available types are:\n            * 'basic' = apply first-order Trotter formula and decompose each term of\n                the exponential into digital gates. It is exact only if applied to an\n                operator whose terms are mutually commuting.\n            * 'st2' = Trotter-Suzuki 2nd order formula for approximating non-commuting\n                Hamiltonians.\n            * 'st4' = Trotter-Suzuki 4th order formula for approximating non-commuting\n                Hamiltonians.\n    Returns:\n        AbstractBlock: a block with the digital decomposition\n    \"\"\"\n# psi(t) = exp(-i * H * t * psi0)\n# psi(t) = exp(-i * lambda * t * psi0)\n# H = sum(Paulin) + sum(Pauli1*Pauli2)\nlogger.info(\"Quantum simulation of the time-independent Schr\u00f6dinger equation.\")\nblocks = []\n# how to change the type/dict to enum effectively\n# when there is a term including non-commuting matrices use st2 or st4\n# 1) should check that the given generator respects the constraints\n# single-qubit gates\nassert isinstance(\nself.generator, AbstractBlock\n), \"Only a generator represented as a block can be decomposed\"\nif block_is_qubit_hamiltonian(self.generator):\ntry:\nblock_is_commuting_hamiltonian(self.generator)\napproximation = LTSOrder.BASIC  # use the simpler approach if the H is commuting\nexcept TypeError:\nlogger.warning(\n\"\"\"Non-commuting terms in the Pauli operator.\n                The Suzuki-Trotter approximation is applied.\"\"\"\n)\nblocks.extend(\nlie_trotter_suzuki(\nblock=self.generator,\nparameter=self.parameters.parameter,\norder=LTSOrder[approximation],\n)\n)\n# 2) return an AbstractBlock instance with the set of gates\n# resulting from the decomposition\nreturn chain(*blocks)\nelse:\nraise NotImplementedError(\n\"The current digital decomposition can be applied only to Pauli Hamiltonians.\"\n)\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.AnalogSWAP","title":"<code>AnalogSWAP(control, target, parameter=3 * np.pi / 4)</code>","text":"<p>             Bases: <code>HamEvo</code></p> <p>Single time-independent Hamiltonian evolution over a Rydberg Ising.</p> <p>hamiltonian yielding a SWAP (up to global phase).</p> <p>Derived from Bapat et al. where it is applied to XX-type Hamiltonian</p> Source code in <code>qadence/operations.py</code> <pre><code>def __init__(self, control: int, target: int, parameter: TParameter = 3 * np.pi / 4):\nrydberg_ising_hamiltonian_generator = (\n4.0 * kron((I(control) - Z(control)) / 2.0, (I(target) - Z(target)) / 2.0)\n+ (2.0 / 3.0) * np.sqrt(2.0) * X(control)\n+ (2.0 / 3.0) * np.sqrt(2.0) * X(target)\n+ (1.0 + np.sqrt(5.0) / 3) * Z(control)\n+ (1.0 + np.sqrt(5.0) / 3) * Z(target)\n)\nsuper().__init__(rydberg_ising_hamiltonian_generator, parameter, (control, target))\n</code></pre>"},{"location":"qadence/operations/#analog-blocks","title":"Analog blocks","text":""},{"location":"qadence/operations/#qadence.operations.AnalogRX","title":"<code>AnalogRX(angle, qubit_support='global')</code>","text":"<p>Analog X rotation.</p> <p>Shorthand for <code>AnalogRot</code>:</p> <pre><code>\u03c6=2.4; \u03a9=\u03c0; t = \u03c6/\u03a9 * 1000\nAnalogRot(duration=t, omega=\u03a9)\n</code></pre> PARAMETER  DESCRIPTION <code>angle</code> <p>Rotation angle [rad]</p> <p> TYPE: <code>float | str | Parameter</code> </p> <code>qubit_support</code> <p>Defines the (local/global) qubit support</p> <p> TYPE: <code>str | QubitSupport | Tuple</code> DEFAULT: <code>'global'</code> </p> RETURNS DESCRIPTION <code>ConstantAnalogRotation</code> <p>ConstantAnalogRotation</p> Source code in <code>qadence/operations.py</code> <pre><code>def AnalogRX(\nangle: float | str | Parameter,\nqubit_support: str | QubitSupport | Tuple = \"global\",\n) -&gt; ConstantAnalogRotation:\n\"\"\"Analog X rotation.\n    Shorthand for [`AnalogRot`][qadence.operations.AnalogRot]:\n    ```python\n    \u03c6=2.4; \u03a9=\u03c0; t = \u03c6/\u03a9 * 1000\n    AnalogRot(duration=t, omega=\u03a9)\n    ```\n    Arguments:\n        angle: Rotation angle [rad]\n        qubit_support: Defines the (local/global) qubit support\n    Returns:\n        ConstantAnalogRotation\n    \"\"\"\nreturn _analog_rot(angle, qubit_support, phase=0)\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.AnalogRY","title":"<code>AnalogRY(angle, qubit_support='global')</code>","text":"<p>Analog Y rotation.</p> <p>Shorthand for <code>AnalogRot</code>:</p> <p><pre><code>\u03c6=2.4; \u03a9=\u03c0; t = \u03c6/\u03a9 * 1000\nAnalogRot(duration=t, omega=\u03a9, phase=-\u03c0/2)\n</code></pre> Arguments:     angle: Rotation angle [rad]     qubit_support: Defines the (local/global) qubit support</p> RETURNS DESCRIPTION <code>ConstantAnalogRotation</code> <p>ConstantAnalogRotation</p> Source code in <code>qadence/operations.py</code> <pre><code>def AnalogRY(\nangle: float | str | Parameter,\nqubit_support: str | QubitSupport | Tuple = \"global\",\n) -&gt; ConstantAnalogRotation:\n\"\"\"Analog Y rotation.\n    Shorthand for [`AnalogRot`][qadence.operations.AnalogRot]:\n    ```python\n    \u03c6=2.4; \u03a9=\u03c0; t = \u03c6/\u03a9 * 1000\n    AnalogRot(duration=t, omega=\u03a9, phase=-\u03c0/2)\n    ```\n    Arguments:\n        angle: Rotation angle [rad]\n        qubit_support: Defines the (local/global) qubit support\n    Returns:\n        ConstantAnalogRotation\n    \"\"\"\nreturn _analog_rot(angle, qubit_support, phase=-np.pi / 2)\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.AnalogRZ","title":"<code>AnalogRZ(angle, qubit_support='global')</code>","text":"<p>Analog Z rotation. Shorthand for <code>AnalogRot</code>: <pre><code>\u03c6=2.4; \u03b4=\u03c0; t = \u03c6/\u03b4 * 100)\nAnalogRot(duration=t, delta=\u03b4, phase=\u03c0/2)\n</code></pre></p> Source code in <code>qadence/operations.py</code> <pre><code>def AnalogRZ(\nangle: float | str | Parameter,\nqubit_support: str | QubitSupport | Tuple = \"global\",\n) -&gt; ConstantAnalogRotation:\n\"\"\"Analog Z rotation. Shorthand for [`AnalogRot`][qadence.operations.AnalogRot]:\n    ```\n    \u03c6=2.4; \u03b4=\u03c0; t = \u03c6/\u03b4 * 100)\n    AnalogRot(duration=t, delta=\u03b4, phase=\u03c0/2)\n    ```\n    \"\"\"\nq = _cast(QubitSupport, qubit_support)\nalpha = _cast(Parameter, angle)\ndelta = np.pi\nduration = alpha / delta * 1000\nps = ParamMap(alpha=alpha, duration=duration, omega=0, delta=delta, phase=0.0)\nreturn ConstantAnalogRotation(qubit_support=q, parameters=ps)\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.AnalogRot","title":"<code>AnalogRot(duration=1000.0, omega=0, delta=0, phase=0, qubit_support='global')</code>","text":"<p>General analog rotation operation.</p> PARAMETER  DESCRIPTION <code>duration</code> <p>Duration of the rotation [ns].</p> <p> TYPE: <code>float | str | Parameter</code> DEFAULT: <code>1000.0</code> </p> <code>omega</code> <p>Rotation frequency [rad/\u03bcs]</p> <p> TYPE: <code>float | str | Parameter</code> DEFAULT: <code>0</code> </p> <code>delta</code> <p>Rotation frequency [rad/\u03bcs]</p> <p> TYPE: <code>float | str | Parameter</code> DEFAULT: <code>0</code> </p> <code>phase</code> <p>Phase angle [rad]</p> <p> TYPE: <code>float | str | Parameter</code> DEFAULT: <code>0</code> </p> <code>qubit_support</code> <p>Defines the (local/global) qubit support</p> <p> TYPE: <code>str | QubitSupport | Tuple</code> DEFAULT: <code>'global'</code> </p> RETURNS DESCRIPTION <code>ConstantAnalogRotation</code> <p>ConstantAnalogRotation</p> Source code in <code>qadence/operations.py</code> <pre><code>def AnalogRot(\nduration: float | str | Parameter = 1000.0,\nomega: float | str | Parameter = 0,\ndelta: float | str | Parameter = 0,\nphase: float | str | Parameter = 0,\nqubit_support: str | QubitSupport | Tuple = \"global\",\n) -&gt; ConstantAnalogRotation:\n\"\"\"General analog rotation operation.\n    Arguments:\n        duration: Duration of the rotation [ns].\n        omega: Rotation frequency [rad/\u03bcs]\n        delta: Rotation frequency [rad/\u03bcs]\n        phase: Phase angle [rad]\n        qubit_support: Defines the (local/global) qubit support\n    Returns:\n        ConstantAnalogRotation\n    \"\"\"\nq = _cast(QubitSupport, qubit_support)\nif isinstance(duration, str):\nduration = Parameter(duration)\nalpha = duration * sympy.sqrt(omega**2 + delta**2) / 1000  # type: ignore [operator]\nps = ParamMap(alpha=alpha, duration=duration, omega=omega, delta=delta, phase=phase)\nreturn ConstantAnalogRotation(parameters=ps, qubit_support=q)\n</code></pre>"},{"location":"qadence/operations/#qadence.operations.wait","title":"<code>wait(duration, qubit_support='global')</code>","text":"<p>Constructs a <code>WaitBlock</code>.</p> PARAMETER  DESCRIPTION <code>duration</code> <p>Time to wait in nanoseconds.</p> <p> TYPE: <code>TNumber | Basic</code> </p> <code>qubit_support</code> <p>Qubits the <code>WaitBlock</code> is applied to. Can be either <code>\"global\"</code> to apply the wait block to all qubits or a tuple of integers.</p> <p> TYPE: <code>str | QubitSupport | tuple</code> DEFAULT: <code>'global'</code> </p> RETURNS DESCRIPTION <code>WaitBlock</code> <p>a <code>WaitBlock</code></p> Source code in <code>qadence/operations.py</code> <pre><code>def wait(\nduration: TNumber | sympy.Basic,\nqubit_support: str | QubitSupport | tuple = \"global\",\n) -&gt; WaitBlock:\n\"\"\"Constructs a [`WaitBlock`][qadence.blocks.analog.WaitBlock].\n    Arguments:\n        duration: Time to wait in nanoseconds.\n        qubit_support: Qubits the `WaitBlock` is applied to. Can be either\n            `\"global\"` to apply the wait block to all qubits or a tuple of integers.\n    Returns:\n        a `WaitBlock`\n    \"\"\"\nq = _cast(QubitSupport, qubit_support)\nps = ParamMap(duration=duration)\nreturn WaitBlock(parameters=ps, qubit_support=q)\n</code></pre>"},{"location":"qadence/parameters/","title":"Parameters","text":""},{"location":"qadence/parameters/#parameters","title":"Parameters","text":""},{"location":"qadence/parameters/#qadence.parameters.ParamMap","title":"<code>ParamMap(**kwargs)</code>","text":"<p>Connects UUIDs of parameters to their expressions and names.</p> <p>This class is not user-facing and only needed for more complex block definitions. It provides convenient access to expressions/UUIDs/names needed in different backends.</p> PARAMETER  DESCRIPTION <code>kwargs</code> <p>Parameters.</p> <p> TYPE: <code>str | TNumber | Tensor | Basic | Parameter</code> DEFAULT: <code>{}</code> </p> <p>Example: <pre><code>import sympy\nfrom qadence.parameters import ParamMap\n(x,y) = sympy.symbols(\"x y\")\nps = ParamMap(omega=2.0, duration=x+y)\nprint(f\"{ps.names() = }\")\nprint(f\"{ps.expressions() = }\")\nprint(f\"{ps.uuids() = }\")\n</code></pre> <pre><code>ps.names() = dict_keys(['omega', 'duration'])\nps.expressions() = dict_values([2.00000000000000, x + y])\nps.uuids() = dict_keys(['f854faa2-4040-4061-8235-c50651bd65c8', '030bdf4b-db0e-41a8-ba50-fbdab39a2652'])\n</code></pre> </p> Source code in <code>qadence/parameters.py</code> <pre><code>def __init__(self, **kwargs: str | TNumber | Tensor | Basic | Parameter):\nself._name_dict: dict[str, tuple[str, Basic]] = {}\nself._uuid_dict: dict[str, str] = {}\nfor name, v in kwargs.items():\nparam = v if isinstance(v, sympy.Basic) else Parameter(v)\nuuid = str(uuid4())\nself._name_dict[name] = (uuid, param)\nself._uuid_dict[uuid] = param\n</code></pre>"},{"location":"qadence/parameters/#qadence.parameters.Parameter","title":"<code>Parameter</code>","text":"<p>             Bases: <code>Symbol</code></p> <p>A wrapper on top of <code>sympy.Symbol</code>.</p> <p>Includes two additional keywords: <code>trainable</code> and <code>value</code>. This class is to define both feature parameter and variational parameters.</p>"},{"location":"qadence/parameters/#qadence.parameters.Parameter.trainable","title":"<code>trainable: bool</code>  <code>instance-attribute</code>","text":"<p>Trainable parameters are variational parameters.</p> <p>Non-trainable parameters are feature parameters.</p>"},{"location":"qadence/parameters/#qadence.parameters.Parameter.value","title":"<code>value: TNumber</code>  <code>instance-attribute</code>","text":"<p>(Initial) value of the parameter.</p>"},{"location":"qadence/parameters/#qadence.parameters.Parameter.__new__","title":"<code>__new__(name, **assumptions)</code>","text":"<p>Arguments:</p> <pre><code>name: When given a string only, the class\n    constructs a trainable Parameter with a a randomly initialized value.\n**assumptions: are passed on to the parent class `sympy.Symbol`. Two new assumption\n    kwargs are supported by this constructor: `trainable: bool`, and `value: TNumber`.\n</code></pre> <p>Example: <pre><code>from qadence.parameters import Parameter, VariationalParameter\ntheta = Parameter(\"theta\")\nprint(f\"{theta}: trainable={theta.trainable} value={theta.value}\")\nassert not theta.is_number\n# you can specify both trainable/value in the constructor\ntheta = Parameter(\"theta\", trainable=True, value=2.0)\nprint(f\"{theta}: trainable={theta.trainable} value={theta.value}\")\n# VariationalParameter/FeatureParameter are constructing\n# trainable/untrainable Parameters\ntheta = VariationalParameter(\"theta\", value=2.0)\nassert theta == Parameter(\"theta\", trainable=True, value=2.0)\n# When provided with a numeric type, Parameter constructs a sympy numeric type\":\nconstant_zero = Parameter(0)\nassert constant_zero.is_number\n# When passed a Parameter or a sympy expression, it just returns it.\nexpr = Parameter(\"x\") * Parameter(\"y\")\nprint(f\"{expr=} : {expr.free_symbols}\")\n</code></pre> <pre><code>theta: trainable=True value=0.7043476796040012\ntheta: trainable=True value=2.0\nexpr=x*y : {y, x}\n</code></pre> </p> Source code in <code>qadence/parameters.py</code> <pre><code>def __new__(\ncls, name: str | TNumber | Tensor | Basic | Parameter, **assumptions: Any\n) -&gt; Parameter | Basic | Expr | Array:\n\"\"\"\n    Arguments:\n        name: When given a string only, the class\n            constructs a trainable Parameter with a a randomly initialized value.\n        **assumptions: are passed on to the parent class `sympy.Symbol`. Two new assumption\n            kwargs are supported by this constructor: `trainable: bool`, and `value: TNumber`.\n    Example:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.parameters import Parameter, VariationalParameter\n    theta = Parameter(\"theta\")\n    print(f\"{theta}: trainable={theta.trainable} value={theta.value}\")\n    assert not theta.is_number\n    # you can specify both trainable/value in the constructor\n    theta = Parameter(\"theta\", trainable=True, value=2.0)\n    print(f\"{theta}: trainable={theta.trainable} value={theta.value}\")\n    # VariationalParameter/FeatureParameter are constructing\n    # trainable/untrainable Parameters\n    theta = VariationalParameter(\"theta\", value=2.0)\n    assert theta == Parameter(\"theta\", trainable=True, value=2.0)\n    # When provided with a numeric type, Parameter constructs a sympy numeric type\":\n    constant_zero = Parameter(0)\n    assert constant_zero.is_number\n    # When passed a Parameter or a sympy expression, it just returns it.\n    expr = Parameter(\"x\") * Parameter(\"y\")\n    print(f\"{expr=} : {expr.free_symbols}\")\n    ```\n    \"\"\"\np: Parameter\nif isinstance(name, get_args(TNumber)):\nreturn sympify(name)\nelif isinstance(name, Tensor):\nif name.numel() == 1:\nreturn sympify(name)\nelse:\nreturn Array(name.detach().numpy())\nelif isinstance(name, Parameter):\np = super().__new__(cls, name.name, **assumptions)\np.name = name.name\np.trainable = name.trainable\np.value = name.value\nreturn p\nelif isinstance(name, (Basic, Expr)):\nif name.is_number:\nreturn sympify(evaluate(name))\nreturn name\nelif isinstance(name, str):\np = super().__new__(cls, name, **assumptions)\np.trainable = assumptions.get(\"trainable\", True)\np.value = assumptions.get(\"value\", None)\nif p.value is None:\np.value = rand(1).item()\nreturn p\nelse:\nraise TypeError(f\"Parameter does not support type {type(name)}\")\n</code></pre>"},{"location":"qadence/parameters/#qadence.parameters.FeatureParameter","title":"<code>FeatureParameter(name, **kwargs)</code>","text":"<p>Shorthand for <code>Parameter(..., trainable=False)</code>.</p> Source code in <code>qadence/parameters.py</code> <pre><code>def FeatureParameter(name: str, **kwargs: Any) -&gt; Parameter:\n\"\"\"Shorthand for `Parameter(..., trainable=False)`.\"\"\"\nreturn Parameter(name, trainable=False, **kwargs)\n</code></pre>"},{"location":"qadence/parameters/#qadence.parameters.VariationalParameter","title":"<code>VariationalParameter(name, **kwargs)</code>","text":"<p>Shorthand for <code>Parameter(..., trainable=True)</code>.</p> Source code in <code>qadence/parameters.py</code> <pre><code>def VariationalParameter(name: str, **kwargs: Any) -&gt; Parameter:\n\"\"\"Shorthand for `Parameter(..., trainable=True)`.\"\"\"\nreturn Parameter(name, trainable=True, **kwargs)\n</code></pre>"},{"location":"qadence/parameters/#qadence.parameters.evaluate","title":"<code>evaluate(expr, values={}, as_torch=False)</code>","text":"<p>Arguments:</p> <pre><code>expr: An expression consisting of Parameters.\nvalues: values dict which contains values for the Parameters,\n    if empty, Parameter.value will be used.\nas_torch: Whether to retrieve a torch-differentiable expression result.\n</code></pre> <p>Example: <pre><code>from qadence.parameters import Parameter, evaluate\nexpr = Parameter(\"x\") * Parameter(\"y\")\n# Unless specified, Parameter initialized random values\n# Lets evaluate this expression and see what the result is\nres = evaluate(expr)\nprint(res)\n# We can also evaluate the expr using a custom dict\nd = {\"x\": 1, \"y\":2}\nres = evaluate(expr, d)\nprint(res)\n# Lastly, if we want a differentiable result, lets put the as_torch flag\nres = evaluate(expr, d, as_torch=True)\nprint(res)\n</code></pre> <pre><code>0.11942186246998064\n2.0\ntensor([2])\n</code></pre> </p> Source code in <code>qadence/parameters.py</code> <pre><code>def evaluate(expr: Expr, values: dict = {}, as_torch: bool = False) -&gt; TNumber | Tensor:\n\"\"\"\n    Arguments:\n        expr: An expression consisting of Parameters.\n        values: values dict which contains values for the Parameters,\n            if empty, Parameter.value will be used.\n        as_torch: Whether to retrieve a torch-differentiable expression result.\n    Example:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.parameters import Parameter, evaluate\n    expr = Parameter(\"x\") * Parameter(\"y\")\n    # Unless specified, Parameter initialized random values\n    # Lets evaluate this expression and see what the result is\n    res = evaluate(expr)\n    print(res)\n    # We can also evaluate the expr using a custom dict\n    d = {\"x\": 1, \"y\":2}\n    res = evaluate(expr, d)\n    print(res)\n    # Lastly, if we want a differentiable result, lets put the as_torch flag\n    res = evaluate(expr, d, as_torch=True)\n    print(res)\n    ```\n    \"\"\"\nres: Basic\nres_value: TNumber | Tensor\nquery: dict[Parameter, TNumber | Tensor] = {}\nif isinstance(expr, Array):\nreturn Tensor(expr.tolist())\nelse:\nif not expr.is_number:\nfor s in expr.free_symbols:\nif s.name in values.keys():\nquery[s] = values[s.name]\nelif hasattr(s, \"value\"):\nquery[s] = s.value\nelse:\nraise ValueError(f\"No value provided for symbol {s.name}\")\nif as_torch:\nres_value = torchify(expr)(**{s.name: tensor(v) for s, v in query.items()})\nelse:\nres = expr.subs(query)\nres_value = sympy_to_numeric(res)\nreturn res_value\n</code></pre>"},{"location":"qadence/parameters/#qadence.parameters.extract_original_param_entry","title":"<code>extract_original_param_entry(param)</code>","text":"<p>Given an Expression, what was the original \"param\" given by the user? It is either.</p> <p>going to be a numeric value, or a sympy Expression (in case a string was given, it was converted via Parameter(\"string\").</p> Source code in <code>qadence/parameters.py</code> <pre><code>def extract_original_param_entry(\nparam: Expr,\n) -&gt; TNumber | Tensor | Expr:\n\"\"\"\n    Given an Expression, what was the original \"param\" given by the user? It is either.\n    going to be a numeric value, or a sympy Expression (in case a string was given,\n    it was converted via Parameter(\"string\").\n    \"\"\"\nreturn param if not param.is_number else evaluate(param)\n</code></pre>"},{"location":"qadence/parameters/#qadence.parameters.torchify","title":"<code>torchify(expr)</code>","text":"<p>Arguments:</p> <pre><code>expr: An expression consisting of Parameters.\n</code></pre> RETURNS DESCRIPTION <code>SymPyModule</code> <p>A torchified, differentiable Expression.</p> Source code in <code>qadence/parameters.py</code> <pre><code>def torchify(expr: Expr) -&gt; SymPyModule:\n\"\"\"\n    Arguments:\n        expr: An expression consisting of Parameters.\n    Returns:\n        A torchified, differentiable Expression.\n    \"\"\"\nextra_funcs = {sympy.core.numbers.ImaginaryUnit: 1.0j}\nreturn SymPyModule(expressions=[sympy.N(expr)], extra_funcs=extra_funcs)\n</code></pre>"},{"location":"qadence/parameters/#parameter-embedding","title":"Parameter embedding","text":""},{"location":"qadence/parameters/#qadence.blocks.embedding.embedding","title":"<code>embedding(block, to_gate_params=False)</code>","text":"<p>Construct embedding function.</p> <p>It maps user-facing parameters to either expression-level parameters or gate-level parameters. The construced embedding function has the signature:</p> <pre><code> embedding_fn(params: StrTensorDict, inputs: StrTensorDict) -&gt; StrTensorDict:\n</code></pre> <p>which means that it maps the variational parameter dict <code>params</code> and the feature parameter dict <code>inputs</code> to one new parameter dict <code>embedded_dict</code> which holds all parameters that are needed to execute a circuit on a given backend. There are two different modes for this mapping:</p> <ul> <li>Expression-level parameters: For AD-based optimization. For every unique expression we end   up with one entry in the embedded dict:   <code>len(embedded_dict) == len(unique_parameter_expressions)</code>.</li> <li>Gate-level parameters: For PSR-based optimization or real devices. One parameter for each   gate parameter, regardless if they are based on the same expression. <code>len(embedded_dict) ==   len(parametric_gates)</code>. This is needed because PSR requires to shift the angles of every   gate where the same parameter appears.</li> </ul> PARAMETER  DESCRIPTION <code>block</code> <p>parametrized block into which we want to embed parameters.</p> <p> TYPE: <code>AbstractBlock</code> </p> <code>to_gate_params</code> <p>A boolean flag whether to generate gate-level parameters or expression-level parameters.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>tuple[StrTensorDict, Callable[[StrTensorDict, StrTensorDict], StrTensorDict]]</code> <p>A tuple with variational parameter dict and the embedding function.</p> Source code in <code>qadence/blocks/embedding.py</code> <pre><code>def embedding(\nblock: AbstractBlock, to_gate_params: bool = False\n) -&gt; tuple[StrTensorDict, Callable[[StrTensorDict, StrTensorDict], StrTensorDict],]:\n\"\"\"Construct embedding function.\n    It maps user-facing parameters to either *expression-level*\n    parameters or *gate-level* parameters. The construced embedding function has the signature:\n         embedding_fn(params: StrTensorDict, inputs: StrTensorDict) -&gt; StrTensorDict:\n    which means that it maps the *variational* parameter dict `params` and the *feature* parameter\n    dict `inputs` to one new parameter dict `embedded_dict` which holds all parameters that are\n    needed to execute a circuit on a given backend. There are two different *modes* for this\n    mapping:\n    - *Expression-level* parameters: For AD-based optimization. For every unique expression we end\n      up with one entry in the embedded dict:\n      `len(embedded_dict) == len(unique_parameter_expressions)`.\n    - *Gate-level* parameters: For PSR-based optimization or real devices. One parameter for each\n      gate parameter, regardless if they are based on the same expression. `len(embedded_dict) ==\n      len(parametric_gates)`. This is needed because PSR requires to shift the angles of **every**\n      gate where the same parameter appears.\n    Arguments:\n        block: parametrized block into which we want to embed parameters.\n        to_gate_params: A boolean flag whether to generate gate-level parameters or\n            expression-level parameters.\n    Returns:\n        A tuple with variational parameter dict and the embedding function.\n    \"\"\"\nunique_expressions = unique(expressions(block))\nunique_symbols = [p for p in unique(parameters(block)) if not isinstance(p, sympy.Array)]\nunique_const_matrices = [e for e in unique_expressions if isinstance(e, sympy.Array)]\nunique_expressions = [e for e in unique_expressions if not isinstance(e, sympy.Array)]\n# NOTE\n# there are 3 kinds of parameters in qadence\n# - non-trainable which are considered as inputs for classical data\n# - trainable which are the variational parameters to be optimized\n# - fixed: which are non-trainable parameters with fixed value (e.g. pi/2)\n#\n# both non-trainable and trainable parameters can have the same element applied\n# to different operations in the quantum circuit, e.g. assigning the same parameter\n# to multiple gates.\nnon_numeric_symbols = [p for p in unique_symbols if not p.is_number]\ntrainable_symbols = [p for p in non_numeric_symbols if p.trainable]\nconstant_expressions = [expr for expr in unique_expressions if expr.is_number]\n# we dont need to care about constant symbols if they are contained in an symbolic expression\n# we only care about gate params which are ONLY a constant\nembeddings: dict[sympy.Expr, sympytorch.SymPyModule] = {\nexpr: torchify(expr) for expr in unique_expressions if not expr.is_number\n}\nuuid_to_expr = uuid_to_expression(block)\ndef embedding_fn(params: StrTensorDict, inputs: StrTensorDict) -&gt; StrTensorDict:\nembedded_params: dict[sympy.Expr, Tensor] = {}\nfor expr, fn in embeddings.items():\nangle: Tensor\nvalues = {}\nfor symbol in expr.free_symbols:\nif symbol.name in inputs:\nvalue = inputs[symbol.name]\nelif symbol.name in params:\nvalue = params[symbol.name]\nelse:\nmsg_trainable = \"Trainable\" if symbol.trainable else \"Non-trainable\"\nraise KeyError(\nf\"{msg_trainable} parameter '{symbol.name}' not found in the \"\nf\"inputs list: {list(inputs.keys())} nor the \"\nf\"params list: {list(params.keys())}.\"\n)\nvalues[symbol.name] = value\nangle = fn(**values)\n# do not reshape parameters which are multi-dimensional\n# tensors, such as for example generator matrices\nif not len(angle.squeeze().shape) &gt; 1:\nangle = angle.reshape(-1)\nembedded_params[expr] = angle\nfor e in constant_expressions + unique_const_matrices:\nembedded_params[e] = params[stringify(e)]\nif to_gate_params:\ngate_lvl_params: StrTensorDict = {}\nfor uuid, e in uuid_to_expr.items():\ngate_lvl_params[uuid] = embedded_params[e]\nreturn gate_lvl_params\nelse:\nreturn {stringify(k): v for k, v in embedded_params.items()}\nparams: StrTensorDict\nparams = {p.name: torch.tensor([p.value], requires_grad=True) for p in trainable_symbols}\nparams.update(\n{\nstringify(expr): torch.tensor([evaluate(expr)], requires_grad=False)\nfor expr in constant_expressions\n}\n)\nparams.update(\n{\nstringify(expr): torch.tensor(\nnp.array(expr.tolist(), dtype=np.cdouble), requires_grad=False\n)\nfor expr in unique_const_matrices\n}\n)\nreturn params, embedding_fn\n</code></pre>"},{"location":"qadence/quantumcircuit/","title":"QuantumCircuit","text":""},{"location":"qadence/quantumcircuit/#quantumcircuit","title":"QuantumCircuit","text":"<p>The abstract <code>QuantumCircuit</code> is the key object in Qadence, as it is what can be executed.</p>"},{"location":"qadence/quantumcircuit/#qadence.circuit.QuantumCircuit","title":"<code>QuantumCircuit(support, *blocks)</code>  <code>dataclass</code>","text":"<p>Am abstract QuantumCircuit instance.</p> <p>It needs to be passed to a quantum backend for execution.</p> <p>Arguments:</p> <pre><code>support: `Register` or number of qubits. If an integer is provided, a register is\n    constructed with `Register.all_to_all(x)`\n*blocks: (Possibly multiple) blocks to construct the circuit from.\n</code></pre> Source code in <code>qadence/circuit.py</code> <pre><code>def __init__(self, support: int | Register, *blocks: AbstractBlock):\n\"\"\"\n    Arguments:\n        support: `Register` or number of qubits. If an integer is provided, a register is\n            constructed with `Register.all_to_all(x)`\n        *blocks: (Possibly multiple) blocks to construct the circuit from.\n    \"\"\"\nself.block = chain(*blocks) if len(blocks) != 1 else blocks[0]\nself.register = Register(support) if isinstance(support, int) else support\nglobal_block = isinstance(self.block, AnalogBlock) and self.block.qubit_support.is_global\nif not global_block and len(self.block) and self.block.n_qubits &gt; self.register.n_qubits:\nraise ValueError(\nf\"Register with {self.register.n_qubits} qubits is too small for the \"\nf\"given block with {self.block.n_qubits} qubits\"\n)\n</code></pre>"},{"location":"qadence/quantumcircuit/#qadence.circuit.QuantumCircuit.unique_parameters","title":"<code>unique_parameters: list[Parameter]</code>  <code>property</code>","text":"<p>Return the unique parameters in the circuit.</p> <p>These parameters are the actual user-facing parameters which can be assigned by the user. Multiple gates can contain the same unique parameter</p> RETURNS DESCRIPTION <code>list[Parameter]</code> <p>list[Parameter]: List of unique parameters in the circuit</p>"},{"location":"qadence/quantumcircuit/#qadence.circuit.QuantumCircuit.dagger","title":"<code>dagger()</code>","text":"<p>Reverse the QuantumCircuit by calling dagger on the block.</p> Source code in <code>qadence/circuit.py</code> <pre><code>def dagger(self) -&gt; QuantumCircuit:\n\"\"\"Reverse the QuantumCircuit by calling dagger on the block.\"\"\"\nreturn QuantumCircuit(self.n_qubits, self.block.dagger())\n</code></pre>"},{"location":"qadence/quantumcircuit/#qadence.circuit.QuantumCircuit.get_blocks_by_tag","title":"<code>get_blocks_by_tag(tag)</code>","text":"<p>Extract one or more blocks using the human-readable tag.</p> <p>This function recursively explores all composite blocks to find all the occurrences of a certain tag in the blocks.</p> PARAMETER  DESCRIPTION <code>tag</code> <p>the tag to look for</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>list[AbstractBlock]</code> <p>list[AbstractBlock]: The block(s) corresponding to the given tag</p> Source code in <code>qadence/circuit.py</code> <pre><code>def get_blocks_by_tag(self, tag: str) -&gt; list[AbstractBlock]:\n\"\"\"Extract one or more blocks using the human-readable tag.\n    This function recursively explores all composite blocks to find\n    all the occurrences of a certain tag in the blocks.\n    Args:\n        tag (str): the tag to look for\n    Returns:\n        list[AbstractBlock]: The block(s) corresponding to the given tag\n    \"\"\"\ndef _get_block(block: AbstractBlock) -&gt; list[AbstractBlock]:\nblocks = []\nif block.tag == tag:\nblocks += [block]\nif isinstance(block, CompositeBlock):\nblocks += flatten(*[_get_block(b) for b in block.blocks])\nreturn blocks\nreturn _get_block(self.block)\n</code></pre>"},{"location":"qadence/quantumcircuit/#qadence.circuit.QuantumCircuit.parameters","title":"<code>parameters()</code>","text":"<p>Extract all parameters for primitive blocks in the circuit.</p> <p>Notice that this function returns all the unique Parameters used in the quantum circuit. These can correspond to constants too.</p> RETURNS DESCRIPTION <code>list[Parameter | Basic] | list[tuple[Parameter | Basic, ...]]</code> <p>List[tuple[Parameter]]: A list of tuples containing the Parameter</p> <code>list[Parameter | Basic] | list[tuple[Parameter | Basic, ...]]</code> <p>instance of each of the primitive blocks in the circuit or, if the <code>flatten</code></p> <code>list[Parameter | Basic] | list[tuple[Parameter | Basic, ...]]</code> <p>flag is set to True, a flattened list of all circuit parameters</p> Source code in <code>qadence/circuit.py</code> <pre><code>def parameters(self) -&gt; list[Parameter | Basic] | list[tuple[Parameter | Basic, ...]]:\n\"\"\"Extract all parameters for primitive blocks in the circuit.\n    Notice that this function returns all the unique Parameters used\n    in the quantum circuit. These can correspond to constants too.\n    Returns:\n        List[tuple[Parameter]]: A list of tuples containing the Parameter\n        instance of each of the primitive blocks in the circuit or, if the `flatten`\n        flag is set to True, a flattened list of all circuit parameters\n    \"\"\"\nreturn parameters(self.block)\n</code></pre>"},{"location":"qadence/register/","title":"Register","text":""},{"location":"qadence/register/#quantum-registers","title":"Quantum Registers","text":""},{"location":"qadence/register/#qadence.register.Register","title":"<code>Register(support, spacing=1.0)</code>","text":"<p>A 2D register of qubits which includes their coordinates.</p> <p>It is needed for e.g. analog computing. The coordinates are ignored in backends that don't need them. The easiest way to construct a register is via its classmethods like <code>Register.triangular_lattice</code>.</p> PARAMETER  DESCRIPTION <code>support</code> <p>A graph or number of qubits. Nodes can include a <code>\"pos\"</code> attribute such that e.g.: <code>graph.nodes = {0: {\"pos\": (2,3)}, 1: {\"pos\": (0,0)}, ...}</code> which will be used in backends that need qubit coordinates. See the classmethods for simple construction of some predefined lattices if you don't want to build a graph manually. If you pass an integer the resulting register is the same as <code>Register.all_to_all(n_qubits)</code>.</p> <p> TYPE: <code>Graph | int</code> </p> <code>spacing</code> <p>Value set as the distance between the two closest qubits.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>1.0</code> </p> <p>Examples: <pre><code>from qadence import Register\nreg = Register.honeycomb_lattice(2,3)\nreg.draw()\n</code></pre> <pre><code>\n</code></pre> </p> Source code in <code>qadence/register.py</code> <pre><code>def __init__(self, support: nx.Graph | int, spacing: float | None = 1.0):\n\"\"\"A 2D register of qubits which includes their coordinates.\n    It is needed for e.g. analog computing.\n    The coordinates are ignored in backends that don't need them. The easiest\n    way to construct a register is via its classmethods like `Register.triangular_lattice`.\n    Arguments:\n        support: A graph or number of qubits. Nodes can include a `\"pos\"` attribute\n            such that e.g.: `graph.nodes = {0: {\"pos\": (2,3)}, 1: {\"pos\": (0,0)}, ...}` which\n            will be used in backends that need qubit coordinates.\n            See the classmethods for simple construction of some predefined lattices if you\n            don't want to build a graph manually.\n            If you pass an integer the resulting register is the same as\n            `Register.all_to_all(n_qubits)`.\n        spacing: Value set as the distance between the two closest qubits.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence import Register\n    reg = Register.honeycomb_lattice(2,3)\n    reg.draw()\n    ```\n    \"\"\"\nself.graph = support if isinstance(support, nx.Graph) else alltoall_graph(support)\n# Auxiliary complete graph\nsupport = self.graph.nodes\nall_edges = list(filter(lambda x: x[0] &lt; x[1], product(support, support)))\nself.complete_graph = nx.Graph()\nself.complete_graph.add_nodes_from(support)\nself.complete_graph.add_edges_from(all_edges)\nif spacing is not None and self.min_distance != 0.0:\n_scale_node_positions(self.graph, self.min_distance, spacing)\npos_values = nx.get_node_attributes(self.graph, \"pos\")\nnx.set_node_attributes(self.complete_graph, pos_values, \"pos\")\n</code></pre>"},{"location":"qadence/register/#qadence.register.line_graph","title":"<code>line_graph(n_qubits)</code>","text":"<p>Create graph representing linear lattice.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>number of nodes in the graph</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>Graph</code> <p>graph instance</p> Source code in <code>qadence/register.py</code> <pre><code>def line_graph(n_qubits: int) -&gt; nx.Graph:\n\"\"\"Create graph representing linear lattice.\n    Args:\n        n_qubits (int): number of nodes in the graph\n    Returns:\n        graph instance\n    \"\"\"\ngraph = nx.Graph()\nfor i in range(n_qubits):\ngraph.add_node(i, pos=(i, 0.0))\nfor i, j in zip(range(n_qubits - 1), range(1, n_qubits)):\ngraph.add_edge(i, j)\nreturn graph\n</code></pre>"},{"location":"qadence/serialization/","title":"Serialization","text":""},{"location":"qadence/serialization/#serialization","title":"Serialization","text":""},{"location":"qadence/serialization/#qadence.serialization.deserialize","title":"<code>deserialize(d, as_torch=False)</code>","text":"<p>Supported Types:</p> <p>AbstractBlock | QuantumCircuit | QuantumModel | TransformedModule | Register | Module Deserializes a dict to one of the supported types.</p> PARAMETER  DESCRIPTION <code>d</code> <p>A dict containing a serialized object.</p> <p> TYPE: <code>dict</code> </p> <p>Returns:     AbstractBlock, QuantumCircuit, QuantumModel, TransformedModule, Register, Module.</p> <p>Examples: <pre><code>import torch\nfrom qadence import serialize, deserialize, hea, hamiltonian_factory, Z\nfrom qadence import QuantumCircuit, QuantumModel\nn_qubits = 2\nmyblock = hea(n_qubits=n_qubits, depth=1)\nblock_dict = serialize(myblock)\nprint(block_dict)\n## Lets use myblock in a QuantumCircuit and serialize it.\nqc = QuantumCircuit(n_qubits, myblock)\nqc_dict = serialize(qc)\nqc_deserialized = deserialize(qc_dict)\nassert qc == qc_deserialized\n## Finally, let's wrap it in a QuantumModel\nobs = hamiltonian_factory(n_qubits, detuning = Z)\nqm = QuantumModel(qc, obs, backend='pyqtorch', diff_mode='ad')\nqm_dict = serialize(qm)\nqm_deserialized = deserialize(qm_dict)\n# Lets check if the loaded QuantumModel returns the same expectation\nassert torch.isclose(qm.expectation({}), qm_deserialized.expectation({}))\n</code></pre> <pre><code>{'type': 'ChainBlock', 'qubit_support': (0, 1), 'tag': 'HEA', 'blocks': [{'type': 'ChainBlock', 'qubit_support': (0, 1), 'tag': None, 'blocks': [{'type': 'KronBlock', 'qubit_support': (0, 1), 'tag': None, 'blocks': [{'type': 'RX', 'qubit_support': (0,), 'tag': None, 'parameters': {'_name_dict': {'parameter': ('c84b5dec-8787-46e7-b14c-ddb0be4a8181', {'name': 'theta_0', 'expression': \"Parameter('theta_0')\", 'symbols': {'theta_0': {'name': 'theta_0', 'trainable': 'True', 'value': '0.789175520652516'}}})}}}, {'type': 'RX', 'qubit_support': (1,), 'tag': None, 'parameters': {'_name_dict': {'parameter': ('17e021e5-da4a-4e3c-ab1f-eeafed5b74a1', {'name': 'theta_1', 'expression': \"Parameter('theta_1')\", 'symbols': {'theta_1': {'name': 'theta_1', 'trainable': 'True', 'value': '0.41066690020480434'}}})}}}]}, {'type': 'KronBlock', 'qubit_support': (0, 1), 'tag': None, 'blocks': [{'type': 'RY', 'qubit_support': (0,), 'tag': None, 'parameters': {'_name_dict': {'parameter': ('410efbea-80a5-4896-8ee5-fa56f261985e', {'name': 'theta_2', 'expression': \"Parameter('theta_2')\", 'symbols': {'theta_2': {'name': 'theta_2', 'trainable': 'True', 'value': '0.7262773469971591'}}})}}}, {'type': 'RY', 'qubit_support': (1,), 'tag': None, 'parameters': {'_name_dict': {'parameter': ('6eb267da-eade-4288-8f22-a744f2b0336b', {'name': 'theta_3', 'expression': \"Parameter('theta_3')\", 'symbols': {'theta_3': {'name': 'theta_3', 'trainable': 'True', 'value': '0.9592730319839947'}}})}}}]}, {'type': 'KronBlock', 'qubit_support': (0, 1), 'tag': None, 'blocks': [{'type': 'RX', 'qubit_support': (0,), 'tag': None, 'parameters': {'_name_dict': {'parameter': ('2e1b6952-a346-4ebc-931f-d0ea32dcfad6', {'name': 'theta_4', 'expression': \"Parameter('theta_4')\", 'symbols': {'theta_4': {'name': 'theta_4', 'trainable': 'True', 'value': '0.29853362350562773'}}})}}}, {'type': 'RX', 'qubit_support': (1,), 'tag': None, 'parameters': {'_name_dict': {'parameter': ('29c59046-81b0-4f8b-bac1-5549a2d53eca', {'name': 'theta_5', 'expression': \"Parameter('theta_5')\", 'symbols': {'theta_5': {'name': 'theta_5', 'trainable': 'True', 'value': '0.8358036266838368'}}})}}}]}]}, {'type': 'ChainBlock', 'qubit_support': (0, 1), 'tag': None, 'blocks': [{'type': 'KronBlock', 'qubit_support': (0, 1), 'tag': None, 'blocks': [{'type': 'CNOT', 'qubit_support': (0, 1), 'tag': None, 'blocks': [{'type': 'X', 'qubit_support': (1,), 'tag': None}]}]}]}]}\n</code></pre> </p> Source code in <code>qadence/serialization.py</code> <pre><code>def deserialize(d: dict, as_torch: bool = False) -&gt; SUPPORTED_TYPES:\n\"\"\"\n    Supported Types:\n    AbstractBlock | QuantumCircuit | QuantumModel | TransformedModule | Register | Module\n    Deserializes a dict to one of the supported types.\n    Arguments:\n        d (dict): A dict containing a serialized object.\n    Returns:\n        AbstractBlock, QuantumCircuit, QuantumModel, TransformedModule, Register, Module.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    import torch\n    from qadence import serialize, deserialize, hea, hamiltonian_factory, Z\n    from qadence import QuantumCircuit, QuantumModel\n    n_qubits = 2\n    myblock = hea(n_qubits=n_qubits, depth=1)\n    block_dict = serialize(myblock)\n    print(block_dict)\n    ## Lets use myblock in a QuantumCircuit and serialize it.\n    qc = QuantumCircuit(n_qubits, myblock)\n    qc_dict = serialize(qc)\n    qc_deserialized = deserialize(qc_dict)\n    assert qc == qc_deserialized\n    ## Finally, let's wrap it in a QuantumModel\n    obs = hamiltonian_factory(n_qubits, detuning = Z)\n    qm = QuantumModel(qc, obs, backend='pyqtorch', diff_mode='ad')\n    qm_dict = serialize(qm)\n    qm_deserialized = deserialize(qm_dict)\n    # Lets check if the loaded QuantumModel returns the same expectation\n    assert torch.isclose(qm.expectation({}), qm_deserialized.expectation({}))\n    ```\n    \"\"\"\nobj: Any\nif d.get(\"expression\"):\nexpr = eval(d[\"expression\"])\nif hasattr(expr, \"free_symbols\"):\nfor symb in expr.free_symbols:\nsymb.value = float(d[\"symbols\"][symb.name][\"value\"])\nobj = expr\nelif d.get(\"QuantumModel\"):\nobj = QuantumModel._from_dict(d, as_torch)\nelif d.get(\"QNN\"):\nobj = QNN._from_dict(d, as_torch)\nelif d.get(\"TransformedModule\"):\nobj = TransformedModule._from_dict(d, as_torch)\nelif d.get(\"block\") and d.get(\"register\"):\nobj = QuantumCircuit._from_dict(d)\nelif d.get(\"graph\"):\nobj = Register._from_dict(d)\nelif d.get(\"type\"):\nif d[\"type\"] in ALL_BLOCK_NAMES:\nblock: AbstractBlock = (\ngetattr(operations, d[\"type\"])._from_dict(d)\nif hasattr(operations, d[\"type\"])\nelse getattr(qadenceblocks, d[\"type\"])._from_dict(d)\n)\nif d[\"tag\"] is not None:\nblock = tag(block, d[\"tag\"])\nobj = block\nelse:\nimport warnings\nmsg = warnings.warn(\n\"In order to load a custom torch.nn.Module, make sure its imported in the namespace.\"\n)\ntry:\nmodule_name = list(d.keys())[0]\nobj = getattr(globals(), module_name)\nobj.load_state_dict(d[module_name])\nexcept Exception as e:\nlogger.error(\nTypeError(\nf\"{msg}. Unable to deserialize object due to {e}.\\\n                    Supported objects are: {SUPPORTED_OBJECTS}\"\n)\n)\nreturn obj\n</code></pre>"},{"location":"qadence/serialization/#qadence.serialization.load","title":"<code>load(file_path, map_location='cpu')</code>","text":"<p>Same as serialize/deserialize but for storing/loading files.</p> <p>Supported types: AbstractBlock | QuantumCircuit | QuantumModel | TransformedModule | Register Loads a .json or .pt file to one of the supported types.</p> PARAMETER  DESCRIPTION <code>file_path</code> <p>The name of the file.</p> <p> TYPE: <code>str</code> </p> <code>map_location</code> <p>In case of a .pt file, on which device to load the object (cpu,cuda).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'cpu'</code> </p> <p>Returns:     A object of type AbstractBlock, QuantumCircuit, QuantumModel, TransformedModule, Register.</p> <p>Examples: <pre><code>import torch\nfrom pathlib import Path\nimport os\nfrom qadence import save, load, hea, hamiltonian_factory, Z\nfrom qadence import QuantumCircuit, QuantumModel\nn_qubits = 2\nmyblock = hea(n_qubits=n_qubits, depth=1)\nqc = QuantumCircuit(n_qubits, myblock)\n# Lets store the circuit in a json file\nsave(qc, '.', 'circ')\nloaded_qc = load(Path('circ.json'))\nqc == loaded_qc\nos.remove('circ.json')\n## Let's wrap it in a QuantumModel and store that\nobs = hamiltonian_factory(n_qubits, detuning = Z)\nqm = QuantumModel(qc, obs, backend='pyqtorch', diff_mode='ad')\nsave(qm, folder= '.',file_name= 'quantum_model')\nqm_loaded = load('quantum_model.json')\nos.remove('quantum_model.json')\n</code></pre> <pre><code>\n</code></pre> </p> Source code in <code>qadence/serialization.py</code> <pre><code>def load(file_path: str | Path, map_location: str = \"cpu\") -&gt; SUPPORTED_TYPES:\n\"\"\"\n    Same as serialize/deserialize but for storing/loading files.\n    Supported types: AbstractBlock | QuantumCircuit | QuantumModel | TransformedModule | Register\n    Loads a .json or .pt file to one of the supported types.\n    Arguments:\n        file_path (str): The name of the file.\n        map_location (str): In case of a .pt file, on which device to load the object (cpu,cuda).\n    Returns:\n        A object of type AbstractBlock, QuantumCircuit, QuantumModel, TransformedModule, Register.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    import torch\n    from pathlib import Path\n    import os\n    from qadence import save, load, hea, hamiltonian_factory, Z\n    from qadence import QuantumCircuit, QuantumModel\n    n_qubits = 2\n    myblock = hea(n_qubits=n_qubits, depth=1)\n    qc = QuantumCircuit(n_qubits, myblock)\n    # Lets store the circuit in a json file\n    save(qc, '.', 'circ')\n    loaded_qc = load(Path('circ.json'))\n    qc == loaded_qc\n    os.remove('circ.json')\n    ## Let's wrap it in a QuantumModel and store that\n    obs = hamiltonian_factory(n_qubits, detuning = Z)\n    qm = QuantumModel(qc, obs, backend='pyqtorch', diff_mode='ad')\n    save(qm, folder= '.',file_name= 'quantum_model')\n    qm_loaded = load('quantum_model.json')\n    os.remove('quantum_model.json')\n    ```\n    \"\"\"\nd = {}\nif isinstance(file_path, str):\nfile_path = Path(file_path)\nif not os.path.exists(file_path):\nlogger.error(f\"File {file_path} not found.\")\nraise FileNotFoundError\nFORMAT = file_extension(file_path)\n_, _, load_fn, _ = FORMAT_DICT[FORMAT]  # type: ignore[index]\ntry:\nd = load_fn(file_path, map_location)\nlogger.debug(f\"Successfully loaded {d} from {file_path}.\")\nexcept Exception as e:\nlogger.error(f\"Unable to load Object from {file_path} due to {e}\")\nreturn deserialize(d)\n</code></pre>"},{"location":"qadence/serialization/#qadence.serialization.save","title":"<code>save(obj, folder, file_name='', format=SerializationFormat.JSON)</code>","text":"<p>Same as serialize/deserialize but for storing/loading files.</p> <p>Supported types: AbstractBlock | QuantumCircuit | QuantumModel | TransformedModule | Register | torch.nn.Module Saves a qadence object to a json/.pt.</p> PARAMETER  DESCRIPTION <code>obj</code> <pre><code>Either AbstractBlock, QuantumCircuit, QuantumModel, TransformedModule, Register.\n</code></pre> <p> TYPE: <code>AbstractBlock | QuantumCircuit | QuantumModel | Register</code> </p> <code>file_name</code> <p>The name of the file.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>format</code> <p>The type of file to save.</p> <p> TYPE: <code>str</code> DEFAULT: <code>JSON</code> </p> <p>Returns:     None.</p> <p>Examples: <pre><code>import torch\nfrom pathlib import Path\nimport os\nfrom qadence import save, load, hea, hamiltonian_factory, Z\nfrom qadence import QuantumCircuit, QuantumModel\nn_qubits = 2\nmyblock = hea(n_qubits=n_qubits, depth=1)\nqc = QuantumCircuit(n_qubits, myblock)\n# Lets store the circuit in a json file\nsave(qc, '.', 'circ')\nloaded_qc = load(Path('circ.json'))\nqc == loaded_qc\nos.remove('circ.json')\n## Let's wrap it in a QuantumModel and store that\nobs = hamiltonian_factory(n_qubits, detuning = Z)\nqm = QuantumModel(qc, obs, backend='pyqtorch', diff_mode='ad')\nsave(qm, folder= '.',file_name= 'quantum_model')\nqm_loaded = load('quantum_model.json')\nos.remove('quantum_model.json')\n</code></pre> <pre><code>\n</code></pre> </p> Source code in <code>qadence/serialization.py</code> <pre><code>def save(\nobj: SUPPORTED_TYPES,\nfolder: str | Path,\nfile_name: str = \"\",\nformat: SerializationFormat = SerializationFormat.JSON,\n) -&gt; None:\n\"\"\"\n    Same as serialize/deserialize but for storing/loading files.\n    Supported types:\n    AbstractBlock | QuantumCircuit | QuantumModel | TransformedModule | Register | torch.nn.Module\n    Saves a qadence object to a json/.pt.\n    Arguments:\n        obj (AbstractBlock | QuantumCircuit | QuantumModel | Register):\n                Either AbstractBlock, QuantumCircuit, QuantumModel, TransformedModule, Register.\n        file_name (str): The name of the file.\n        format (str): The type of file to save.\n    Returns:\n        None.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    import torch\n    from pathlib import Path\n    import os\n    from qadence import save, load, hea, hamiltonian_factory, Z\n    from qadence import QuantumCircuit, QuantumModel\n    n_qubits = 2\n    myblock = hea(n_qubits=n_qubits, depth=1)\n    qc = QuantumCircuit(n_qubits, myblock)\n    # Lets store the circuit in a json file\n    save(qc, '.', 'circ')\n    loaded_qc = load(Path('circ.json'))\n    qc == loaded_qc\n    os.remove('circ.json')\n    ## Let's wrap it in a QuantumModel and store that\n    obs = hamiltonian_factory(n_qubits, detuning = Z)\n    qm = QuantumModel(qc, obs, backend='pyqtorch', diff_mode='ad')\n    save(qm, folder= '.',file_name= 'quantum_model')\n    qm_loaded = load('quantum_model.json')\n    os.remove('quantum_model.json')\n    ```\n    \"\"\"\nif not isinstance(obj, get_args(SUPPORTED_TYPES)):\nlogger.error(f\"Serialization of object type {type(obj)} not supported.\")\nfolder = Path(folder)\nif not folder.is_dir():\nlogger.error(NotADirectoryError)\nif file_name == \"\":\nfile_name = type(obj).__name__\ntry:\nsuffix, save_fn, _, save_params = FORMAT_DICT[format]\nd = serialize(obj, save_params)\nfile_path = folder / Path(file_name + suffix)\nsave_fn(d, file_path)\nlogger.debug(f\"Successfully saved {obj} from to {folder}.\")\nexcept Exception as e:\nlogger.error(f\"Unable to write {type(obj)} to disk due to {e}\")\n</code></pre>"},{"location":"qadence/serialization/#qadence.serialization.serialize","title":"<code>serialize(obj, save_params=False)</code>","text":"<p>Supported Types:</p> <p>AbstractBlock | QuantumCircuit | QuantumModel | TransformedModule | Register | Module Serializes a qadence object to a dictionary.</p> PARAMETER  DESCRIPTION <code>obj</code> <p> TYPE: <code>AbstractBlock | QuantumCircuit | QuantumModel | Register | Module</code> </p> <p>Returns:     A dict.</p> <p>Examples: <pre><code>import torch\nfrom qadence import serialize, deserialize, hea, hamiltonian_factory, Z\nfrom qadence import QuantumCircuit, QuantumModel\nn_qubits = 2\nmyblock = hea(n_qubits=n_qubits, depth=1)\nblock_dict = serialize(myblock)\nprint(block_dict)\n## Lets use myblock in a QuantumCircuit and serialize it.\nqc = QuantumCircuit(n_qubits, myblock)\nqc_dict = serialize(qc)\nqc_deserialized = deserialize(qc_dict)\nassert qc == qc_deserialized\n## Finally, let's wrap it in a QuantumModel\nobs = hamiltonian_factory(n_qubits, detuning = Z)\nqm = QuantumModel(qc, obs, backend='pyqtorch', diff_mode='ad')\nqm_dict = serialize(qm)\nqm_deserialized = deserialize(qm_dict)\n# Lets check if the loaded QuantumModel returns the same expectation\nassert torch.isclose(qm.expectation({}), qm_deserialized.expectation({}))\n</code></pre> <pre><code>{'type': 'ChainBlock', 'qubit_support': (0, 1), 'tag': 'HEA', 'blocks': [{'type': 'ChainBlock', 'qubit_support': (0, 1), 'tag': None, 'blocks': [{'type': 'KronBlock', 'qubit_support': (0, 1), 'tag': None, 'blocks': [{'type': 'RX', 'qubit_support': (0,), 'tag': None, 'parameters': {'_name_dict': {'parameter': ('f7c9743e-72a0-4a37-9dd9-8ffd5bfc66ca', {'name': 'theta_0', 'expression': \"Parameter('theta_0')\", 'symbols': {'theta_0': {'name': 'theta_0', 'trainable': 'True', 'value': '0.39070750051343706'}}})}}}, {'type': 'RX', 'qubit_support': (1,), 'tag': None, 'parameters': {'_name_dict': {'parameter': ('72f692f6-036e-41d5-88de-a483eab20f2f', {'name': 'theta_1', 'expression': \"Parameter('theta_1')\", 'symbols': {'theta_1': {'name': 'theta_1', 'trainable': 'True', 'value': '0.41850047742945184'}}})}}}]}, {'type': 'KronBlock', 'qubit_support': (0, 1), 'tag': None, 'blocks': [{'type': 'RY', 'qubit_support': (0,), 'tag': None, 'parameters': {'_name_dict': {'parameter': ('6b4b51e5-0086-4f6b-845d-53392295599b', {'name': 'theta_2', 'expression': \"Parameter('theta_2')\", 'symbols': {'theta_2': {'name': 'theta_2', 'trainable': 'True', 'value': '0.9575646045718003'}}})}}}, {'type': 'RY', 'qubit_support': (1,), 'tag': None, 'parameters': {'_name_dict': {'parameter': ('802a0cd0-2da6-4f02-bd25-31b7bdaa18c5', {'name': 'theta_3', 'expression': \"Parameter('theta_3')\", 'symbols': {'theta_3': {'name': 'theta_3', 'trainable': 'True', 'value': '0.04088597391021753'}}})}}}]}, {'type': 'KronBlock', 'qubit_support': (0, 1), 'tag': None, 'blocks': [{'type': 'RX', 'qubit_support': (0,), 'tag': None, 'parameters': {'_name_dict': {'parameter': ('2e15d217-7956-403f-92bf-f66d251755bd', {'name': 'theta_4', 'expression': \"Parameter('theta_4')\", 'symbols': {'theta_4': {'name': 'theta_4', 'trainable': 'True', 'value': '0.8270642740051448'}}})}}}, {'type': 'RX', 'qubit_support': (1,), 'tag': None, 'parameters': {'_name_dict': {'parameter': ('722855c0-7d9a-4d7b-9a27-b56fc803d192', {'name': 'theta_5', 'expression': \"Parameter('theta_5')\", 'symbols': {'theta_5': {'name': 'theta_5', 'trainable': 'True', 'value': '0.8746260993314904'}}})}}}]}]}, {'type': 'ChainBlock', 'qubit_support': (0, 1), 'tag': None, 'blocks': [{'type': 'KronBlock', 'qubit_support': (0, 1), 'tag': None, 'blocks': [{'type': 'CNOT', 'qubit_support': (0, 1), 'tag': None, 'blocks': [{'type': 'X', 'qubit_support': (1,), 'tag': None}]}]}]}]}\n</code></pre> </p> Source code in <code>qadence/serialization.py</code> <pre><code>def serialize(obj: SUPPORTED_TYPES, save_params: bool = False) -&gt; dict:\n\"\"\"\n    Supported Types:\n    AbstractBlock | QuantumCircuit | QuantumModel | TransformedModule | Register | Module\n    Serializes a qadence object to a dictionary.\n    Arguments:\n        obj (AbstractBlock | QuantumCircuit | QuantumModel | Register | Module):\n    Returns:\n        A dict.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    import torch\n    from qadence import serialize, deserialize, hea, hamiltonian_factory, Z\n    from qadence import QuantumCircuit, QuantumModel\n    n_qubits = 2\n    myblock = hea(n_qubits=n_qubits, depth=1)\n    block_dict = serialize(myblock)\n    print(block_dict)\n    ## Lets use myblock in a QuantumCircuit and serialize it.\n    qc = QuantumCircuit(n_qubits, myblock)\n    qc_dict = serialize(qc)\n    qc_deserialized = deserialize(qc_dict)\n    assert qc == qc_deserialized\n    ## Finally, let's wrap it in a QuantumModel\n    obs = hamiltonian_factory(n_qubits, detuning = Z)\n    qm = QuantumModel(qc, obs, backend='pyqtorch', diff_mode='ad')\n    qm_dict = serialize(qm)\n    qm_deserialized = deserialize(qm_dict)\n    # Lets check if the loaded QuantumModel returns the same expectation\n    assert torch.isclose(qm.expectation({}), qm_deserialized.expectation({}))\n    ```\n    \"\"\"\nif not isinstance(obj, get_args(SUPPORTED_TYPES)):\nlogger.error(TypeError(f\"Serialization of object type {type(obj)} not supported.\"))\nd: dict = {}\ntry:\nif isinstance(obj, Expr):\nsymb_dict = {}\nexpr_dict = {\"name\": str(obj), \"expression\": srepr(obj)}\nsymbs: set[Parameter | Basic] = obj.free_symbols\nif symbs:\nsymb_dict = {\"symbols\": {str(s): s._to_dict() for s in symbs}}\nd = {**expr_dict, **symb_dict}\nelif isinstance(obj, (QuantumModel, QNN, TransformedModule)):\nd = obj._to_dict(save_params)\nelif isinstance(obj, torch.nn.Module):\nd = {type(obj).__name__: obj.state_dict()}\nelse:\nd = obj._to_dict()\nexcept Exception as e:\nlogger.error(f\"Serialization of object {obj} failed due to {e}\")\nreturn d\n</code></pre>"},{"location":"qadence/states/","title":"State preparation","text":""},{"location":"qadence/states/#state-preparation-routines","title":"State Preparation Routines","text":""},{"location":"qadence/states/#qadence.states.ghz_block","title":"<code>ghz_block(n_qubits)</code>","text":"<p>Generates the abstract ghz state for a specified number of qubits.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>The number of qubits.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>ChainBlock</code> <p>A ChainBlock representing the GHZ state.</p> <p>Examples: <pre><code>from qadence.states import ghz_block\nblock = ghz_block(n_qubits=2)\nprint(block)\n</code></pre> <pre><code>ChainBlock(0,1)\n\u251c\u2500\u2500 H(0)\n\u2514\u2500\u2500 ChainBlock(0,1)\n\u2514\u2500\u2500 CNOT(0, 1)\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def ghz_block(n_qubits: int) -&gt; ChainBlock:\n\"\"\"\n    Generates the abstract ghz state for a specified number of qubits.\n    Arguments:\n        n_qubits (int): The number of qubits.\n    Returns:\n        A ChainBlock representing the GHZ state.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import ghz_block\n    block = ghz_block(n_qubits=2)\n    print(block)\n    ```\n    \"\"\"\ncnots = chain(CNOT(i - 1, i) for i in range(1, n_qubits))\nreturn chain(H(0), cnots)\n</code></pre>"},{"location":"qadence/states/#qadence.states.ghz_state","title":"<code>ghz_state(n_qubits, batch_size=1)</code>","text":"<p>Creates a GHZ state.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>The number of qubits.</p> <p> TYPE: <code>int</code> </p> <code>batch_size</code> <p>How many bitstrings to use.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>A torch.Tensor.</p> <p>Examples: <pre><code>from qadence.states import ghz_state\nprint(ghz_state(n_qubits=2, batch_size=2))\n</code></pre> <pre><code>tensor([[0.7071+0.j, 0.0000+0.j, 0.0000+0.j, 0.7071+0.j],\n[0.7071+0.j, 0.0000+0.j, 0.0000+0.j, 0.7071+0.j]])\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def ghz_state(n_qubits: int, batch_size: int = 1) -&gt; Tensor:\n\"\"\"\n    Creates a GHZ state.\n    Arguments:\n        n_qubits (int): The number of qubits.\n        batch_size (int): How many bitstrings to use.\n    Returns:\n        A torch.Tensor.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import ghz_state\n    print(ghz_state(n_qubits=2, batch_size=2))\n    ```\n    \"\"\"\nnorm = 1 / torch.sqrt(torch.tensor(2))\nreturn norm * (zero_state(n_qubits, batch_size) + one_state(n_qubits, batch_size))\n</code></pre>"},{"location":"qadence/states/#qadence.states.is_normalized","title":"<code>is_normalized(wf, atol=NORMALIZATION_ATOL)</code>","text":"<p>Checks if a wave function is normalized.</p> PARAMETER  DESCRIPTION <code>wf</code> <p>The wave function as a torch tensor.</p> <p> TYPE: <code>Tensor</code> </p> <code>atol</code> <p>The tolerance.</p> <p> TYPE: <code>float) </code> DEFAULT: <code>NORMALIZATION_ATOL</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>A bool.</p> <p>Examples: <pre><code>from qadence.states import uniform_state, is_normalized\nprint(is_normalized(uniform_state(2)))\n</code></pre> <pre><code>True\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def is_normalized(wf: Tensor, atol: float = NORMALIZATION_ATOL) -&gt; bool:\n\"\"\"\n    Checks if a wave function is normalized.\n    Arguments:\n        wf (torch.Tensor): The wave function as a torch tensor.\n        atol (float) : The tolerance.\n    Returns:\n        A bool.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import uniform_state, is_normalized\n    print(is_normalized(uniform_state(2)))\n    ```\n    \"\"\"\nif wf.dim() == 1:\nwf = wf.unsqueeze(0)\nsum_probs: Tensor = (wf.abs() ** 2).sum(dim=1)\nones = torch.ones_like(sum_probs)\nreturn torch.allclose(sum_probs, ones, rtol=0.0, atol=atol)  # type: ignore[no-any-return]\n</code></pre>"},{"location":"qadence/states/#qadence.states.normalize","title":"<code>normalize(wf)</code>","text":"<p>Normalizes a wavefunction or batch of wave functions.</p> PARAMETER  DESCRIPTION <code>wf</code> <p>Normalized wavefunctions.</p> <p> TYPE: <code>Tensor</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>A torch.Tensor.</p> <p>Examples: <pre><code>from qadence.states import uniform_state, normalize\nprint(normalize(uniform_state(2, 2)))\n</code></pre> <pre><code>tensor([[0.5000+0.j, 0.5000+0.j, 0.5000+0.j, 0.5000+0.j],\n[0.5000+0.j, 0.5000+0.j, 0.5000+0.j, 0.5000+0.j]])\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def normalize(wf: Tensor) -&gt; Tensor:\n\"\"\"\n    Normalizes a wavefunction or batch of wave functions.\n    Arguments:\n        wf (torch.Tensor): Normalized wavefunctions.\n    Returns:\n        A torch.Tensor.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import uniform_state, normalize\n    print(normalize(uniform_state(2, 2)))\n    ```\n    \"\"\"\nif wf.dim() == 1:\nreturn wf / torch.sqrt((wf.abs() ** 2).sum())\nelse:\nreturn wf / torch.sqrt((wf.abs() ** 2).sum(1)).unsqueeze(1)\n</code></pre>"},{"location":"qadence/states/#qadence.states.one_block","title":"<code>one_block(n_qubits)</code>","text":"<p>Generates the abstract one state for a specified number of qubits.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>The number of qubits.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>KronBlock</code> <p>A KronBlock representing the one state.</p> <p>Examples: <pre><code>from qadence.states import one_block\nblock = one_block(n_qubits=2)\nprint(block)\n</code></pre> <pre><code>KronBlock(0,1)\n\u251c\u2500\u2500 X(0)\n\u2514\u2500\u2500 X(1)\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def one_block(n_qubits: int) -&gt; KronBlock:\n\"\"\"\n    Generates the abstract one state for a specified number of qubits.\n    Arguments:\n        n_qubits (int): The number of qubits.\n    Returns:\n        A KronBlock representing the one state.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import one_block\n    block = one_block(n_qubits=2)\n    print(block)\n    ```\n    \"\"\"\nreturn _from_op(X, n_qubits=n_qubits)\n</code></pre>"},{"location":"qadence/states/#qadence.states.one_state","title":"<code>one_state(n_qubits, batch_size=1)</code>","text":"<p>Generates the one state for a specified number of qubits.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>The number of qubits.</p> <p> TYPE: <code>int</code> </p> <code>batch_size</code> <p>The batch size.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>A torch.Tensor.</p> <p>Examples: <pre><code>from qadence.states import one_state\nstate = one_state(n_qubits=2)\nprint(state)\n</code></pre> <pre><code>tensor([[0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j]])\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def one_state(n_qubits: int, batch_size: int = 1) -&gt; Tensor:\n\"\"\"\n    Generates the one state for a specified number of qubits.\n    Arguments:\n        n_qubits (int): The number of qubits.\n        batch_size (int): The batch size.\n    Returns:\n        A torch.Tensor.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import one_state\n    state = one_state(n_qubits=2)\n    print(state)\n    ```\n    \"\"\"\nbitstring = \"1\" * n_qubits\nreturn _state_from_bitstring(bitstring, batch_size)\n</code></pre>"},{"location":"qadence/states/#qadence.states.pmf","title":"<code>pmf(wf)</code>","text":"<p>Converts a wave function into a torch Distribution.</p> PARAMETER  DESCRIPTION <code>wf</code> <p>The wave function as a torch tensor.</p> <p> TYPE: <code>Tensor</code> </p> RETURNS DESCRIPTION <code>Distribution</code> <p>A torch.distributions.Distribution.</p> <p>Examples: <pre><code>from qadence.states import uniform_state, pmf\nprint(pmf(uniform_state(2)).probs)\n</code></pre> <pre><code>tensor([[0.2500, 0.2500, 0.2500, 0.2500]])\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def pmf(wf: Tensor) -&gt; Distribution:\n\"\"\"\n    Converts a wave function into a torch Distribution.\n    Arguments:\n        wf (torch.Tensor): The wave function as a torch tensor.\n    Returns:\n        A torch.distributions.Distribution.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import uniform_state, pmf\n    print(pmf(uniform_state(2)).probs)\n    ```\n    \"\"\"\nreturn Categorical(torch.abs(torch.pow(wf, 2)))\n</code></pre>"},{"location":"qadence/states/#qadence.states.product_block","title":"<code>product_block(bitstring)</code>","text":"<p>Creates an abstract product state from a bitstring.</p> PARAMETER  DESCRIPTION <code>bitstring</code> <p>A bitstring.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>KronBlock</code> <p>A KronBlock representing the product state.</p> <p>Examples: <pre><code>from qadence.states import product_block\nprint(product_block(\"1100\"))\n</code></pre> <pre><code>KronBlock(0,1,2,3)\n\u251c\u2500\u2500 X(0)\n\u251c\u2500\u2500 X(1)\n\u251c\u2500\u2500 I(2)\n\u2514\u2500\u2500 I(3)\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def product_block(bitstring: str) -&gt; KronBlock:\n\"\"\"\n    Creates an abstract product state from a bitstring.\n    Arguments:\n        bitstring (str): A bitstring.\n    Returns:\n        A KronBlock representing the product state.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import product_block\n    print(product_block(\"1100\"))\n    ```\n    \"\"\"\nreturn _block_from_bitstring(bitstring)\n</code></pre>"},{"location":"qadence/states/#qadence.states.product_state","title":"<code>product_state(bitstring, batch_size=1, endianness=Endianness.BIG)</code>","text":"<p>Creates a product state from a bitstring.</p> PARAMETER  DESCRIPTION <code>bitstring</code> <p>A bitstring.</p> <p> TYPE: <code>str</code> </p> <code>batch_size</code> <p>Batch size.</p> <p> TYPE: <code>int) </code> DEFAULT: <code>1</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>A torch.Tensor.</p> <p>Examples: <pre><code>from qadence.states import product_state\nprint(product_state(\"1100\"))\n</code></pre> <pre><code>tensor([[0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,\n1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]])\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>@singledispatch\ndef product_state(\nbitstring: str, batch_size: int = 1, endianness: Endianness = Endianness.BIG\n) -&gt; Tensor:\n\"\"\"\n    Creates a product state from a bitstring.\n    Arguments:\n        bitstring (str): A bitstring.\n        batch_size (int) : Batch size.\n    Returns:\n        A torch.Tensor.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import product_state\n    print(product_state(\"1100\"))\n    ```\n    \"\"\"\nreturn _state_from_bitstring(bitstring, batch_size, endianness=endianness)\n</code></pre>"},{"location":"qadence/states/#qadence.states.rand_bitstring","title":"<code>rand_bitstring(N)</code>","text":"<p>Creates a random bistring.</p> PARAMETER  DESCRIPTION <code>N</code> <p>The length of the bitstring.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>str</code> <p>A string.</p> <p>Examples: <pre><code>from qadence.states import rand_bitstring\nprint(rand_bitstring(N=8))\n</code></pre> <pre><code>10101000\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def rand_bitstring(N: int) -&gt; str:\n\"\"\"\n    Creates a random bistring.\n    Arguments:\n        N (int): The length of the bitstring.\n    Returns:\n        A string.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import rand_bitstring\n    print(rand_bitstring(N=8))\n    ```\n    \"\"\"\nreturn \"\".join(str(random.randint(0, 1)) for _ in range(N))\n</code></pre>"},{"location":"qadence/states/#qadence.states.rand_product_block","title":"<code>rand_product_block(n_qubits)</code>","text":"<p>Creates a block representing a random abstract product state.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>The number of qubits.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>KronBlock</code> <p>A KronBlock representing the product state.</p> <p>Examples: <pre><code>from qadence.states import rand_product_block\nprint(rand_product_block(n_qubits=2))\n</code></pre> <pre><code>KronBlock(0,1)\n\u251c\u2500\u2500 X(0)\n\u2514\u2500\u2500 X(1)\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def rand_product_block(n_qubits: int) -&gt; KronBlock:\n\"\"\"\n    Creates a block representing a random abstract product state.\n    Arguments:\n        n_qubits (int): The number of qubits.\n    Returns:\n        A KronBlock representing the product state.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import rand_product_block\n    print(rand_product_block(n_qubits=2))\n    ```\n    \"\"\"\nreturn product_block(rand_bitstring(n_qubits))\n</code></pre>"},{"location":"qadence/states/#qadence.states.rand_product_state","title":"<code>rand_product_state(n_qubits, batch_size=1)</code>","text":"<p>Creates a random product state.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>The number of qubits.</p> <p> TYPE: <code>int</code> </p> <code>batch_size</code> <p>How many bitstrings to use.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>A torch.Tensor.</p> <p>Examples: <pre><code>from qadence.states import rand_product_state\nprint(rand_product_state(n_qubits=2, batch_size=2))\n</code></pre> <pre><code>tensor([[0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j],\n[0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j]])\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def rand_product_state(n_qubits: int, batch_size: int = 1) -&gt; Tensor:\n\"\"\"\n    Creates a random product state.\n    Arguments:\n        n_qubits (int): The number of qubits.\n        batch_size (int): How many bitstrings to use.\n    Returns:\n        A torch.Tensor.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import rand_product_state\n    print(rand_product_state(n_qubits=2, batch_size=2))\n    ```\n    \"\"\"\nwf_batch = torch.zeros(batch_size, 2**n_qubits, dtype=DTYPE)\nrand_pos = torch.randint(0, 2**n_qubits, (batch_size,))\nwf_batch[torch.arange(batch_size), rand_pos] = torch.tensor(1.0 + 0j, dtype=DTYPE)\nreturn wf_batch\n</code></pre>"},{"location":"qadence/states/#qadence.states.random_state","title":"<code>random_state(n_qubits, batch_size=1, backend=BackendName.PYQTORCH, type=StateGeneratorType.HAAR_MEASURE_FAST)</code>","text":"<p>Generates a random state for a specified number of qubits.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>The number of qubits.</p> <p> TYPE: <code>int</code> </p> <code>backend</code> <p>The backend to use.</p> <p> TYPE: <code>str</code> DEFAULT: <code>PYQTORCH</code> </p> <code>batch_size</code> <p>The batch size.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>type</code> <p>StateGeneratorType.</p> <p> DEFAULT: <code>HAAR_MEASURE_FAST</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>A torch.Tensor.</p> <p>Examples: <pre><code>from qadence.states import random_state, StateGeneratorType\nfrom qadence.states import random_state, is_normalized, pmf\nfrom qadence.types import BackendName\nfrom torch.distributions import Distribution\n### We have the following options:\nprint([g.value for g in StateGeneratorType])\nn_qubits = 2\n# The default is StateGeneratorType.HAAR_MEASURE_FAST\nstate = random_state(n_qubits=n_qubits)\nprint(state)\n### Lets initialize a state using random rotations, i.e., StateGeneratorType.RANDOM_ROTATIONS.\nrandom = random_state(n_qubits=n_qubits, type=StateGeneratorType.RANDOM_ROTATIONS)\nprint(random)\n</code></pre> <pre><code>['RandomRotations', 'HaarMeasureFast', 'HaarMeasureSlow']\ntensor([[-0.1316-0.2250j, -0.0565-0.1414j,  0.3979+0.3708j,  0.7759-0.1056j]])\ntensor([[ 0.7633+0.5963j, -0.1960-0.1531j,  0.0000+0.0000j,  0.0000+0.0000j]])\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def random_state(\nn_qubits: int,\nbatch_size: int = 1,\nbackend: str = BackendName.PYQTORCH,\ntype: StateGeneratorType = StateGeneratorType.HAAR_MEASURE_FAST,\n) -&gt; Tensor:\n\"\"\"\n    Generates a random state for a specified number of qubits.\n    Arguments:\n        n_qubits (int): The number of qubits.\n        backend (str): The backend to use.\n        batch_size (int): The batch size.\n        type : StateGeneratorType.\n    Returns:\n        A torch.Tensor.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import random_state, StateGeneratorType\n    from qadence.states import random_state, is_normalized, pmf\n    from qadence.types import BackendName\n    from torch.distributions import Distribution\n    ### We have the following options:\n    print([g.value for g in StateGeneratorType])\n    n_qubits = 2\n    # The default is StateGeneratorType.HAAR_MEASURE_FAST\n    state = random_state(n_qubits=n_qubits)\n    print(state)\n    ### Lets initialize a state using random rotations, i.e., StateGeneratorType.RANDOM_ROTATIONS.\n    random = random_state(n_qubits=n_qubits, type=StateGeneratorType.RANDOM_ROTATIONS)\n    print(random)\n    ```\n    \"\"\"\nif type == StateGeneratorType.HAAR_MEASURE_FAST:\nstate = concat(tuple(_rand_haar_fast(n_qubits) for _ in range(batch_size)), dim=0)\nelif type == StateGeneratorType.HAAR_MEASURE_SLOW:\nstate = concat(tuple(_rand_haar_slow(n_qubits) for _ in range(batch_size)), dim=0)\nelif type == StateGeneratorType.RANDOM_ROTATIONS:\nstate = run(_abstract_random_state(n_qubits, batch_size))  # type: ignore\nassert all(list(map(is_normalized, state)))\nreturn state\n</code></pre>"},{"location":"qadence/states/#qadence.states.uniform_block","title":"<code>uniform_block(n_qubits)</code>","text":"<p>Generates the abstract uniform state for a specified number of qubits.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>The number of qubits.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>KronBlock</code> <p>A KronBlock representing the uniform state.</p> <p>Examples: <pre><code>from qadence.states import uniform_block\nblock = uniform_block(n_qubits=2)\nprint(block)\n</code></pre> <pre><code>KronBlock(0,1)\n\u251c\u2500\u2500 H(0)\n\u2514\u2500\u2500 H(1)\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def uniform_block(n_qubits: int) -&gt; KronBlock:\n\"\"\"\n    Generates the abstract uniform state for a specified number of qubits.\n    Arguments:\n        n_qubits (int): The number of qubits.\n    Returns:\n        A KronBlock representing the uniform state.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import uniform_block\n    block = uniform_block(n_qubits=2)\n    print(block)\n    ```\n    \"\"\"\nreturn _from_op(H, n_qubits=n_qubits)\n</code></pre>"},{"location":"qadence/states/#qadence.states.uniform_state","title":"<code>uniform_state(n_qubits, batch_size=1)</code>","text":"<p>Generates the uniform state for a specified number of qubits.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>The number of qubits.</p> <p> TYPE: <code>int</code> </p> <code>batch_size</code> <p>The batch size.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>A torch.Tensor.</p> <p>Examples: <pre><code>from qadence.states import uniform_state\nstate = uniform_state(n_qubits=2)\nprint(state)\n</code></pre> <pre><code>tensor([[0.5000+0.j, 0.5000+0.j, 0.5000+0.j, 0.5000+0.j]])\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def uniform_state(n_qubits: int, batch_size: int = 1) -&gt; Tensor:\n\"\"\"\n    Generates the uniform state for a specified number of qubits.\n    Arguments:\n        n_qubits (int): The number of qubits.\n        batch_size (int): The batch size.\n    Returns:\n        A torch.Tensor.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import uniform_state\n    state = uniform_state(n_qubits=2)\n    print(state)\n    ```\n    \"\"\"\nnorm = 1 / torch.sqrt(torch.tensor(2**n_qubits))\nreturn norm * torch.ones(batch_size, 2**n_qubits, dtype=DTYPE)\n</code></pre>"},{"location":"qadence/states/#qadence.states.zero_block","title":"<code>zero_block(n_qubits)</code>","text":"<p>Generates the abstract zero state for a specified number of qubits.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>The number of qubits.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>KronBlock</code> <p>A KronBlock representing the zero state.</p> <p>Examples: <pre><code>from qadence.states import zero_block\nblock = zero_block(n_qubits=2)\nprint(block)\n</code></pre> <pre><code>KronBlock(0,1)\n\u251c\u2500\u2500 I(0)\n\u2514\u2500\u2500 I(1)\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def zero_block(n_qubits: int) -&gt; KronBlock:\n\"\"\"\n    Generates the abstract zero state for a specified number of qubits.\n    Arguments:\n        n_qubits (int): The number of qubits.\n    Returns:\n        A KronBlock representing the zero state.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import zero_block\n    block = zero_block(n_qubits=2)\n    print(block)\n    ```\n    \"\"\"\nreturn _from_op(I, n_qubits=n_qubits)\n</code></pre>"},{"location":"qadence/states/#qadence.states.zero_state","title":"<code>zero_state(n_qubits, batch_size=1)</code>","text":"<p>Generates the zero state for a specified number of qubits.</p> PARAMETER  DESCRIPTION <code>n_qubits</code> <p>The number of qubits for which the zero state is to be generated.</p> <p> TYPE: <code>int</code> </p> <code>batch_size</code> <p>The batch size for the zero state.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> RETURNS DESCRIPTION <code>Tensor</code> <p>A torch.Tensor.</p> <p>Examples: <pre><code>from qadence.states import zero_state\nstate = zero_state(n_qubits=2)\nprint(state)\n</code></pre> <pre><code>tensor([[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]])\n</code></pre> </p> Source code in <code>qadence/states.py</code> <pre><code>def zero_state(n_qubits: int, batch_size: int = 1) -&gt; Tensor:\n\"\"\"\n    Generates the zero state for a specified number of qubits.\n    Arguments:\n        n_qubits (int): The number of qubits for which the zero state is to be generated.\n        batch_size (int): The batch size for the zero state.\n    Returns:\n        A torch.Tensor.\n    Examples:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence.states import zero_state\n    state = zero_state(n_qubits=2)\n    print(state)\n    ```\n    \"\"\"\nbitstring = \"0\" * n_qubits\nreturn _state_from_bitstring(bitstring, batch_size)\n</code></pre>"},{"location":"qadence/transpile/","title":"Transpilation","text":"<p>Contains functions that operate on blocks and circuits to <code>transpile</code> them to new blocks/circuits.</p>"},{"location":"qadence/transpile/#qadence.transpile.transpile.transpile","title":"<code>transpile(*fs)</code>","text":"<p><code>AbstractBlock</code> or <code>QuantumCircuit</code> transpilation.</p> <p>Compose functions that accept a circuit/block and returns a circuit/block.</p> PARAMETER  DESCRIPTION <code>*fs</code> <p>composable functions that either map blocks to blocks (<code>Callable[[AbstractBlock], AbstractBlock]</code>) or circuits to circuits (<code>Callable[[QuantumCircuit], QuantumCircuit]</code>).</p> <p> TYPE: <code>Callable</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>Callable</code> <p>Composed function.</p> <p>Examples:</p> <p>Flatten a block of nested chains and krons: <pre><code>from qadence import *\nfrom qadence.transpile import transpile, flatten, scale_primitive_blocks_only\nb = chain(2 * chain(chain(X(0), Y(0))), kron(kron(X(0), X(1))))\nprint(b)\n# both flatten and scale_primitive_blocks_only are functions that accept and\n# return a block\nt = transpile(flatten, scale_primitive_blocks_only)(b)\nprint(t)\n</code></pre> <pre><code>ChainBlock(0,1)\n\u251c\u2500\u2500 [mul: 2] \u2502   \u2514\u2500\u2500 ChainBlock(0)\n\u2502       \u2514\u2500\u2500 ChainBlock(0)\n\u2502           \u251c\u2500\u2500 X(0)\n\u2502           \u2514\u2500\u2500 Y(0)\n\u2514\u2500\u2500 KronBlock(0,1)\n\u2514\u2500\u2500 KronBlock(0,1)\n\u251c\u2500\u2500 X(0)\n\u2514\u2500\u2500 X(1)\nChainBlock(0,1)\n\u251c\u2500\u2500 [mul: 2.00000000000000] \u2502   \u2514\u2500\u2500 X(0)\n\u251c\u2500\u2500 Y(0)\n\u2514\u2500\u2500 KronBlock(0,1)\n\u251c\u2500\u2500 X(0)\n\u2514\u2500\u2500 X(1)\n</code></pre> </p> <p>We also proved a decorator to easily turn a function <code>Callable[[AbstractBlock], AbstractBlock]</code> into a <code>Callable[[QuantumCircuit], QuantumCircuit]</code> to be used in circuit transpilation. <pre><code>from qadence import *\nfrom qadence.transpile import transpile, blockfn_to_circfn, flatten\n# We want to pass this circuit to `transpile` instead of a block,\n# so we need functions that map from a circuit to a circuit.\ncirc = QuantumCircuit(2, chain(chain(X(0), chain(X(1)))))\n@blockfn_to_circfn\ndef fn(block):\n# un-decorated function accepts a block and returns a block\nreturn block * block\ntransp = transpile(\n# the decorated function accepts a circuit and returns a circuit\nfn,\n# already existing functions can also be decorated\nblockfn_to_circfn(flatten)\n)\nprint(transp(circ))\n</code></pre> <pre><code>ChainBlock(0,1)\n\u251c\u2500\u2500 ChainBlock(0,1)\n\u2502   \u251c\u2500\u2500 X(0)\n\u2502   \u2514\u2500\u2500 X(1)\n\u2514\u2500\u2500 ChainBlock(0,1)\n\u251c\u2500\u2500 X(0)\n\u2514\u2500\u2500 X(1)\n</code></pre> </p> Source code in <code>qadence/transpile/transpile.py</code> <pre><code>def transpile(*fs: Callable) -&gt; Callable:\n\"\"\"`AbstractBlock` or `QuantumCircuit` transpilation.\n    Compose functions that\n    accept a circuit/block and returns a circuit/block.\n    Arguments:\n        *fs: composable functions that either map blocks to blocks\n            (`Callable[[AbstractBlock], AbstractBlock]`)\n            or circuits to circuits (`Callable[[QuantumCircuit], QuantumCircuit]`).\n    Returns:\n        Composed function.\n    Examples:\n    Flatten a block of nested chains and krons:\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence import *\n    from qadence.transpile import transpile, flatten, scale_primitive_blocks_only\n    b = chain(2 * chain(chain(X(0), Y(0))), kron(kron(X(0), X(1))))\n    print(b)\n    print() # markdown-exec: hide\n    # both flatten and scale_primitive_blocks_only are functions that accept and\n    # return a block\n    t = transpile(flatten, scale_primitive_blocks_only)(b)\n    print(t)\n    ```\n    We also proved a decorator to easily turn a function `Callable[[AbstractBlock], AbstractBlock]`\n    into a `Callable[[QuantumCircuit], QuantumCircuit]` to be used in circuit transpilation.\n    ```python exec=\"on\" source=\"material-block\" result=\"json\"\n    from qadence import *\n    from qadence.transpile import transpile, blockfn_to_circfn, flatten\n    # We want to pass this circuit to `transpile` instead of a block,\n    # so we need functions that map from a circuit to a circuit.\n    circ = QuantumCircuit(2, chain(chain(X(0), chain(X(1)))))\n    @blockfn_to_circfn\n    def fn(block):\n        # un-decorated function accepts a block and returns a block\n        return block * block\n    transp = transpile(\n        # the decorated function accepts a circuit and returns a circuit\n        fn,\n        # already existing functions can also be decorated\n        blockfn_to_circfn(flatten)\n    )\n    print(transp(circ))\n    ```\n    \"\"\"\nreturn lambda x: reduce(lambda acc, f: f(acc), reversed(fs), x)\n</code></pre>"},{"location":"qadence/transpile/#qadence.transpile.block.chain_single_qubit_ops","title":"<code>chain_single_qubit_ops(block)</code>","text":"<p>Transpile a chain of krons into a kron of chains of single qubit operations.</p> <p>Examples: <pre><code>from qadence import hea\nfrom qadence.transpile.block import chain_single_qubit_ops\n# Consider a single HEA layer\nblock = hea(2,1)\nprint(block)\n# After applying chain_single_qubit_ops, we get:\nprint(chain_single_qubit_ops(block))\n</code></pre> <pre><code>ChainBlock(0,1) [tag: HEA]\n\u251c\u2500\u2500 ChainBlock(0,1)\n\u2502   \u251c\u2500\u2500 KronBlock(0,1)\n\u2502   \u2502   \u251c\u2500\u2500 RX(0) [params: ['theta_0']]\n\u2502   \u2502   \u2514\u2500\u2500 RX(1) [params: ['theta_1']]\n\u2502   \u251c\u2500\u2500 KronBlock(0,1)\n\u2502   \u2502   \u251c\u2500\u2500 RY(0) [params: ['theta_2']]\n\u2502   \u2502   \u2514\u2500\u2500 RY(1) [params: ['theta_3']]\n\u2502   \u2514\u2500\u2500 KronBlock(0,1)\n\u2502       \u251c\u2500\u2500 RX(0) [params: ['theta_4']]\n\u2502       \u2514\u2500\u2500 RX(1) [params: ['theta_5']]\n\u2514\u2500\u2500 ChainBlock(0,1)\n\u2514\u2500\u2500 KronBlock(0,1)\n\u2514\u2500\u2500 CNOT(0, 1)\nChainBlock(0,1)\n\u251c\u2500\u2500 KronBlock(0,1)\n\u2502   \u251c\u2500\u2500 ChainBlock(0)\n\u2502   \u2502   \u251c\u2500\u2500 RX(0) [params: ['theta_0']]\n\u2502   \u2502   \u251c\u2500\u2500 RY(0) [params: ['theta_2']]\n\u2502   \u2502   \u2514\u2500\u2500 RX(0) [params: ['theta_4']]\n\u2502   \u2514\u2500\u2500 ChainBlock(1)\n\u2502       \u251c\u2500\u2500 RX(1) [params: ['theta_1']]\n\u2502       \u251c\u2500\u2500 RY(1) [params: ['theta_3']]\n\u2502       \u2514\u2500\u2500 RX(1) [params: ['theta_5']]\n\u2514\u2500\u2500 ChainBlock(0,1)\n\u2514\u2500\u2500 KronBlock(0,1)\n\u2514\u2500\u2500 CNOT(0, 1)\n</code></pre></p> Source code in <code>qadence/transpile/block.py</code> <pre><code>def chain_single_qubit_ops(block: AbstractBlock) -&gt; AbstractBlock:\n\"\"\"Transpile a chain of krons into a kron of chains of single qubit operations.\n    Examples:\n    ```python exec=\"on\" source=\"above\" result=\"json\"\n    from qadence import hea\n    from qadence.transpile.block import chain_single_qubit_ops\n    # Consider a single HEA layer\n    block = hea(2,1)\n    print(block)\n    # After applying chain_single_qubit_ops, we get:\n    print(chain_single_qubit_ops(block))\n    ```\n    \"\"\"\nif is_chain_of_primitivekrons(block):\ntry:\nreturn kron(*map(lambda bs: chain(*bs), zip(*block)))  # type: ignore[misc]\nexcept Exception as e:\nlogger.debug(\nf\"Unable to transpile {block} using chain_single_qubit_ops\\\n                         due to {e}. Returning original circuit.\"\n)\nreturn block\nelif isinstance(block, CompositeBlock):\nreturn _construct(type(block), tuple(chain_single_qubit_ops(b) for b in block.blocks))\nelse:\nreturn block\n</code></pre>"},{"location":"qadence/transpile/#qadence.transpile.block.scale_primitive_blocks_only","title":"<code>scale_primitive_blocks_only(block, scale=None)</code>","text":"<p>Push the scale all the way down into the leaves of the block tree.</p> <p>When given a scaled CompositeBlock consisting of several PrimitiveBlocks.</p> PARAMETER  DESCRIPTION <code>block</code> <p>The block to be transpiled.</p> <p> TYPE: <code>AbstractBlock</code> </p> <code>scale</code> <p>An optional scale parameter. Only to be used for recursive calls internally.</p> <p> TYPE: <code>Basic</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>AbstractBlock</code> <p>A block of the same type where the scales have been moved into the subblocks.</p> <p> TYPE: <code>AbstractBlock</code> </p> <p>Examples:</p> <p>There are two different cases: <code>ChainBlock</code>s/<code>KronBlock</code>s: Only the first subblock needs to be scaled because chains/krons represent multiplications. <pre><code>from qadence import chain, X, RX\nfrom qadence.transpile import scale_primitive_blocks_only\nb = 2 * chain(X(0), RX(0, \"theta\"))\nprint(b)\n# After applying scale_primitive_blocks_only\nprint(scale_primitive_blocks_only(b))\n</code></pre> <pre><code>[mul: 2] \u2514\u2500\u2500 ChainBlock(0)\n\u251c\u2500\u2500 X(0)\n\u2514\u2500\u2500 RX(0) [params: ['theta']]\nChainBlock(0)\n\u251c\u2500\u2500 [mul: 2.00000000000000] \u2502   \u2514\u2500\u2500 X(0)\n\u2514\u2500\u2500 RX(0) [params: ['theta']]\n</code></pre></p> <p><code>AddBlock</code>s: Consider 2 * add(X(0), RX(0, \"theta\")).  The scale needs to be added to all subblocks.  We get add(2 * X(0), 2 * RX(0, \"theta\")). <pre><code>from qadence import add, X, RX\nfrom qadence.transpile import scale_primitive_blocks_only\nb = 2 * add(X(0), RX(0, \"theta\"))\nprint(b)\n# After applying scale_primitive_blocks_only\nprint(scale_primitive_blocks_only(b))\n</code></pre> <pre><code>[mul: 2] \u2514\u2500\u2500 AddBlock(0)\n\u251c\u2500\u2500 X(0)\n\u2514\u2500\u2500 RX(0) [params: ['theta']]\nAddBlock(0)\n\u251c\u2500\u2500 [mul: 2.00000000000000] \u2502   \u2514\u2500\u2500 X(0)\n\u2514\u2500\u2500 [mul: 2.00000000000000] \u2514\u2500\u2500 RX(0) [params: ['theta']]\n</code></pre></p> Source code in <code>qadence/transpile/block.py</code> <pre><code>@singledispatch\ndef scale_primitive_blocks_only(block: AbstractBlock, scale: sympy.Basic = None) -&gt; AbstractBlock:\n\"\"\"Push the scale all the way down into the leaves of the block tree.\n    When given a scaled CompositeBlock consisting of several PrimitiveBlocks.\n    Arguments:\n        block: The block to be transpiled.\n        scale: An optional scale parameter. Only to be used for recursive calls internally.\n    Returns:\n        AbstractBlock: A block of the same type where the scales have been moved into the subblocks.\n    Examples:\n    There are two different cases:\n    `ChainBlock`s/`KronBlock`s: Only the first subblock needs to be scaled because chains/krons\n    represent multiplications.\n    ```python exec=\"on\" source=\"above\" result=\"json\"\n    from qadence import chain, X, RX\n    from qadence.transpile import scale_primitive_blocks_only\n    b = 2 * chain(X(0), RX(0, \"theta\"))\n    print(b)\n    # After applying scale_primitive_blocks_only\n    print(scale_primitive_blocks_only(b))\n    ```\n    `AddBlock`s: Consider 2 * add(X(0), RX(0, \"theta\")).  The scale needs to be added to all\n    subblocks.  We get add(2 * X(0), 2 * RX(0, \"theta\")).\n    ```python exec=\"on\" source=\"above\" result=\"json\"\n    from qadence import add, X, RX\n    from qadence.transpile import scale_primitive_blocks_only\n    b = 2 * add(X(0), RX(0, \"theta\"))\n    print(b)\n    # After applying scale_primitive_blocks_only\n    print(scale_primitive_blocks_only(b))\n    ```\n    \"\"\"\nraise NotImplementedError(f\"scale_primitive_blocks_only is not implemented for {type(block)}\")\n</code></pre>"},{"location":"qadence/transpile/#qadence.transpile.block.set_trainable","title":"<code>set_trainable(blocks, value=True, inplace=True)</code>","text":"<p>Set the trainability of all parameters in a block to a given value.</p> PARAMETER  DESCRIPTION <code>blocks</code> <p>Block or list of blocks for which to set the trainable attribute</p> <p> TYPE: <code>AbstractBlock | list[AbstractBlock]</code> </p> <code>value</code> <p>The value of the trainable attribute to assign to the input blocks</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>inplace</code> <p>Whether to modify the block(s) in place or not. Currently, only</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RAISES DESCRIPTION <code>NotImplementedError</code> <p>if the <code>inplace</code> argument is set to False, the function will raise  this exception</p> RETURNS DESCRIPTION <code>AbstractBlock | list[AbstractBlock]</code> <p>AbstractBlock | list[AbstractBlock]: the input block or list of blocks with the trainable attribute set to the given value</p> Source code in <code>qadence/transpile/block.py</code> <pre><code>def set_trainable(\nblocks: AbstractBlock | list[AbstractBlock], value: bool = True, inplace: bool = True\n) -&gt; AbstractBlock | list[AbstractBlock]:\n\"\"\"Set the trainability of all parameters in a block to a given value.\n    Args:\n        blocks (AbstractBlock | list[AbstractBlock]): Block or list of blocks for which\n            to set the trainable attribute\n        value (bool, optional): The value of the trainable attribute to assign to the input blocks\n        inplace (bool, optional): Whether to modify the block(s) in place or not. Currently, only\n    Raises:\n        NotImplementedError: if the `inplace` argument is set to False, the function will\n            raise  this exception\n    Returns:\n        AbstractBlock | list[AbstractBlock]: the input block or list of blocks with the trainable\n            attribute set to the given value\n    \"\"\"\nif isinstance(blocks, AbstractBlock):\nblocks = [blocks]\nif inplace:\nfor block in blocks:\nparams: list[sympy.Basic] = parameters(block)\nfor p in params:\nif not p.is_number:\np.trainable = value\nelse:\nraise NotImplementedError(\"Not inplace set_trainable is not yet available\")\nreturn blocks if len(blocks) &gt; 1 else blocks[0]\n</code></pre>"},{"location":"qadence/transpile/#qadence.transpile.block.validate","title":"<code>validate(block)</code>","text":"<p>Moves a block from global to local qubit numbers by adding PutBlocks.</p> <p>Reassigns qubit locations appropriately.</p>"},{"location":"qadence/transpile/#qadence.transpile.block.validate--example","title":"Example","text":"<pre><code>from qadence.blocks import chain\nfrom qadence.operations import X\nfrom qadence.transpile import validate\nx = chain(chain(X(0)), chain(X(1)))\nprint(x)\nprint(validate(x))\n</code></pre> <pre><code>ChainBlock(0,1)\n\u251c\u2500\u2500 ChainBlock(0)\n\u2502   \u2514\u2500\u2500 X(0)\n\u2514\u2500\u2500 ChainBlock(1)\n\u2514\u2500\u2500 X(1)\nChainBlock(0,1)\n\u251c\u2500\u2500 put on (0)\n\u2502   \u2514\u2500\u2500 ChainBlock(0)\n\u2502       \u2514\u2500\u2500 put on (0)\n\u2502           \u2514\u2500\u2500 X(0)\n\u2514\u2500\u2500 put on (1)\n\u2514\u2500\u2500 ChainBlock(0)\n\u2514\u2500\u2500 put on (0)\n\u2514\u2500\u2500 X(0)\n</code></pre> Source code in <code>qadence/transpile/block.py</code> <pre><code>def validate(block: AbstractBlock) -&gt; AbstractBlock:\n\"\"\"Moves a block from global to local qubit numbers by adding PutBlocks.\n    Reassigns qubit locations appropriately.\n    # Example\n    ```python exec=\"on\" source=\"above\" result=\"json\"\n    from qadence.blocks import chain\n    from qadence.operations import X\n    from qadence.transpile import validate\n    x = chain(chain(X(0)), chain(X(1)))\n    print(x)\n    print(validate(x))\n    ```\n    \"\"\"\nvblock: AbstractBlock\nfrom qadence.transpile import reassign\nif isinstance(block, ControlBlock):\nvblock = deepcopy(block)\nb: AbstractBlock\n(b,) = block.blocks\nb = reassign(b, {i: i - min(b.qubit_support) for i in b.qubit_support})\nb = validate(b)\nvblock.blocks = (b,)  # type: ignore[assignment]\nelif isinstance(block, CompositeBlock):\nblocks = []\nfor b in block.blocks:\nmi, ma = min(b.qubit_support), max(b.qubit_support)\nnb = reassign(b, {i: i - min(b.qubit_support) for i in b.qubit_support})\nnb = validate(nb)\nnb = PutBlock(nb, tuple(range(mi, ma + 1)))\nblocks.append(nb)\ntry:\nvblock = _construct(type(block), tuple(blocks))\nexcept AssertionError as e:\nif str(e) == \"Make sure blocks act on distinct qubits!\":\nvblock = chain(*blocks)\nelse:\nraise e\nelif isinstance(block, PrimitiveBlock):\nvblock = deepcopy(block)\nelse:\nraise NotImplementedError\nvblock.tag = block.tag\nreturn vblock\n</code></pre>"},{"location":"qadence/types/","title":"Types","text":""},{"location":"qadence/types/#qadence-types","title":"Qadence Types","text":""},{"location":"qadence/types/#qadence.types.TArray","title":"<code>TArray = Union[Iterable, Tensor, np.ndarray]</code>  <code>module-attribute</code>","text":"<p>Union of common array types.</p>"},{"location":"qadence/types/#qadence.types.TGenerator","title":"<code>TGenerator = Union[Tensor, sympy.Array, sympy.Basic]</code>  <code>module-attribute</code>","text":"<p>Union of torch tensors and numpy arrays.</p>"},{"location":"qadence/types/#qadence.types.TNumber","title":"<code>TNumber = Union[int, float, complex]</code>  <code>module-attribute</code>","text":"<p>Union of python number types.</p>"},{"location":"qadence/types/#qadence.types.TParameter","title":"<code>TParameter = Union[TNumber, Tensor, sympy.Basic, str]</code>  <code>module-attribute</code>","text":"<p>Union of numbers, tensors, and parameter types.</p>"},{"location":"qadence/types/#qadence.types.AlgoHEvo","title":"<code>AlgoHEvo</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Hamiltonian Evolution algorithms that can be used by the backend.</p>"},{"location":"qadence/types/#qadence.types.AlgoHEvo.EIG","title":"<code>EIG = 'EIG'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Using Hamiltonian diagonalization.</p>"},{"location":"qadence/types/#qadence.types.AlgoHEvo.EXP","title":"<code>EXP = 'EXP'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Using torch.matrix_exp on the generator matrix.</p>"},{"location":"qadence/types/#qadence.types.AlgoHEvo.RK4","title":"<code>RK4 = 'RK4'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>4th order Runge-Kutta approximation.</p>"},{"location":"qadence/types/#qadence.types.BasisSet","title":"<code>BasisSet</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Basis set for feature maps.</p>"},{"location":"qadence/types/#qadence.types.BasisSet.CHEBYSHEV","title":"<code>CHEBYSHEV = 'Chebyshev'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Chebyshev polynomials of the first kind.</p>"},{"location":"qadence/types/#qadence.types.BasisSet.FOURIER","title":"<code>FOURIER = 'Fourier'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Fourier basis set.</p>"},{"location":"qadence/types/#qadence.types.Endianness","title":"<code>Endianness</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>The endianness convention to use.</p>"},{"location":"qadence/types/#qadence.types.Endianness.BIG","title":"<code>BIG = 'Big'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use Big endianness.</p>"},{"location":"qadence/types/#qadence.types.Endianness.LITTLE","title":"<code>LITTLE = 'Little'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use little endianness.</p>"},{"location":"qadence/types/#qadence.types.FigFormat","title":"<code>FigFormat</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Available output formats for exporting visualized circuits to a file.</p>"},{"location":"qadence/types/#qadence.types.FigFormat.PDF","title":"<code>PDF = 'PDF'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>PDF format.</p>"},{"location":"qadence/types/#qadence.types.FigFormat.PNG","title":"<code>PNG = 'PNG'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>PNG format.</p>"},{"location":"qadence/types/#qadence.types.FigFormat.SVG","title":"<code>SVG = 'SVG'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>SVG format.</p>"},{"location":"qadence/types/#qadence.types.GenDAQC","title":"<code>GenDAQC</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>The type of interaction for the DAQC transform.</p>"},{"location":"qadence/types/#qadence.types.GenDAQC.NN","title":"<code>NN = 'NN'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>NN</p>"},{"location":"qadence/types/#qadence.types.GenDAQC.ZZ","title":"<code>ZZ = 'ZZ'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>ZZ</p>"},{"location":"qadence/types/#qadence.types.Interaction","title":"<code>Interaction</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Interaction types used in.</p> <ul> <li><code>add_interaction</code>.</li> <li><code>hamiltonian_factory</code>.</li> </ul>"},{"location":"qadence/types/#qadence.types.Interaction.NN","title":"<code>NN = 'NN'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>NN-Ising Interaction, N=(I-Z)/2.</p>"},{"location":"qadence/types/#qadence.types.Interaction.XY","title":"<code>XY = 'XY'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>XY Interaction.</p>"},{"location":"qadence/types/#qadence.types.Interaction.XYZ","title":"<code>XYZ = 'XYZ'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>XYZ Interaction.</p>"},{"location":"qadence/types/#qadence.types.Interaction.ZZ","title":"<code>ZZ = 'ZZ'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>ZZ-Ising Interaction.</p>"},{"location":"qadence/types/#qadence.types.LTSOrder","title":"<code>LTSOrder</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Lie-Trotter-Suzuki approximation order.</p>"},{"location":"qadence/types/#qadence.types.LTSOrder.BASIC","title":"<code>BASIC = 'BASIC'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Basic.</p>"},{"location":"qadence/types/#qadence.types.LTSOrder.ST2","title":"<code>ST2 = 'ST2'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>ST2.</p>"},{"location":"qadence/types/#qadence.types.LTSOrder.ST4","title":"<code>ST4 = 'ST4'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>ST4.</p>"},{"location":"qadence/types/#qadence.types.LatticeTopology","title":"<code>LatticeTopology</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Lattice topologies to choose from for the register.</p>"},{"location":"qadence/types/#qadence.types.LatticeTopology.ALL_TO_ALL","title":"<code>ALL_TO_ALL = 'all_to_all'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>All to all- connected lattice.</p>"},{"location":"qadence/types/#qadence.types.LatticeTopology.ARBITRARY","title":"<code>ARBITRARY = 'arbitrary'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Arbitrarily-shaped lattice.</p>"},{"location":"qadence/types/#qadence.types.LatticeTopology.CIRCLE","title":"<code>CIRCLE = 'circle'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Circular lattice.</p>"},{"location":"qadence/types/#qadence.types.LatticeTopology.HONEYCOMB_LATTICE","title":"<code>HONEYCOMB_LATTICE = 'honeycomb_lattice'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Honeycomb-shaped lattice.</p>"},{"location":"qadence/types/#qadence.types.LatticeTopology.LINE","title":"<code>LINE = 'line'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Line-format lattice.</p>"},{"location":"qadence/types/#qadence.types.LatticeTopology.RECTANGULAR_LATTICE","title":"<code>RECTANGULAR_LATTICE = 'rectangular_lattice'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Rectangular-shaped lattice.</p>"},{"location":"qadence/types/#qadence.types.LatticeTopology.SQUARE","title":"<code>SQUARE = 'square'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Square lattice.</p>"},{"location":"qadence/types/#qadence.types.LatticeTopology.TRIANGULAR_LATTICE","title":"<code>TRIANGULAR_LATTICE = 'triangular_lattice'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Triangular-shaped shape.</p>"},{"location":"qadence/types/#qadence.types.OpName","title":"<code>OpName</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>A list of all available of digital-analog operations.</p>"},{"location":"qadence/types/#qadence.types.OpName.ANALOGENTANG","title":"<code>ANALOGENTANG = 'AnalogEntanglement'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The analog entanglement operation.</p>"},{"location":"qadence/types/#qadence.types.OpName.ANALOGRX","title":"<code>ANALOGRX = 'AnalogRX'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The analog RX operation.</p>"},{"location":"qadence/types/#qadence.types.OpName.ANALOGRY","title":"<code>ANALOGRY = 'AnalogRY'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The analog RY operation.</p>"},{"location":"qadence/types/#qadence.types.OpName.ANALOGRZ","title":"<code>ANALOGRZ = 'AnalogRZ'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The analog RZ operation.</p>"},{"location":"qadence/types/#qadence.types.OpName.ANALOGSWAP","title":"<code>ANALOGSWAP = 'AnalogSWAP'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The analog SWAP operation.</p>"},{"location":"qadence/types/#qadence.types.OpName.CNOT","title":"<code>CNOT = 'CNOT'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The CNOT gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.CPHASE","title":"<code>CPHASE = 'CPHASE'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The controlled PHASE gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.CRX","title":"<code>CRX = 'CRX'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Control RX gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.CRY","title":"<code>CRY = 'CRY'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Controlled RY gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.CRZ","title":"<code>CRZ = 'CRZ'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Control RZ gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.CSWAP","title":"<code>CSWAP = 'CSWAP'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Control SWAP gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.CZ","title":"<code>CZ = 'CZ'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The CZ gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.ENTANG","title":"<code>ENTANG = 'entangle'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The entanglement operation.</p>"},{"location":"qadence/types/#qadence.types.OpName.H","title":"<code>H = 'H'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Hadamard gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.HAMEVO","title":"<code>HAMEVO = 'HamEvo'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Hamiltonian Evolution operation.</p>"},{"location":"qadence/types/#qadence.types.OpName.I","title":"<code>I = 'I'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Identity gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.MCPHASE","title":"<code>MCPHASE = 'MCPHASE'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Multicontrol PHASE gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.MCRX","title":"<code>MCRX = 'MCRX'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Multicontrol RX gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.MCRY","title":"<code>MCRY = 'MCRY'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Multicontrol RY gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.MCRZ","title":"<code>MCRZ = 'MCRZ'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Multicontrol RZ gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.MCZ","title":"<code>MCZ = 'MCZ'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Multicontrol CZ gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.N","title":"<code>N = 'N'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The N = (1/2)(I-Z) operator.</p>"},{"location":"qadence/types/#qadence.types.OpName.PHASE","title":"<code>PHASE = 'PHASE'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The PHASE gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.RX","title":"<code>RX = 'RX'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The RX gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.RY","title":"<code>RY = 'RY'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The RY gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.RZ","title":"<code>RZ = 'RZ'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The RZ gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.S","title":"<code>S = 'S'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The S gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.SDAGGER","title":"<code>SDAGGER = 'SDagger'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The S dagger gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.SWAP","title":"<code>SWAP = 'SWAP'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The SWAP gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.T","title":"<code>T = 'T'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The T gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.TDAGGER","title":"<code>TDAGGER = 'TDagger'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The T dagger gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.TOFFOLI","title":"<code>TOFFOLI = 'Toffoli'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Toffoli gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.U","title":"<code>U = 'U'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The U gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.WAIT","title":"<code>WAIT = 'wait'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The wait operation.</p>"},{"location":"qadence/types/#qadence.types.OpName.X","title":"<code>X = 'X'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The X gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.Y","title":"<code>Y = 'Y'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Y gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.Z","title":"<code>Z = 'Z'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Z gate.</p>"},{"location":"qadence/types/#qadence.types.OpName.ZERO","title":"<code>ZERO = 'Zero'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The zero gate.</p>"},{"location":"qadence/types/#qadence.types.OverlapMethod","title":"<code>OverlapMethod</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Overlap Methods to choose from.</p>"},{"location":"qadence/types/#qadence.types.OverlapMethod.COMPUTE_UNCOMPUTE","title":"<code>COMPUTE_UNCOMPUTE = 'compute_uncompute'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Compute-uncompute.</p>"},{"location":"qadence/types/#qadence.types.OverlapMethod.EXACT","title":"<code>EXACT = 'exact'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Exact.</p>"},{"location":"qadence/types/#qadence.types.OverlapMethod.HADAMARD_TEST","title":"<code>HADAMARD_TEST = 'hadamard_test'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Hadamard-test.</p>"},{"location":"qadence/types/#qadence.types.OverlapMethod.JENSEN_SHANNON","title":"<code>JENSEN_SHANNON = 'jensen_shannon'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Jensen-shannon.</p>"},{"location":"qadence/types/#qadence.types.OverlapMethod.SWAP_TEST","title":"<code>SWAP_TEST = 'swap_test'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Swap-test.</p>"},{"location":"qadence/types/#qadence.types.ParameterType","title":"<code>ParameterType</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Parameter types available in qadence.</p>"},{"location":"qadence/types/#qadence.types.ParameterType.FEATURE","title":"<code>FEATURE = 'Feature'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>FeatureParameters act as input and are not trainable.</p>"},{"location":"qadence/types/#qadence.types.ParameterType.FIXED","title":"<code>FIXED = 'Fixed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Fixed/ constant parameters are neither trainable nor act as input.</p>"},{"location":"qadence/types/#qadence.types.ParameterType.VARIATIONAL","title":"<code>VARIATIONAL = 'Variational'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>VariationalParameters are trainable.</p>"},{"location":"qadence/types/#qadence.types.QubitSupportType","title":"<code>QubitSupportType</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Qubit support types.</p>"},{"location":"qadence/types/#qadence.types.QubitSupportType.GLOBAL","title":"<code>GLOBAL = 'global'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use global qubit support.</p>"},{"location":"qadence/types/#qadence.types.ResultType","title":"<code>ResultType</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Available data types for generating certain results.</p>"},{"location":"qadence/types/#qadence.types.ResultType.NUMPY","title":"<code>NUMPY = 'Numpy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Numpy Array Type.</p>"},{"location":"qadence/types/#qadence.types.ResultType.STRING","title":"<code>STRING = 'String'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>String Type.</p>"},{"location":"qadence/types/#qadence.types.ResultType.TORCH","title":"<code>TORCH = 'Torch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Torch Tensor Type.</p>"},{"location":"qadence/types/#qadence.types.ReuploadScaling","title":"<code>ReuploadScaling</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Scaling for data reuploads in feature maps.</p>"},{"location":"qadence/types/#qadence.types.ReuploadScaling.CONSTANT","title":"<code>CONSTANT = 'Constant'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Constant scaling.</p>"},{"location":"qadence/types/#qadence.types.ReuploadScaling.EXP","title":"<code>EXP = 'Exponential'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Exponentially increasing scaling.</p>"},{"location":"qadence/types/#qadence.types.ReuploadScaling.TOWER","title":"<code>TOWER = 'Tower'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Linearly increasing scaling.</p>"},{"location":"qadence/types/#qadence.types.SerializationFormat","title":"<code>SerializationFormat</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Available serialization formats for circuits.</p>"},{"location":"qadence/types/#qadence.types.SerializationFormat.JSON","title":"<code>JSON = 'JSON'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Json format.</p>"},{"location":"qadence/types/#qadence.types.SerializationFormat.PT","title":"<code>PT = 'PT'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The PT format used by Torch.</p>"},{"location":"qadence/types/#qadence.types.StateGeneratorType","title":"<code>StateGeneratorType</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Methods to generate random states.</p>"},{"location":"qadence/types/#qadence.types.StateGeneratorType.HAAR_MEASURE_FAST","title":"<code>HAAR_MEASURE_FAST = 'HaarMeasureFast'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HaarMeasure.</p>"},{"location":"qadence/types/#qadence.types.StateGeneratorType.HAAR_MEASURE_SLOW","title":"<code>HAAR_MEASURE_SLOW = 'HaarMeasureSlow'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HaarMeasure non-optimized version.</p>"},{"location":"qadence/types/#qadence.types.StateGeneratorType.RANDOM_ROTATIONS","title":"<code>RANDOM_ROTATIONS = 'RandomRotations'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Random Rotations.</p>"},{"location":"qadence/types/#qadence.types.StrEnum","title":"<code>StrEnum</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"qadence/types/#qadence.types.StrEnum.__str__","title":"<code>__str__()</code>","text":"<p>Used when dumping enum fields in a schema.</p> Source code in <code>qadence/types.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Used when dumping enum fields in a schema.\"\"\"\nret: str = self.value\nreturn ret\n</code></pre>"},{"location":"qadence/types/#qadence.types.Strategy","title":"<code>Strategy</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Computing paradigm.</p>"},{"location":"qadence/types/#qadence.types.Strategy.ANALOG","title":"<code>ANALOG = 'Analog'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use the analog paradigm.</p>"},{"location":"qadence/types/#qadence.types.Strategy.BDAQC","title":"<code>BDAQC = 'bDAQC'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use the banged digital-analog QC paradigm.</p>"},{"location":"qadence/types/#qadence.types.Strategy.DIGITAL","title":"<code>DIGITAL = 'Digital'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use the digital paradigm.</p>"},{"location":"qadence/types/#qadence.types.Strategy.SDAQC","title":"<code>SDAQC = 'sDAQC'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Use the step-wise digital-analog QC paradigm.</p>"},{"location":"qadence/types/#qadence.types.TensorType","title":"<code>TensorType</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>Tensor Types for converting blocks to tensors.</p>"},{"location":"qadence/types/#qadence.types.TensorType.DENSE","title":"<code>DENSE = 'Dense'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Convert a block to a dense tensor.</p>"},{"location":"qadence/types/#qadence.types.TensorType.SPARSE","title":"<code>SPARSE = 'Sparse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Convert a observable block to a sparse tensor.</p>"},{"location":"qadence/types/#qadence.types.TensorType.SPARSEDIAGONAL","title":"<code>SPARSEDIAGONAL = 'SparseDiagonal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Convert a diagonal observable block to a sparse diagonal if possible.</p>"},{"location":"qml/","title":"Variational quantum algorithms","text":"<p>Variational algorithms on noisy devices and quantum machine learning (QML)[^1] in particular are one of the main target applications for Qadence. For this purpose, the library offers both flexible symbolic expressions for the quantum circuit parameters via <code>sympy</code> (see here for more details) and native automatic differentiation via integration with PyTorch deep learning framework.</p> <p>Furthermore, Qadence offers a wide range of utilities for helping building and researching quantum machine learning algorithms, including:</p> <ul> <li>a set of constructors for circuits commonly used in quantum machine learning such as feature maps and ansatze</li> <li>a set of tools for training and optimizing quantum neural networks and loading classical data into a QML algorithm</li> </ul>"},{"location":"qml/#some-simple-examples","title":"Some simple examples","text":"<p>Qadence symbolic parameter interface allows to create arbitrary feature maps to encode classical data into quantum circuits with an arbitrary non-linear function embedding for the input values:</p> <pre><code>import qadence as qd\nfrom qadence.operations import *\nimport torch\nfrom sympy import acos\nn_qubits = 4\n# Example feature map, also directly available with the `feature_map` function\nfp = qd.FeatureParameter(\"phi\")\nfm = qd.kron(RX(i, acos(fp)) for i in range(n_qubits))\n# the key in the dictionary must correspond to\n# the name of the assigned to the feature parameter\ninputs = {\"phi\": torch.rand(3)}\nsamples = qd.sample(fm, values=inputs)\n</code></pre> <pre><code>samples = Counter({'0000': 69, '1000': 10, '0001': 9, '0100': 7, '0010': 2, '0011': 1, '1010': 1, '1100': 1})\n</code></pre> <p>The <code>constructors.feature_map</code> module provides convenience functions to build commonly used feature maps where the input parameter is encoded in the single-qubit gates rotation angle. This function will be further demonstrated in the QML constructors tutorial.</p> <p>Furthermore, Qadence is natively integrated with PyTorch automatic differentiation engine thus Qadence quantum models can be used seamlessly in a PyTorch workflow.</p> <p>Let's create a quantum neural network model using the feature map just defined, a digital-analog variational ansatz (also explained here) and a simple observable \\(X(0) \\otimes X(1)\\). We use the convenience <code>QNN</code> quantum model abstraction.</p> <pre><code>ansatz = qd.hea(n_qubits, strategy=\"sDAQC\")\ncircuit = qd.QuantumCircuit(n_qubits, fm, ansatz)\nobservable = qd.kron(X(0), X(1))\nmodel = qd.QNN(circuit, observable)\n# NOTE: the `QNN` is a torch.nn.Module\nassert isinstance(model, torch.nn.Module)\n</code></pre> <pre><code>True\n</code></pre> <p>Differentiation works the same way as any other PyTorch module:</p> <pre><code>values = {\"phi\": torch.rand(10, requires_grad=True)}\n# the forward pass of the quantum model returns the expectation\n# value of the input observable\nout = model(values)\n# you can compute the gradient with respect to inputs using\n# PyTorch autograd differentiation engine\ndout = torch.autograd.grad(out, values[\"phi\"], torch.ones_like(out), create_graph=True)[0]\nprint(f\"First-order derivative w.r.t. the feature parameter: \\n{dout}\")\n# you can also call directly a backward pass to compute derivatives with respect\n# to the variational parameters and use it for implementing variational\n# optimization\nout.sum().backward()\n</code></pre> <pre><code>Quantum model output: tensor([[0.4619],\n[0.2336],\n[0.3466],\n[0.3091],\n[0.3848],\n[0.5296],\n[0.1685],\n[0.2566],\n[0.3779],\n[0.2013]], grad_fn=&lt;CatBackward0&gt;)\nFirst-order derivative w.r.t. the feature parameter: tensor([-1.0731,  0.7376,  0.7347,  0.7483, -1.9705,  0.1689,  0.6896, -5.4024,\n0.7118,  0.7184], grad_fn=&lt;MulBackward0&gt;)\n</code></pre> <p>To run QML on real devices, Qadence offers generalized parameter shift rules (GPSR) <sup>1</sup> for arbitrary quantum operations which can be selected when constructing the <code>QNN</code> model:</p> <pre><code>model = qd.QNN(circuit, observable, diff_mode=\"gpsr\")\nout = model(values)\ndout = torch.autograd.grad(out, values[\"phi\"], torch.ones_like(out), create_graph=True)[0]\nprint(f\"First-order derivative w.r.t. the feature parameter: \\n{dout}\")\n</code></pre> <pre><code>First-order derivative w.r.t. the feature parameter: tensor([-1.0731,  0.7376,  0.7347,  0.7483, -1.9705,  0.1689,  0.6896, -5.4024,\n0.7118,  0.7184], grad_fn=&lt;MulBackward0&gt;)\n</code></pre> <p>See here for more details on how the parameter shift rules implementation works in Qadence.</p>"},{"location":"qml/#references","title":"References","text":"<p>[^1] Schuld, Petruccione, Machine learning on Quantum Computers, Springer Nature (2021)</p> <ol> <li> <p>Kyriienko et al., General quantum circuit differentiation rules \u21a9</p> </li> </ol>"},{"location":"qml/ml_tools/","title":"Training tools","text":""},{"location":"qml/ml_tools/#dataloaders","title":"Dataloaders","text":"<p>When using Qadence, you can supply classical data to a quantum machine learning algorithm by using a standard PyTorch <code>DataLoader</code> instance. Qadence also provides the <code>DictDataLoader</code> convenience class which allows to build dictionaries of <code>DataLoader</code>s instances and easily iterate over them.</p> <pre><code>import torch\nfrom torch.utils.data import DataLoader, TensorDataset\nfrom qadence.ml_tools import DictDataLoader, to_dataloader\ndef dataloader(data_size: int = 25, batch_size: int = 5, infinite: bool = False) -&gt; DataLoader:\nx = torch.linspace(0, 1, data_size).reshape(-1, 1)\ny = torch.sin(x)\nreturn to_dataloader(x, y, batch_size=batch_size, infinite=infinite)\ndef dictdataloader(data_size: int = 25, batch_size: int = 5) -&gt; DictDataLoader:\ndls = {}\nfor k in [\"y1\", \"y2\"]:\nx = torch.rand(data_size, 1)\ny = torch.sin(x)\ndls[k] = to_dataloader(x, y, batch_size=batch_size, infinite=True)\nreturn DictDataLoader(dls)\n# iterate over standard DataLoader\nfor (x,y) in dataloader(data_size=6, batch_size=2):\nprint(f\"Standard {x = }\")\n# construct an infinite dataset which will keep sampling indefinitely\nn_epochs = 5\ndl = iter(dataloader(data_size=6, batch_size=2, infinite=True))\nfor _ in range(n_epochs):\n(x, y) = next(dl)\nprint(f\"Infinite {x = }\")\n# iterate over DictDataLoader\nddl = dictdataloader()\ndata = next(iter(ddl))\nprint(f\"{data = }\")\n</code></pre> <pre><code>Standard x = tensor([[0.0000],\n[0.2000]])\nStandard x = tensor([[0.4000],\n[0.6000]])\nStandard x = tensor([[0.8000],\n[1.0000]])\nInfinite x = tensor([[0.0000],\n[0.2000]])\nInfinite x = tensor([[0.4000],\n[0.6000]])\nInfinite x = tensor([[0.8000],\n[1.0000]])\nInfinite x = tensor([[0.0000],\n[0.2000]])\nInfinite x = tensor([[0.4000],\n[0.6000]])\ndata = {'y1': [tensor([[0.2434],\n[0.3151],\n[0.1038],\n[0.4767],\n[0.1838]]), tensor([[0.2410],\n[0.3099],\n[0.1036],\n[0.4589],\n[0.1827]])], 'y2': [tensor([[0.9386],\n[0.6771],\n[0.9058],\n[0.5234],\n[0.6710]]), tensor([[0.8067],\n[0.6266],\n[0.7869],\n[0.4999],\n[0.6218]])]}\n</code></pre>"},{"location":"qml/ml_tools/#optimization-routines","title":"Optimization routines","text":"<p>For training QML models, Qadence also offers a few out-of-the-box routines for optimizing differentiable models, e.g. <code>QNN</code>s and <code>QuantumModel</code>, containing either trainable and/or non-trainable parameters (see the parameters tutorial for detailed information about parameter types):</p> <ul> <li><code>train_with_grad</code> for gradient-based optimization using PyTorch native optimizers</li> <li><code>train_gradient_free</code> for gradient-free optimization using the Nevergrad library.</li> </ul> <p>These routines performs training, logging/printing loss metrics and storing intermediate checkpoints of models. In the following, we use <code>train_with_grad</code> as example but the code can be used directly with the gradient-free routine.</p> <p>As every other training routine commonly used in Machine Learning, it requires <code>model</code>, <code>data</code> and an <code>optimizer</code> as input arguments. However, in addition, it requires a <code>loss_fn</code> and a <code>TrainConfig</code>. A <code>loss_fn</code> is required to be a function which expects both a model and data and returns a tuple of (loss, metrics: <code>&lt;dict&gt;</code>), where <code>metrics</code> is a dict of scalars which can be customized too.</p> <pre><code>import torch\nfrom itertools import count\ncnt = count()\ncriterion = torch.nn.MSELoss()\ndef loss_fn(model: torch.nn.Module, data: torch.Tensor) -&gt; tuple[torch.Tensor, dict]:\nnext(cnt)\nx, y = data[0], data[1]\nout = model(x)\nloss = criterion(out, y)\nreturn loss, {}\n</code></pre> <p>The <code>TrainConfig</code> tells <code>train_with_grad</code> what batch_size should be used, how many epochs to train, in which intervals to print/log metrics and how often to store intermediate checkpoints.</p> <pre><code>from qadence.ml_tools import TrainConfig\nbatch_size = 5\nn_epochs = 100\nconfig = TrainConfig(\nfolder=\"some_path/\",\nmax_iter=n_epochs,\ncheckpoint_every=100,\nwrite_every=100,\nbatch_size=batch_size,\n)\n</code></pre> <p>Let's see it in action with a simple example.</p>"},{"location":"qml/ml_tools/#fitting-a-funtion-with-a-qnn-using-ml_tools","title":"Fitting a funtion with a QNN using <code>ml_tools</code>","text":"<p>Let's look at a complete example of how to use <code>train_with_grad</code> now.</p> <pre><code>from pathlib import Path\nimport torch\nfrom itertools import count\nimport matplotlib.pyplot as plt\nfrom qadence import Parameter, QuantumCircuit, Z\nfrom qadence import hamiltonian_factory, hea, feature_map, chain\nfrom qadence.models import QNN\nfrom qadence.ml_tools import  TrainConfig, train_with_grad, to_dataloader\nn_qubits = 2\nfm = feature_map(n_qubits)\nansatz = hea(n_qubits=n_qubits, depth=3)\nobservable = hamiltonian_factory(n_qubits, detuning=Z)\ncircuit = QuantumCircuit(n_qubits, fm, ansatz)\nmodel = QNN(circuit, observable, backend=\"pyqtorch\", diff_mode=\"ad\")\nbatch_size = 1\ninput_values = {\"phi\": torch.rand(batch_size, requires_grad=True)}\npred = model(input_values)\ncnt = count()\ncriterion = torch.nn.MSELoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.1)\ndef loss_fn(model: torch.nn.Module, data: torch.Tensor) -&gt; tuple[torch.Tensor, dict]:\nnext(cnt)\nx, y = data[0], data[1]\nout = model(x)\nloss = criterion(out, y)\nreturn loss, {}\ntmp_path = Path(\"/tmp\")\nn_epochs = 50\nconfig = TrainConfig(\nfolder=tmp_path,\nmax_iter=n_epochs,\ncheckpoint_every=100,\nwrite_every=100,\nbatch_size=batch_size,\n)\nbatch_size = 25\nx = torch.linspace(0, 1, batch_size).reshape(-1, 1)\ny = torch.sin(x)\ndata = to_dataloader(x, y, batch_size=batch_size, infinite=True)\ntrain_with_grad(model, data, optimizer, config, loss_fn=loss_fn)\nplt.plot(x, y)\nplt.plot(x, model(x).detach())\n</code></pre> 2023-11-27T12:00:48.957792 image/svg+xml Matplotlib v3.7.4, https://matplotlib.org/ <p>For users who want to use the low-level API of <code>qadence</code>, here is the example from above written without <code>train_with_grad</code>.</p>"},{"location":"qml/ml_tools/#fitting-a-function-low-level-api","title":"Fitting a function - Low-level API","text":"<pre><code>from pathlib import Path\nimport torch\nfrom itertools import count\nfrom qadence.constructors import hamiltonian_factory, hea, feature_map\nfrom qadence import chain, Parameter, QuantumCircuit, Z\nfrom qadence.models import QNN\nfrom qadence.ml_tools import train_with_grad, TrainConfig\nn_qubits = 2\nfm = feature_map(n_qubits)\nansatz = hea(n_qubits=n_qubits, depth=3)\nobservable = hamiltonian_factory(n_qubits, detuning=Z)\ncircuit = QuantumCircuit(n_qubits, fm, ansatz)\nmodel = QNN(circuit, observable, backend=\"pyqtorch\", diff_mode=\"ad\")\nbatch_size = 1\ninput_values = {\"phi\": torch.rand(batch_size, requires_grad=True)}\npred = model(input_values)\ncriterion = torch.nn.MSELoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.1)\nn_epochs=50\ncnt = count()\ntmp_path = Path(\"/tmp\")\nconfig = TrainConfig(\nfolder=tmp_path,\nmax_iter=n_epochs,\ncheckpoint_every=100,\nwrite_every=100,\nbatch_size=batch_size,\n)\nx = torch.linspace(0, 1, batch_size).reshape(-1, 1)\ny = torch.sin(x)\nfor i in range(n_epochs):\nout = model(x)\nloss = criterion(out, y)\nloss.backward()\noptimizer.step()\n</code></pre>"},{"location":"qml/ml_tools/#custom-train-loop","title":"Custom <code>train</code> loop","text":"<p>If you need custom training functionality that goes beyon what is available in <code>qadence.ml_tools.train_with_grad</code> and <code>qadence.ml_tools.train_gradient_free</code> you can write your own training loop based on the building blocks that are available in Qadence.</p> <p>A simplified version of Qadence's train loop is defined below. Feel free to copy it and modify at will.</p> <pre><code>from typing import Callable, Union\nfrom torch.nn import Module\nfrom torch.optim import Optimizer\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\nfrom qadence.ml_tools.config import TrainConfig\nfrom qadence.ml_tools.data import DictDataLoader, data_to_device\nfrom qadence.ml_tools.optimize_step import optimize_step\nfrom qadence.ml_tools.printing import print_metrics, write_tensorboard\nfrom qadence.ml_tools.saveload import load_checkpoint, write_checkpoint\ndef train(\nmodel: Module,\ndata: DataLoader,\noptimizer: Optimizer,\nconfig: TrainConfig,\nloss_fn: Callable,\ndevice: str = \"cpu\",\noptimize_step: Callable = optimize_step,\nwrite_tensorboard: Callable = write_tensorboard,\n) -&gt; tuple[Module, Optimizer]:\n# Move model to device before optimizer is loaded\nmodel = model.to(device)\n# load available checkpoint\ninit_iter = 0\nif config.folder:\nmodel, optimizer, init_iter = load_checkpoint(config.folder, model, optimizer)\n# initialize tensorboard\nwriter = SummaryWriter(config.folder, purge_step=init_iter)\ndl_iter = iter(dataloader)\n# outer epoch loop\nfor iteration in range(init_iter, init_iter + config.max_iter):\ndata = data_to_device(next(dl_iter), device)\nloss, metrics = optimize_step(model, optimizer, loss_fn, data)\nif iteration % config.print_every == 0 and config.verbose:\nprint_metrics(loss, metrics, iteration)\nif iteration % config.write_every == 0:\nwrite_tensorboard(writer, loss, metrics, iteration)\nif config.folder:\nif iteration % config.checkpoint_every == 0:\nwrite_checkpoint(config.folder, model, optimizer, iteration)\n# Final writing and checkpointing\nif config.folder:\nwrite_checkpoint(config.folder, model, optimizer, iteration)\nwrite_tensorboard(writer, loss, metrics, iteration)\nwriter.close()\nreturn model, optimizer\n</code></pre>"},{"location":"qml/qaoa/","title":"Solving MaxCut with QAOA","text":"<p>This tutorial shows how to solve the maximum cut (MaxCut) combinatorial optimization problem on a graph using the Quantum Approximate Optimization Algorithm (QAOA), first introduced by Farhi et al. in 2014 <sup>1</sup>.</p> <p>Given an arbitrary graph, the MaxCut problem consists in finding a graph cut which partitions the nodes into two disjoint sets, such that the number of edges in the cut is maximized. This is a very common combinatorial optimization problem which is computationally hard.</p> <p>The graph used for this tutorial is a randomly generated using the <code>networkx</code> library with a \\(0.5\\) probability of having an edge between two arbitrary nodes.</p> <pre><code>import numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\n# ensure reproducibility\nseed = 10\nnp.random.seed(seed)\nn_nodes = 8\nedge_prob = 0.5\ngraph = nx.gnp_random_graph(n_nodes, edge_prob)\nnx.draw(graph)\n</code></pre> 2023-11-27T12:00:49.530236 image/svg+xml Matplotlib v3.7.4, https://matplotlib.org/ <p>The goal of the MaxCut algorithm is to maximize the following cost function:</p> \\[\\mathcal{C}(p) = \\sum_{\\alpha}^m \\mathcal{C}_{\\alpha}(p)\\] <p>where \\(p\\) is the given partition of the graph, \\(\\alpha\\) is an index over the edges and \\(\\mathcal{C}_{\\alpha}(p)\\) is written such that if the nodes connected by the \\(\\alpha\\) edge are in the same set, it returns \\(0\\), otherwise it returns \\(1\\).</p>"},{"location":"qml/qaoa/#the-qaoa-quantum-circuit","title":"The QAOA quantum circuit","text":"<p>This problem can be solved by using a parametrized quantum circuit with the QAOA algorithm. This requires a circuit with two main components:</p> <ul> <li>the cost component: a circuit generated by a diagonal Hamiltonian which   encodes the cost function described above into a quantum circuit.</li> <li>the mixing component: a simple set of single-qubit rotations with adjustable   angles which are tuned during the classical optimization loop to minimize the cost</li> </ul> <p>Below, the QAOA quantum circuit with the cost and mixing components is defined using <code>qadence</code> operations. The cost component of each layer of the circuit is decomposed into digital single and two-qubits operations via the <code>.digital_decomposition()</code> method. The decomposition is exact since the Hamiltonian generator is diagonal.</p> <pre><code>from qadence import Zero, I, HamEvo, tag, kron, chain, QuantumCircuit, RX, Z\n# generators associated with the edges of the given graph\nzz_ops = [kron(Z(edge[0]), Z(edge[1])) for edge in graph.edges()]\nn_qubits = graph.number_of_nodes()\nn_layers = 2\ncost_ham = Zero()\nfor op in zz_ops:\ncost_ham += 0.5 * op\ncost_ham = 0.5 * kron(I(i) for i in range(n_qubits)) - cost_ham\nlayers = []\nfor layer in range(n_layers):\n# cost layer with digital decomposition\ncost_layer = HamEvo(cost_ham, f\"g{layer}\").digital_decomposition()\ncost_layer = tag(cost_layer, \"cost\")\n# mixing layer with single qubit rotations\nmixing_layer = kron(RX(i, f\"b{layer}{i}\") for i in range(n_qubits))\nmixing_layer = tag(mixing_layer, \"mixing\")\n# putting all together in a single ChainBlock\nlayers.append(chain(cost_layer, mixing_layer))\nfinal_b = chain(*layers)\ncircuit = QuantumCircuit(n_qubits, final_b)\n</code></pre> %3 cluster_68f7977ac39c4238ac54752988d44908 mixing cluster_14e027cd14b54ec2909af420a82e438d mixing cluster_d5974b23a11249c193fda47693bbf1ee cost cluster_9e5a50b2ddcb457385abfc719ea4e021 cost 052c7f4cd05d4085976e4bde66af1d21 0 b44bc2068a73467cb5e8c5c8061b3108 052c7f4cd05d4085976e4bde66af1d21--b44bc2068a73467cb5e8c5c8061b3108 abf4273f97544c5a864923f01f4c83d6 1 a543eb4d486d48fcb92b913edc0e7f16 b44bc2068a73467cb5e8c5c8061b3108--a543eb4d486d48fcb92b913edc0e7f16 92f7d22548e04791b99c30dfb1e987fe a543eb4d486d48fcb92b913edc0e7f16--92f7d22548e04791b99c30dfb1e987fe 39a493f346ca42daacbeb0fd1d4e26ee 92f7d22548e04791b99c30dfb1e987fe--39a493f346ca42daacbeb0fd1d4e26ee f9156fd89b944045b23e4d93239c87b9 39a493f346ca42daacbeb0fd1d4e26ee--f9156fd89b944045b23e4d93239c87b9 ba2f740222804065967cd3415eef733e f9156fd89b944045b23e4d93239c87b9--ba2f740222804065967cd3415eef733e 435df1d5819a4c61ba1158052c143e9d ba2f740222804065967cd3415eef733e--435df1d5819a4c61ba1158052c143e9d c840ad1b871c45928c490acd354b9563 435df1d5819a4c61ba1158052c143e9d--c840ad1b871c45928c490acd354b9563 7492f70e107e44d1a33013755b61dc0f c840ad1b871c45928c490acd354b9563--7492f70e107e44d1a33013755b61dc0f ae4cc4665b4840308d5e4714e41da9b6 7492f70e107e44d1a33013755b61dc0f--ae4cc4665b4840308d5e4714e41da9b6 825fd4bf717545d5ac27ea015ee97c85 ae4cc4665b4840308d5e4714e41da9b6--825fd4bf717545d5ac27ea015ee97c85 063742a7a54c489f96ccba35c8409596 825fd4bf717545d5ac27ea015ee97c85--063742a7a54c489f96ccba35c8409596 cc0cfeb851884051999e66b6de52c2f3 063742a7a54c489f96ccba35c8409596--cc0cfeb851884051999e66b6de52c2f3 da123ce82108430c8eb9c41ac12999aa cc0cfeb851884051999e66b6de52c2f3--da123ce82108430c8eb9c41ac12999aa 512ddada62bd4b0281daec911b2bab4d da123ce82108430c8eb9c41ac12999aa--512ddada62bd4b0281daec911b2bab4d c874281363ae43c484edff2e8b35cf07 512ddada62bd4b0281daec911b2bab4d--c874281363ae43c484edff2e8b35cf07 164883a7d56543ae8e43b6a02d628519 c874281363ae43c484edff2e8b35cf07--164883a7d56543ae8e43b6a02d628519 6a600f04fe014820a816fcf9ae1dd31f 164883a7d56543ae8e43b6a02d628519--6a600f04fe014820a816fcf9ae1dd31f 4fdee5ba96a84f419b3fe8e4c08fc7d1 6a600f04fe014820a816fcf9ae1dd31f--4fdee5ba96a84f419b3fe8e4c08fc7d1 a4c646525ee2499690867e8ddd527c0a 4fdee5ba96a84f419b3fe8e4c08fc7d1--a4c646525ee2499690867e8ddd527c0a 2493e05fcf5244f79a3c670c5feda942 a4c646525ee2499690867e8ddd527c0a--2493e05fcf5244f79a3c670c5feda942 35a43457276c4f1b81ca3a3ccebc1e29 2493e05fcf5244f79a3c670c5feda942--35a43457276c4f1b81ca3a3ccebc1e29 1f32c2a054dc491dae8857ec5bde3847 35a43457276c4f1b81ca3a3ccebc1e29--1f32c2a054dc491dae8857ec5bde3847 1e2b3e12bdf244bfa0fab2994fed3740 1f32c2a054dc491dae8857ec5bde3847--1e2b3e12bdf244bfa0fab2994fed3740 9c977e3fc0e84c6d9b7c8ea8858ef897 1e2b3e12bdf244bfa0fab2994fed3740--9c977e3fc0e84c6d9b7c8ea8858ef897 4257fd96eb7f4036a0eb4923622a2a32 9c977e3fc0e84c6d9b7c8ea8858ef897--4257fd96eb7f4036a0eb4923622a2a32 26efc6b81fbb444f9b675747b418e6b4 4257fd96eb7f4036a0eb4923622a2a32--26efc6b81fbb444f9b675747b418e6b4 37149d5912a34c428bc8468c54442743 26efc6b81fbb444f9b675747b418e6b4--37149d5912a34c428bc8468c54442743 726fca5593f54ba7912acf0a4500ed4a 37149d5912a34c428bc8468c54442743--726fca5593f54ba7912acf0a4500ed4a c7a74998ab184dc18ab0421e2ff9a651 726fca5593f54ba7912acf0a4500ed4a--c7a74998ab184dc18ab0421e2ff9a651 4a4619295f044cc9800e73643b5996e2 c7a74998ab184dc18ab0421e2ff9a651--4a4619295f044cc9800e73643b5996e2 f73e780cd2b74b9c9510530e5f0532c4 4a4619295f044cc9800e73643b5996e2--f73e780cd2b74b9c9510530e5f0532c4 e79c9eebd86e4abd9c0ed2dd01d7afda f73e780cd2b74b9c9510530e5f0532c4--e79c9eebd86e4abd9c0ed2dd01d7afda a941934a972c4f1c9d3d3393a12979e1 e79c9eebd86e4abd9c0ed2dd01d7afda--a941934a972c4f1c9d3d3393a12979e1 c8ca2199c0cd4f4494a56e131bf38558 a941934a972c4f1c9d3d3393a12979e1--c8ca2199c0cd4f4494a56e131bf38558 92e94092c5844728844c699ae278efc9 c8ca2199c0cd4f4494a56e131bf38558--92e94092c5844728844c699ae278efc9 f3838a53745c4ea8a12802b24bbd3a96 92e94092c5844728844c699ae278efc9--f3838a53745c4ea8a12802b24bbd3a96 c5583cd412ec4af6a516aad660ca6d29 f3838a53745c4ea8a12802b24bbd3a96--c5583cd412ec4af6a516aad660ca6d29 d348689c5ca74bc1bf68d7792a653fd2 c5583cd412ec4af6a516aad660ca6d29--d348689c5ca74bc1bf68d7792a653fd2 365a089c62f440869871d5248e37dfc4 d348689c5ca74bc1bf68d7792a653fd2--365a089c62f440869871d5248e37dfc4 9b82bb725ef94cf0a130ffbaab0171cd 365a089c62f440869871d5248e37dfc4--9b82bb725ef94cf0a130ffbaab0171cd 8f8d37a72e19456295051ac786d9af72 9b82bb725ef94cf0a130ffbaab0171cd--8f8d37a72e19456295051ac786d9af72 487fb6d308e24d63933ce4264e70ca1d 8f8d37a72e19456295051ac786d9af72--487fb6d308e24d63933ce4264e70ca1d f9cc71584e9b44859c268100f117243f 487fb6d308e24d63933ce4264e70ca1d--f9cc71584e9b44859c268100f117243f 98d6cf49874b49c083dfe02752630316 f9cc71584e9b44859c268100f117243f--98d6cf49874b49c083dfe02752630316 0476eb7c95a14c6eb8bd23ae2f63c82c 98d6cf49874b49c083dfe02752630316--0476eb7c95a14c6eb8bd23ae2f63c82c cc04cd79c5cc47579330f161a7f0bb10 0476eb7c95a14c6eb8bd23ae2f63c82c--cc04cd79c5cc47579330f161a7f0bb10 e237d080079a4ff28acf5642cf330e98 cc04cd79c5cc47579330f161a7f0bb10--e237d080079a4ff28acf5642cf330e98 2acb310d42044a949bc9d84b7b751fd8 e237d080079a4ff28acf5642cf330e98--2acb310d42044a949bc9d84b7b751fd8 8d45baf9d4644d2491954affbf473161 2acb310d42044a949bc9d84b7b751fd8--8d45baf9d4644d2491954affbf473161 1c8ba3edf18241dd9112427200ce9b8e 8d45baf9d4644d2491954affbf473161--1c8ba3edf18241dd9112427200ce9b8e 3d0ae8052625426a9b0761f9b3b3142f 1c8ba3edf18241dd9112427200ce9b8e--3d0ae8052625426a9b0761f9b3b3142f 3c37cefb71cb4326b654b5862c1bd0dc 3d0ae8052625426a9b0761f9b3b3142f--3c37cefb71cb4326b654b5862c1bd0dc 4faf1101fc974343808f462ed4b23045 3c37cefb71cb4326b654b5862c1bd0dc--4faf1101fc974343808f462ed4b23045 e736b7b122824ee3b7d588a9a98ca51a 4faf1101fc974343808f462ed4b23045--e736b7b122824ee3b7d588a9a98ca51a 1104cae132254ce091d20d529cea8d36 e736b7b122824ee3b7d588a9a98ca51a--1104cae132254ce091d20d529cea8d36 904e15126cc8478ca1b609aa4f5a3d3b 1104cae132254ce091d20d529cea8d36--904e15126cc8478ca1b609aa4f5a3d3b 9844a5025e4e43878b24abd80735a5d8 904e15126cc8478ca1b609aa4f5a3d3b--9844a5025e4e43878b24abd80735a5d8 24e6aa0e83ec45099cefb62a1592ad27 9844a5025e4e43878b24abd80735a5d8--24e6aa0e83ec45099cefb62a1592ad27 2e76f442db7f41d3be7d71a17316ad28 24e6aa0e83ec45099cefb62a1592ad27--2e76f442db7f41d3be7d71a17316ad28 6b554fd1eb014d67ba7feffe3819255c 2e76f442db7f41d3be7d71a17316ad28--6b554fd1eb014d67ba7feffe3819255c c131df680118431f95814a84ad83456a 6b554fd1eb014d67ba7feffe3819255c--c131df680118431f95814a84ad83456a edbbc8d751f7466b80a92008199b08f8 c131df680118431f95814a84ad83456a--edbbc8d751f7466b80a92008199b08f8 b127c9af784b496791dd59249b5bd101 edbbc8d751f7466b80a92008199b08f8--b127c9af784b496791dd59249b5bd101 5b9776b86e544a61bde82afa35b79a70 b127c9af784b496791dd59249b5bd101--5b9776b86e544a61bde82afa35b79a70 f1446493ca024df890dc6c10a32f6637 5b9776b86e544a61bde82afa35b79a70--f1446493ca024df890dc6c10a32f6637 233804ab4da74d3db5f4f12fb891ce56 f1446493ca024df890dc6c10a32f6637--233804ab4da74d3db5f4f12fb891ce56 29885cc80b414ef39099b364ec56dc10 233804ab4da74d3db5f4f12fb891ce56--29885cc80b414ef39099b364ec56dc10 7747794b478b4aea919d3d636944095b 29885cc80b414ef39099b364ec56dc10--7747794b478b4aea919d3d636944095b c85c567fe1fe4b68b45af2c1da7fcca6 7747794b478b4aea919d3d636944095b--c85c567fe1fe4b68b45af2c1da7fcca6 6d7fb48a5ef340529a33ea89783dc855 c85c567fe1fe4b68b45af2c1da7fcca6--6d7fb48a5ef340529a33ea89783dc855 273e86b474d54217bcfe7b613067e7a8 6d7fb48a5ef340529a33ea89783dc855--273e86b474d54217bcfe7b613067e7a8 4fea11cd0b6f4421b07ca7ead7baf884 273e86b474d54217bcfe7b613067e7a8--4fea11cd0b6f4421b07ca7ead7baf884 6d3b7488eeaf4f6eaca8f489b9829dff 4fea11cd0b6f4421b07ca7ead7baf884--6d3b7488eeaf4f6eaca8f489b9829dff 042e9c48bc91408b86c0589d9deecfe4 6d3b7488eeaf4f6eaca8f489b9829dff--042e9c48bc91408b86c0589d9deecfe4 bd6ec81b4a5e4331ab2dfd78be6e1d34 042e9c48bc91408b86c0589d9deecfe4--bd6ec81b4a5e4331ab2dfd78be6e1d34 253f1e3a11994966a48c9b2e0e1bcf02 bd6ec81b4a5e4331ab2dfd78be6e1d34--253f1e3a11994966a48c9b2e0e1bcf02 0b682d8aae57461aa2e6afbfeee24549 253f1e3a11994966a48c9b2e0e1bcf02--0b682d8aae57461aa2e6afbfeee24549 8eda72dbf2ec420c840ac2bbd20e85cd 0b682d8aae57461aa2e6afbfeee24549--8eda72dbf2ec420c840ac2bbd20e85cd c0e47e643cbe409ebdd8c223a36f0adc 8eda72dbf2ec420c840ac2bbd20e85cd--c0e47e643cbe409ebdd8c223a36f0adc 5a64224be44b4474a23cd39a6bb8f0b7 c0e47e643cbe409ebdd8c223a36f0adc--5a64224be44b4474a23cd39a6bb8f0b7 e119fa4289dc42dea7077bb97d63dd75 5a64224be44b4474a23cd39a6bb8f0b7--e119fa4289dc42dea7077bb97d63dd75 ae56d9eee82f4c8ea1ccdbf5a3302097 e119fa4289dc42dea7077bb97d63dd75--ae56d9eee82f4c8ea1ccdbf5a3302097 6cb427e4b81b4e7180ad7c0fa831cb75 ae56d9eee82f4c8ea1ccdbf5a3302097--6cb427e4b81b4e7180ad7c0fa831cb75 b0050494f4e14eebb602434b9cf63459 6cb427e4b81b4e7180ad7c0fa831cb75--b0050494f4e14eebb602434b9cf63459 d99e157b528942d398abbefd6eb16bba b0050494f4e14eebb602434b9cf63459--d99e157b528942d398abbefd6eb16bba f1fdd6a6a9b54dee920bec39a0092767 d99e157b528942d398abbefd6eb16bba--f1fdd6a6a9b54dee920bec39a0092767 0ce6bfecc0384350823af34dba59b841 f1fdd6a6a9b54dee920bec39a0092767--0ce6bfecc0384350823af34dba59b841 019ab58fd2d1495f9afbb4cd26cd7b34 0ce6bfecc0384350823af34dba59b841--019ab58fd2d1495f9afbb4cd26cd7b34 3affd141c8724abea11a5b83d55ce34d 019ab58fd2d1495f9afbb4cd26cd7b34--3affd141c8724abea11a5b83d55ce34d 2545106a319241ec88bb512ac05bf8c1 3affd141c8724abea11a5b83d55ce34d--2545106a319241ec88bb512ac05bf8c1 d4df29dcfc0147ddbd0f3b63f941c4c6 2545106a319241ec88bb512ac05bf8c1--d4df29dcfc0147ddbd0f3b63f941c4c6 b3955a9e9b71431494c72925b57cfdb5 d4df29dcfc0147ddbd0f3b63f941c4c6--b3955a9e9b71431494c72925b57cfdb5 bb52c1fb4ce6412fbc38ceebf6a079e5 b3955a9e9b71431494c72925b57cfdb5--bb52c1fb4ce6412fbc38ceebf6a079e5 5f62e0177a5b4ad0804a7e4b486502a3 bb52c1fb4ce6412fbc38ceebf6a079e5--5f62e0177a5b4ad0804a7e4b486502a3 02d5af1604c3492d87c84ae9fee6a67c 5f62e0177a5b4ad0804a7e4b486502a3--02d5af1604c3492d87c84ae9fee6a67c 4132ef5e68b74d68955ce8a7343f2b03 02d5af1604c3492d87c84ae9fee6a67c--4132ef5e68b74d68955ce8a7343f2b03 ecb6c4e9143b4909a0b2594b25815090 4132ef5e68b74d68955ce8a7343f2b03--ecb6c4e9143b4909a0b2594b25815090 13a21d4f090c444fa98565c22d8a0519 ecb6c4e9143b4909a0b2594b25815090--13a21d4f090c444fa98565c22d8a0519 e5480b118df146bfa92eeb8ead3c2ab4 13a21d4f090c444fa98565c22d8a0519--e5480b118df146bfa92eeb8ead3c2ab4 a3a083969c924dbca020e9588ceaed69 e5480b118df146bfa92eeb8ead3c2ab4--a3a083969c924dbca020e9588ceaed69 6a87cfe3b7a74bcda9df8a422439a9d0 a3a083969c924dbca020e9588ceaed69--6a87cfe3b7a74bcda9df8a422439a9d0 f20d12fa1f4b4634b4c26e18d4b3f381 6a87cfe3b7a74bcda9df8a422439a9d0--f20d12fa1f4b4634b4c26e18d4b3f381 c5252e6fa4cd4c19afb50f3fc455f4e8 f20d12fa1f4b4634b4c26e18d4b3f381--c5252e6fa4cd4c19afb50f3fc455f4e8 8675497c27094bf6bee39bf6c53ca443 c5252e6fa4cd4c19afb50f3fc455f4e8--8675497c27094bf6bee39bf6c53ca443 fc2e246d962a404e8dcba28f94b325d4 8675497c27094bf6bee39bf6c53ca443--fc2e246d962a404e8dcba28f94b325d4 0855443c442e45f39670e60ef2ebf2ec fc2e246d962a404e8dcba28f94b325d4--0855443c442e45f39670e60ef2ebf2ec 5d1aa364aa654093ad05e7eb323c1036 0855443c442e45f39670e60ef2ebf2ec--5d1aa364aa654093ad05e7eb323c1036 1afe3b2020114436a752b100c1e62886 5d1aa364aa654093ad05e7eb323c1036--1afe3b2020114436a752b100c1e62886 8e0b24b0271e48afba77ceaa920f45cd 1afe3b2020114436a752b100c1e62886--8e0b24b0271e48afba77ceaa920f45cd 0dd0be5f5c3a473f9bd0dc96b08dc4dc 8e0b24b0271e48afba77ceaa920f45cd--0dd0be5f5c3a473f9bd0dc96b08dc4dc 4bf5d36bf84647e88624803afed94ef7 0dd0be5f5c3a473f9bd0dc96b08dc4dc--4bf5d36bf84647e88624803afed94ef7 f4a80462f113475fb244670f4ec82722 4bf5d36bf84647e88624803afed94ef7--f4a80462f113475fb244670f4ec82722 afb5fcb013dd462fa2637b3f33a5b64a f4a80462f113475fb244670f4ec82722--afb5fcb013dd462fa2637b3f33a5b64a 91b0c51774fa4b3197d37bb3231680a4 afb5fcb013dd462fa2637b3f33a5b64a--91b0c51774fa4b3197d37bb3231680a4 0390bc41c7d64ad6a735c89db9f35ac4 91b0c51774fa4b3197d37bb3231680a4--0390bc41c7d64ad6a735c89db9f35ac4 7e3a48aec24b4b01a351a045cd570bcc 0390bc41c7d64ad6a735c89db9f35ac4--7e3a48aec24b4b01a351a045cd570bcc 7206e5c45c5247f89c5444e6a26db485 7e3a48aec24b4b01a351a045cd570bcc--7206e5c45c5247f89c5444e6a26db485 34559782da9242288e0e0442fd5a2d62 7206e5c45c5247f89c5444e6a26db485--34559782da9242288e0e0442fd5a2d62 9440bef2b5ba4682a2a48c86e119dfad 34559782da9242288e0e0442fd5a2d62--9440bef2b5ba4682a2a48c86e119dfad dc93ae62c6144806bdc3a194e835783a 9440bef2b5ba4682a2a48c86e119dfad--dc93ae62c6144806bdc3a194e835783a 922121c7a596446ebf226f2671a0ff28 dc93ae62c6144806bdc3a194e835783a--922121c7a596446ebf226f2671a0ff28 faf47c448ee349929ed70706af4b66f5 922121c7a596446ebf226f2671a0ff28--faf47c448ee349929ed70706af4b66f5 34386a9be5dc49db9ed50c3e394802f9 faf47c448ee349929ed70706af4b66f5--34386a9be5dc49db9ed50c3e394802f9 4f7eeec83c9b48bd9f12c263a0066f37 34386a9be5dc49db9ed50c3e394802f9--4f7eeec83c9b48bd9f12c263a0066f37 8de684f225334a1fa2b5cc470712a077 4f7eeec83c9b48bd9f12c263a0066f37--8de684f225334a1fa2b5cc470712a077 9a0aa54387a445d9a3dfced9b7c0033b 8de684f225334a1fa2b5cc470712a077--9a0aa54387a445d9a3dfced9b7c0033b b434c99fac9f4e078660c7baf2fa2971 9a0aa54387a445d9a3dfced9b7c0033b--b434c99fac9f4e078660c7baf2fa2971 ba11547491984805bf48268bc390a75e b434c99fac9f4e078660c7baf2fa2971--ba11547491984805bf48268bc390a75e 6dbe8f03b8684a92a1073381bc54a9af ba11547491984805bf48268bc390a75e--6dbe8f03b8684a92a1073381bc54a9af 643b8db9176a4ca585e0e57a8561e2a9 6dbe8f03b8684a92a1073381bc54a9af--643b8db9176a4ca585e0e57a8561e2a9 8e7b03b9988b4a46a183cdb6cfe07d73 643b8db9176a4ca585e0e57a8561e2a9--8e7b03b9988b4a46a183cdb6cfe07d73 be9d2abdf4aa48f996fbc9fb8780e9fc 8e7b03b9988b4a46a183cdb6cfe07d73--be9d2abdf4aa48f996fbc9fb8780e9fc d9d4963239df4648941a40c52b676011 be9d2abdf4aa48f996fbc9fb8780e9fc--d9d4963239df4648941a40c52b676011 4f6afd9556b742858b22c150ca02ddbf d9d4963239df4648941a40c52b676011--4f6afd9556b742858b22c150ca02ddbf b514f60e9dbc4a5eaed9109212a9a3d1 4f6afd9556b742858b22c150ca02ddbf--b514f60e9dbc4a5eaed9109212a9a3d1 9de6332e98ae41219f45b0ae970cc837 b514f60e9dbc4a5eaed9109212a9a3d1--9de6332e98ae41219f45b0ae970cc837 08ce672555034bf19c5c8fb0ec8bd9c5 RX(b00) 9de6332e98ae41219f45b0ae970cc837--08ce672555034bf19c5c8fb0ec8bd9c5 e73227bef23e48d29b2add3b5663420b 08ce672555034bf19c5c8fb0ec8bd9c5--e73227bef23e48d29b2add3b5663420b 85a1bd83195d48ffb3e305fae84b18e7 e73227bef23e48d29b2add3b5663420b--85a1bd83195d48ffb3e305fae84b18e7 27ee89e9e4d4429db9c7e7978dc5d32a 85a1bd83195d48ffb3e305fae84b18e7--27ee89e9e4d4429db9c7e7978dc5d32a e70b7d84ec944d28970c4193e96d8899 27ee89e9e4d4429db9c7e7978dc5d32a--e70b7d84ec944d28970c4193e96d8899 c6c32ccd026d4268b4eed251050d856b e70b7d84ec944d28970c4193e96d8899--c6c32ccd026d4268b4eed251050d856b 7d04fdb770ae4ee2890fcd0d58ab6f0c c6c32ccd026d4268b4eed251050d856b--7d04fdb770ae4ee2890fcd0d58ab6f0c a4769b792a6b43a7a83890c8a0d167c8 7d04fdb770ae4ee2890fcd0d58ab6f0c--a4769b792a6b43a7a83890c8a0d167c8 e55ca02686b54fce8a22d8deb956790b a4769b792a6b43a7a83890c8a0d167c8--e55ca02686b54fce8a22d8deb956790b 01a292c99e214664a35481ae7572e861 e55ca02686b54fce8a22d8deb956790b--01a292c99e214664a35481ae7572e861 62e3ce505f1743d3a5b54148449e80a2 01a292c99e214664a35481ae7572e861--62e3ce505f1743d3a5b54148449e80a2 f48f5086aa814abda3b5c8dadb26ceea 62e3ce505f1743d3a5b54148449e80a2--f48f5086aa814abda3b5c8dadb26ceea be3db2f7b9f3470295bad0958b8b7d2c f48f5086aa814abda3b5c8dadb26ceea--be3db2f7b9f3470295bad0958b8b7d2c 1bbd3be77e134399b532f97d4d280edc be3db2f7b9f3470295bad0958b8b7d2c--1bbd3be77e134399b532f97d4d280edc 1b22a56b6b994093a3b1e800155998e0 1bbd3be77e134399b532f97d4d280edc--1b22a56b6b994093a3b1e800155998e0 c02e1bd395564ecebc917bdfda058c11 1b22a56b6b994093a3b1e800155998e0--c02e1bd395564ecebc917bdfda058c11 50b5e66be42d462da16d3c4b8c5e42d2 c02e1bd395564ecebc917bdfda058c11--50b5e66be42d462da16d3c4b8c5e42d2 04582399d6f54d6ca91810a26257d0e0 50b5e66be42d462da16d3c4b8c5e42d2--04582399d6f54d6ca91810a26257d0e0 2d0952874eb443949c0e2fab1bbe3ac7 04582399d6f54d6ca91810a26257d0e0--2d0952874eb443949c0e2fab1bbe3ac7 2d4ae0f6a007419db1a29adef0d9cc75 2d0952874eb443949c0e2fab1bbe3ac7--2d4ae0f6a007419db1a29adef0d9cc75 b2d8c2c867994c54b384b3235cba1619 2d4ae0f6a007419db1a29adef0d9cc75--b2d8c2c867994c54b384b3235cba1619 10e06643b36b49568cef4a170fdbd5aa b2d8c2c867994c54b384b3235cba1619--10e06643b36b49568cef4a170fdbd5aa 99479100ea604826b112901030ac29e8 10e06643b36b49568cef4a170fdbd5aa--99479100ea604826b112901030ac29e8 b815127b5d0f458386c5bbb48aa21349 99479100ea604826b112901030ac29e8--b815127b5d0f458386c5bbb48aa21349 30caac1eb5c544249e6f6a21a561c61e b815127b5d0f458386c5bbb48aa21349--30caac1eb5c544249e6f6a21a561c61e 28256246d6934f1c9f0562b180f659f6 30caac1eb5c544249e6f6a21a561c61e--28256246d6934f1c9f0562b180f659f6 fccde673cac34591a17805dae5fa3b66 28256246d6934f1c9f0562b180f659f6--fccde673cac34591a17805dae5fa3b66 cbca034e61574207bcbfdf0b843d757c fccde673cac34591a17805dae5fa3b66--cbca034e61574207bcbfdf0b843d757c 8f461cbe437441208869c397446abb24 cbca034e61574207bcbfdf0b843d757c--8f461cbe437441208869c397446abb24 f4c3a2843ca442b9a229a2660a036403 8f461cbe437441208869c397446abb24--f4c3a2843ca442b9a229a2660a036403 8325224a233f4695bee1b4a1d160f677 f4c3a2843ca442b9a229a2660a036403--8325224a233f4695bee1b4a1d160f677 cc8f24e341534ac2ac5f7c69e2f554dd 8325224a233f4695bee1b4a1d160f677--cc8f24e341534ac2ac5f7c69e2f554dd e16fa9cea5ce476e9bd2b3cdd45ddaf1 cc8f24e341534ac2ac5f7c69e2f554dd--e16fa9cea5ce476e9bd2b3cdd45ddaf1 792c179a257d4be89aa16a2c9d67088b e16fa9cea5ce476e9bd2b3cdd45ddaf1--792c179a257d4be89aa16a2c9d67088b 4ee2f22603f3441baa5059be235775c0 792c179a257d4be89aa16a2c9d67088b--4ee2f22603f3441baa5059be235775c0 325438ee3ef64628b709ac26e0e03cd9 4ee2f22603f3441baa5059be235775c0--325438ee3ef64628b709ac26e0e03cd9 62daa2330c5445fba16ed23d69490c8c 325438ee3ef64628b709ac26e0e03cd9--62daa2330c5445fba16ed23d69490c8c 20de9fc2d3eb4ae889408a4cd2358642 62daa2330c5445fba16ed23d69490c8c--20de9fc2d3eb4ae889408a4cd2358642 afa9a29d57dd4153b405f3f4e610f079 20de9fc2d3eb4ae889408a4cd2358642--afa9a29d57dd4153b405f3f4e610f079 47877c73b71943139986ca1a1d3ccdc4 afa9a29d57dd4153b405f3f4e610f079--47877c73b71943139986ca1a1d3ccdc4 a10b2f64059146f5841dd4ade87c3886 47877c73b71943139986ca1a1d3ccdc4--a10b2f64059146f5841dd4ade87c3886 1b8a9960d729430ca8570bf8d845b447 a10b2f64059146f5841dd4ade87c3886--1b8a9960d729430ca8570bf8d845b447 b238e77400924f238ec7ab8db7dee57c 1b8a9960d729430ca8570bf8d845b447--b238e77400924f238ec7ab8db7dee57c 7d98a90ad31342cf8e1f434ba0446640 b238e77400924f238ec7ab8db7dee57c--7d98a90ad31342cf8e1f434ba0446640 b41a858e0852448cb6fcd436af797132 7d98a90ad31342cf8e1f434ba0446640--b41a858e0852448cb6fcd436af797132 f8786f61fb8b4fa7a4974d1a5ecf1682 b41a858e0852448cb6fcd436af797132--f8786f61fb8b4fa7a4974d1a5ecf1682 f693ad15d8d049e3982e49bfa6010687 f8786f61fb8b4fa7a4974d1a5ecf1682--f693ad15d8d049e3982e49bfa6010687 03506ed02c9542ae90216461a74e431e f693ad15d8d049e3982e49bfa6010687--03506ed02c9542ae90216461a74e431e 02eeb45893624eb2ba25dd5c3129caf4 03506ed02c9542ae90216461a74e431e--02eeb45893624eb2ba25dd5c3129caf4 d9a1804d051048e8ae776c66331d638a 02eeb45893624eb2ba25dd5c3129caf4--d9a1804d051048e8ae776c66331d638a 21141ed908f946d38db57108b3bff398 d9a1804d051048e8ae776c66331d638a--21141ed908f946d38db57108b3bff398 3be4ba3bb8984dbdb6eae6a83047243c 21141ed908f946d38db57108b3bff398--3be4ba3bb8984dbdb6eae6a83047243c 85e775cee342499bbc26338d9c7f6027 3be4ba3bb8984dbdb6eae6a83047243c--85e775cee342499bbc26338d9c7f6027 8071b2b6aefe4f56a487d764e20095c0 85e775cee342499bbc26338d9c7f6027--8071b2b6aefe4f56a487d764e20095c0 f90baab85b394941be610d3a49461386 8071b2b6aefe4f56a487d764e20095c0--f90baab85b394941be610d3a49461386 4fb59fbb491e4c08bd0f9ca73f895124 f90baab85b394941be610d3a49461386--4fb59fbb491e4c08bd0f9ca73f895124 14f824c3fd2e417897d4146f1ab4ddf8 4fb59fbb491e4c08bd0f9ca73f895124--14f824c3fd2e417897d4146f1ab4ddf8 7a7f84509a4f46679100a7727f96b20a 14f824c3fd2e417897d4146f1ab4ddf8--7a7f84509a4f46679100a7727f96b20a a31541ba0e824e23a5fdf970dafa0670 7a7f84509a4f46679100a7727f96b20a--a31541ba0e824e23a5fdf970dafa0670 6f5688bb44d348cf9082f9e96205471d a31541ba0e824e23a5fdf970dafa0670--6f5688bb44d348cf9082f9e96205471d f37c7c9f947a4f65831c1dfb96f4b6b8 6f5688bb44d348cf9082f9e96205471d--f37c7c9f947a4f65831c1dfb96f4b6b8 a71853700fed4c17ba69a07387d4c6c2 f37c7c9f947a4f65831c1dfb96f4b6b8--a71853700fed4c17ba69a07387d4c6c2 d460bce00c7646ecbeb58e1ff3277900 a71853700fed4c17ba69a07387d4c6c2--d460bce00c7646ecbeb58e1ff3277900 5938a330c220471baa7e8090252ad541 d460bce00c7646ecbeb58e1ff3277900--5938a330c220471baa7e8090252ad541 8e4a0749316345099e8388abb6de2cc3 5938a330c220471baa7e8090252ad541--8e4a0749316345099e8388abb6de2cc3 c102fafb254f44c9b08714ccce770bda 8e4a0749316345099e8388abb6de2cc3--c102fafb254f44c9b08714ccce770bda 4281efe6a61f478fab9d89baeccb5736 c102fafb254f44c9b08714ccce770bda--4281efe6a61f478fab9d89baeccb5736 37666a2547b64a968eece4fe55913656 4281efe6a61f478fab9d89baeccb5736--37666a2547b64a968eece4fe55913656 e2baf9a7685d408cacf01b75d633ccc5 37666a2547b64a968eece4fe55913656--e2baf9a7685d408cacf01b75d633ccc5 e5855530982b4283af4cd61497ab7518 e2baf9a7685d408cacf01b75d633ccc5--e5855530982b4283af4cd61497ab7518 b85fb0aadc3d4174aefb795d6a28ab30 e5855530982b4283af4cd61497ab7518--b85fb0aadc3d4174aefb795d6a28ab30 30a72157b347480a8e19a5bcd3948c47 b85fb0aadc3d4174aefb795d6a28ab30--30a72157b347480a8e19a5bcd3948c47 3d8a0b4473df4b4d843ed798caf111ca 30a72157b347480a8e19a5bcd3948c47--3d8a0b4473df4b4d843ed798caf111ca 37248ad5dc4e4aa0996c1fa58d75f6e3 3d8a0b4473df4b4d843ed798caf111ca--37248ad5dc4e4aa0996c1fa58d75f6e3 6970d61f970546eb8792ae192fa57269 37248ad5dc4e4aa0996c1fa58d75f6e3--6970d61f970546eb8792ae192fa57269 543c59815cdb4401a17f7c62f5f8f68b 6970d61f970546eb8792ae192fa57269--543c59815cdb4401a17f7c62f5f8f68b da5fcfc02dcb446c98be4ca54fa4941c 543c59815cdb4401a17f7c62f5f8f68b--da5fcfc02dcb446c98be4ca54fa4941c 77ba11b4b97548e1a40833fb47997f9f da5fcfc02dcb446c98be4ca54fa4941c--77ba11b4b97548e1a40833fb47997f9f fae488055d9f4117a4cb9ad29a9f1d1d 77ba11b4b97548e1a40833fb47997f9f--fae488055d9f4117a4cb9ad29a9f1d1d a18f1b9eb11b4ea48fbca9ba9b9e1105 fae488055d9f4117a4cb9ad29a9f1d1d--a18f1b9eb11b4ea48fbca9ba9b9e1105 bf449f925890400095af71277e7fe79c a18f1b9eb11b4ea48fbca9ba9b9e1105--bf449f925890400095af71277e7fe79c ebf187d53add4127b8adcaf199987647 bf449f925890400095af71277e7fe79c--ebf187d53add4127b8adcaf199987647 c886ca021c8146db940da3eaffcd8bf8 ebf187d53add4127b8adcaf199987647--c886ca021c8146db940da3eaffcd8bf8 5476ccd83ba44980b480d4ff566cf351 c886ca021c8146db940da3eaffcd8bf8--5476ccd83ba44980b480d4ff566cf351 224962c4f9aa4daa9a005f01fd36fd4e 5476ccd83ba44980b480d4ff566cf351--224962c4f9aa4daa9a005f01fd36fd4e 8caef68f059f4900b64a1008c4ad9e10 224962c4f9aa4daa9a005f01fd36fd4e--8caef68f059f4900b64a1008c4ad9e10 8954ea284d654714b98da1bc55f2cdff 8caef68f059f4900b64a1008c4ad9e10--8954ea284d654714b98da1bc55f2cdff 7b51c56a27994d7d87376f8c5f9343b7 8954ea284d654714b98da1bc55f2cdff--7b51c56a27994d7d87376f8c5f9343b7 89e419a45dee414fba81e8a59e59ae64 7b51c56a27994d7d87376f8c5f9343b7--89e419a45dee414fba81e8a59e59ae64 3035442ffedd4280a78dede9b103f0d3 89e419a45dee414fba81e8a59e59ae64--3035442ffedd4280a78dede9b103f0d3 356f5d024ed4406084e9bbedbd525911 3035442ffedd4280a78dede9b103f0d3--356f5d024ed4406084e9bbedbd525911 6095be68be9249c68ecd8e791cf433f7 356f5d024ed4406084e9bbedbd525911--6095be68be9249c68ecd8e791cf433f7 158eee0c8d744526bd625c12061ffa50 6095be68be9249c68ecd8e791cf433f7--158eee0c8d744526bd625c12061ffa50 1e2c8d2e3ece43f493cbfbdcd0de0020 158eee0c8d744526bd625c12061ffa50--1e2c8d2e3ece43f493cbfbdcd0de0020 4baa1b3a5b6848258248e0bfbe9b4288 1e2c8d2e3ece43f493cbfbdcd0de0020--4baa1b3a5b6848258248e0bfbe9b4288 b1f716fd73894648a73c22598061d4a4 4baa1b3a5b6848258248e0bfbe9b4288--b1f716fd73894648a73c22598061d4a4 84cd7c23a9e649af995e638cc33172e3 b1f716fd73894648a73c22598061d4a4--84cd7c23a9e649af995e638cc33172e3 c7afcac2ff9f4ec8a2c5eeab9c6eb3a2 84cd7c23a9e649af995e638cc33172e3--c7afcac2ff9f4ec8a2c5eeab9c6eb3a2 a3e30daf0b3a4ab4a9776655606f13e5 c7afcac2ff9f4ec8a2c5eeab9c6eb3a2--a3e30daf0b3a4ab4a9776655606f13e5 133e4c80ac8f461ca9e2848bb53dfed5 a3e30daf0b3a4ab4a9776655606f13e5--133e4c80ac8f461ca9e2848bb53dfed5 c70257867bba4c4ebcd0ab79e04125e3 133e4c80ac8f461ca9e2848bb53dfed5--c70257867bba4c4ebcd0ab79e04125e3 507fca47942f4921a067cfb46d35a7e6 c70257867bba4c4ebcd0ab79e04125e3--507fca47942f4921a067cfb46d35a7e6 ad3e8dd7e637423d8b0ceda505c7c14c 507fca47942f4921a067cfb46d35a7e6--ad3e8dd7e637423d8b0ceda505c7c14c c71c4e548d094e859295b1399460ac47 ad3e8dd7e637423d8b0ceda505c7c14c--c71c4e548d094e859295b1399460ac47 29a769c28f204e1894b323f313e60647 c71c4e548d094e859295b1399460ac47--29a769c28f204e1894b323f313e60647 ec8efa170d00435397d37ad9f51db3a9 29a769c28f204e1894b323f313e60647--ec8efa170d00435397d37ad9f51db3a9 1e70b995e46b48b491327663ea3d61e6 ec8efa170d00435397d37ad9f51db3a9--1e70b995e46b48b491327663ea3d61e6 cdd8df4127fd4b0eb1edf66acc6a428b 1e70b995e46b48b491327663ea3d61e6--cdd8df4127fd4b0eb1edf66acc6a428b e905fa976b3345b3adc20b6fcc6dd752 cdd8df4127fd4b0eb1edf66acc6a428b--e905fa976b3345b3adc20b6fcc6dd752 d4eb5c36818b4cb1ad4c409f1fbf8bb4 e905fa976b3345b3adc20b6fcc6dd752--d4eb5c36818b4cb1ad4c409f1fbf8bb4 e7f8f7eafe2a46ed9070acab004a8992 d4eb5c36818b4cb1ad4c409f1fbf8bb4--e7f8f7eafe2a46ed9070acab004a8992 14aba4af3eff49ebad95c759123047f4 e7f8f7eafe2a46ed9070acab004a8992--14aba4af3eff49ebad95c759123047f4 65b1242979904f83a0565880afca4f48 14aba4af3eff49ebad95c759123047f4--65b1242979904f83a0565880afca4f48 1194e6275676442ea8857f4e8eddda0b 65b1242979904f83a0565880afca4f48--1194e6275676442ea8857f4e8eddda0b e49d99defbb642f79c4c0ac4959ac9d6 1194e6275676442ea8857f4e8eddda0b--e49d99defbb642f79c4c0ac4959ac9d6 ee1e743027b046c38f5fd02e120a70df e49d99defbb642f79c4c0ac4959ac9d6--ee1e743027b046c38f5fd02e120a70df 7b635b745e794fc2b3da14a17d7c12e8 ee1e743027b046c38f5fd02e120a70df--7b635b745e794fc2b3da14a17d7c12e8 4f5abc36771b4bf5b386161fb3f06de7 7b635b745e794fc2b3da14a17d7c12e8--4f5abc36771b4bf5b386161fb3f06de7 9ff3ad377f974fb2b86f3d816aab8510 4f5abc36771b4bf5b386161fb3f06de7--9ff3ad377f974fb2b86f3d816aab8510 51022eaa7eca4ad9bc042536c4eb1ec9 9ff3ad377f974fb2b86f3d816aab8510--51022eaa7eca4ad9bc042536c4eb1ec9 76a9c72a9e824bfc97bd0511d9b7a30b 51022eaa7eca4ad9bc042536c4eb1ec9--76a9c72a9e824bfc97bd0511d9b7a30b 5d230d8a5a324ee9b288449a7b10381d 76a9c72a9e824bfc97bd0511d9b7a30b--5d230d8a5a324ee9b288449a7b10381d 95e858a42c124b539ece327165b860e7 5d230d8a5a324ee9b288449a7b10381d--95e858a42c124b539ece327165b860e7 bb2501ebacf94bd8a92c0d819af7b5c8 95e858a42c124b539ece327165b860e7--bb2501ebacf94bd8a92c0d819af7b5c8 1f2ce1d4a6ac43dfa91d13aac1970ab7 bb2501ebacf94bd8a92c0d819af7b5c8--1f2ce1d4a6ac43dfa91d13aac1970ab7 82bdbbf97266408381174246cbb05a43 1f2ce1d4a6ac43dfa91d13aac1970ab7--82bdbbf97266408381174246cbb05a43 b51e16f3d35245f799dbfa9fa3b3338b 82bdbbf97266408381174246cbb05a43--b51e16f3d35245f799dbfa9fa3b3338b 1f684985536842998a72594a0fd3d3cc b51e16f3d35245f799dbfa9fa3b3338b--1f684985536842998a72594a0fd3d3cc 084e1151e77341fbafad294684c8b819 1f684985536842998a72594a0fd3d3cc--084e1151e77341fbafad294684c8b819 91dd8cdefd364b40abc4951adbe13bea 084e1151e77341fbafad294684c8b819--91dd8cdefd364b40abc4951adbe13bea 3e8fecf015c042f99211bae259ede932 91dd8cdefd364b40abc4951adbe13bea--3e8fecf015c042f99211bae259ede932 d110e49bfdf74c42a27de37abce1cc40 3e8fecf015c042f99211bae259ede932--d110e49bfdf74c42a27de37abce1cc40 8907a1f9450644c3b63be5bc6cc8ade2 d110e49bfdf74c42a27de37abce1cc40--8907a1f9450644c3b63be5bc6cc8ade2 47434766eb374687bffb22f7b6fcd2fa 8907a1f9450644c3b63be5bc6cc8ade2--47434766eb374687bffb22f7b6fcd2fa e0792dcf8b914ee9a70b4ca3c5ab8b34 47434766eb374687bffb22f7b6fcd2fa--e0792dcf8b914ee9a70b4ca3c5ab8b34 52c503e5a162448f9fbe55d03815dc4d e0792dcf8b914ee9a70b4ca3c5ab8b34--52c503e5a162448f9fbe55d03815dc4d 1acbc7282c0948f1b7ac3efd18cfb7f9 52c503e5a162448f9fbe55d03815dc4d--1acbc7282c0948f1b7ac3efd18cfb7f9 c4bac676510b4d028920898898eabbe9 1acbc7282c0948f1b7ac3efd18cfb7f9--c4bac676510b4d028920898898eabbe9 e337ba144d584242aa3b359c085ff73a RX(b10) c4bac676510b4d028920898898eabbe9--e337ba144d584242aa3b359c085ff73a a3ce3f13ad894692b66eec782f225d2d e337ba144d584242aa3b359c085ff73a--a3ce3f13ad894692b66eec782f225d2d 6814834ac08a4a9ca9873083f101f444 379fec62063340dc947d98420978224b X abf4273f97544c5a864923f01f4c83d6--379fec62063340dc947d98420978224b f332489bba1e48558d01b72496b5d223 2 379fec62063340dc947d98420978224b--b44bc2068a73467cb5e8c5c8061b3108 aa7c5c25aa144eee800e4b868219afb6 379fec62063340dc947d98420978224b--aa7c5c25aa144eee800e4b868219afb6 90a8c45db03f40efa1370d6e6b746bd5 aa7c5c25aa144eee800e4b868219afb6--90a8c45db03f40efa1370d6e6b746bd5 3e5456363e2f435d981c521b3e609709 90a8c45db03f40efa1370d6e6b746bd5--3e5456363e2f435d981c521b3e609709 7c6eb4fd05894b5abc89d0452d9ea2ce 3e5456363e2f435d981c521b3e609709--7c6eb4fd05894b5abc89d0452d9ea2ce cc9c270fbeb0414ab8d6c75aac90396d 7c6eb4fd05894b5abc89d0452d9ea2ce--cc9c270fbeb0414ab8d6c75aac90396d efada487fdaa40b9a2649421ab95e81e cc9c270fbeb0414ab8d6c75aac90396d--efada487fdaa40b9a2649421ab95e81e ed7890f58cc74e3c8b120598413cf734 efada487fdaa40b9a2649421ab95e81e--ed7890f58cc74e3c8b120598413cf734 c5a9659f5b6b47069392ae3a759bf982 ed7890f58cc74e3c8b120598413cf734--c5a9659f5b6b47069392ae3a759bf982 9569279b04664623a33754f211dd218f c5a9659f5b6b47069392ae3a759bf982--9569279b04664623a33754f211dd218f 8d89801a8c5e4bda82cf0c77d0fcc667 9569279b04664623a33754f211dd218f--8d89801a8c5e4bda82cf0c77d0fcc667 c729462578d649b4b9fc7fda2542dc63 8d89801a8c5e4bda82cf0c77d0fcc667--c729462578d649b4b9fc7fda2542dc63 23e12f3340f44fdaaf21627fe5e7eb73 c729462578d649b4b9fc7fda2542dc63--23e12f3340f44fdaaf21627fe5e7eb73 06a751f8c9be471cb2a1f2333fb6f7fe 23e12f3340f44fdaaf21627fe5e7eb73--06a751f8c9be471cb2a1f2333fb6f7fe 89270fd0441f4bc38f32c56b142e9605 X 06a751f8c9be471cb2a1f2333fb6f7fe--89270fd0441f4bc38f32c56b142e9605 89270fd0441f4bc38f32c56b142e9605--512ddada62bd4b0281daec911b2bab4d 5aa9026b2d5c45a1a060d4ed8bbcd685 X 89270fd0441f4bc38f32c56b142e9605--5aa9026b2d5c45a1a060d4ed8bbcd685 5aa9026b2d5c45a1a060d4ed8bbcd685--c874281363ae43c484edff2e8b35cf07 118a5c90e9574c21ab0a0061865d810f 5aa9026b2d5c45a1a060d4ed8bbcd685--118a5c90e9574c21ab0a0061865d810f 23b56cc57f434457acd66c76ea782d2c 118a5c90e9574c21ab0a0061865d810f--23b56cc57f434457acd66c76ea782d2c fecd6998738c48bf9ce2b6619880af67 23b56cc57f434457acd66c76ea782d2c--fecd6998738c48bf9ce2b6619880af67 ba0b101015404ab3b43bc1678557148f X fecd6998738c48bf9ce2b6619880af67--ba0b101015404ab3b43bc1678557148f ba0b101015404ab3b43bc1678557148f--a4c646525ee2499690867e8ddd527c0a 097ea3f09b694fba91ae2f982b5b6992 X ba0b101015404ab3b43bc1678557148f--097ea3f09b694fba91ae2f982b5b6992 097ea3f09b694fba91ae2f982b5b6992--2493e05fcf5244f79a3c670c5feda942 2dc5f79352074c71adb5fc0702c03827 097ea3f09b694fba91ae2f982b5b6992--2dc5f79352074c71adb5fc0702c03827 0317d29f71ae49b5a57a4971877715c2 2dc5f79352074c71adb5fc0702c03827--0317d29f71ae49b5a57a4971877715c2 e2949f99d8d144118da91bfd952e7aaa 0317d29f71ae49b5a57a4971877715c2--e2949f99d8d144118da91bfd952e7aaa c3d8b518c18e4bfb8cea6c98ae686772 e2949f99d8d144118da91bfd952e7aaa--c3d8b518c18e4bfb8cea6c98ae686772 1ef00375eba94e769462c56a21df7e7e c3d8b518c18e4bfb8cea6c98ae686772--1ef00375eba94e769462c56a21df7e7e 34ef78d63585478d974b7652093e8c14 X 1ef00375eba94e769462c56a21df7e7e--34ef78d63585478d974b7652093e8c14 34ef78d63585478d974b7652093e8c14--26efc6b81fbb444f9b675747b418e6b4 d55ee05a87574e87809a7aad94f78e60 X 34ef78d63585478d974b7652093e8c14--d55ee05a87574e87809a7aad94f78e60 d55ee05a87574e87809a7aad94f78e60--37149d5912a34c428bc8468c54442743 e5bcd2a27c81422b81226820b4836a8c d55ee05a87574e87809a7aad94f78e60--e5bcd2a27c81422b81226820b4836a8c a25e113b23a44071a7897a65124e7805 e5bcd2a27c81422b81226820b4836a8c--a25e113b23a44071a7897a65124e7805 16a3cc7bfdd64bc5b56726c3a331e89b a25e113b23a44071a7897a65124e7805--16a3cc7bfdd64bc5b56726c3a331e89b 5daee50251ba443cb69ab0181a583103 16a3cc7bfdd64bc5b56726c3a331e89b--5daee50251ba443cb69ab0181a583103 a3893d0dae7b44fab7912a90d22e262b 5daee50251ba443cb69ab0181a583103--a3893d0dae7b44fab7912a90d22e262b f6fc9e124f0543afbb0e29b7d7bc9392 a3893d0dae7b44fab7912a90d22e262b--f6fc9e124f0543afbb0e29b7d7bc9392 7d2ea1e24eef4bc7837a1048a27e138d f6fc9e124f0543afbb0e29b7d7bc9392--7d2ea1e24eef4bc7837a1048a27e138d ca6a77dc21c74312b3b17bb91197f78e 7d2ea1e24eef4bc7837a1048a27e138d--ca6a77dc21c74312b3b17bb91197f78e 6935879396b4480ab6b4cd0dc845063d ca6a77dc21c74312b3b17bb91197f78e--6935879396b4480ab6b4cd0dc845063d e37c56537d7b461fafebbb564d267e78 X 6935879396b4480ab6b4cd0dc845063d--e37c56537d7b461fafebbb564d267e78 e37c56537d7b461fafebbb564d267e78--c5583cd412ec4af6a516aad660ca6d29 7617d0aa4e1545d0bd7bcd0a48086f9e X e37c56537d7b461fafebbb564d267e78--7617d0aa4e1545d0bd7bcd0a48086f9e 7617d0aa4e1545d0bd7bcd0a48086f9e--d348689c5ca74bc1bf68d7792a653fd2 af730d4f980b408288c98c09fd8be36a 7617d0aa4e1545d0bd7bcd0a48086f9e--af730d4f980b408288c98c09fd8be36a 09a630ada97f468d8a306db7dd749227 af730d4f980b408288c98c09fd8be36a--09a630ada97f468d8a306db7dd749227 99f16df8ebd7482cb338759a51437687 09a630ada97f468d8a306db7dd749227--99f16df8ebd7482cb338759a51437687 e706688797464c4b8b5d1784dc242ac3 99f16df8ebd7482cb338759a51437687--e706688797464c4b8b5d1784dc242ac3 07ef58677c364bb0afc299d1122dfd2c e706688797464c4b8b5d1784dc242ac3--07ef58677c364bb0afc299d1122dfd2c 32b0a029b3fb466198de7860e9737374 07ef58677c364bb0afc299d1122dfd2c--32b0a029b3fb466198de7860e9737374 a62c580b8d5042b591276400d4ab4855 32b0a029b3fb466198de7860e9737374--a62c580b8d5042b591276400d4ab4855 4cf054b17b2341f3b2d10e843846764c a62c580b8d5042b591276400d4ab4855--4cf054b17b2341f3b2d10e843846764c 677a838d276e4900a479a743a7b9d822 4cf054b17b2341f3b2d10e843846764c--677a838d276e4900a479a743a7b9d822 ebb693451d474e92bb61ad5137c1d269 677a838d276e4900a479a743a7b9d822--ebb693451d474e92bb61ad5137c1d269 a2ed239eebc34a5aad3221e59a9999c4 ebb693451d474e92bb61ad5137c1d269--a2ed239eebc34a5aad3221e59a9999c4 752277c72c65434d9da4a17059381ce5 X a2ed239eebc34a5aad3221e59a9999c4--752277c72c65434d9da4a17059381ce5 752277c72c65434d9da4a17059381ce5--1c8ba3edf18241dd9112427200ce9b8e 06fca1915afa46248736e5f91fa08236 X 752277c72c65434d9da4a17059381ce5--06fca1915afa46248736e5f91fa08236 06fca1915afa46248736e5f91fa08236--3d0ae8052625426a9b0761f9b3b3142f 04f437a7bc30493e849a18804057a90f 06fca1915afa46248736e5f91fa08236--04f437a7bc30493e849a18804057a90f d5a3f0f544e149f88996793e06c3d8c4 04f437a7bc30493e849a18804057a90f--d5a3f0f544e149f88996793e06c3d8c4 39cb8331375c442c9f2c8e280b837f1c d5a3f0f544e149f88996793e06c3d8c4--39cb8331375c442c9f2c8e280b837f1c 989f397bda5641e5ba9aa89d4b681e1b 39cb8331375c442c9f2c8e280b837f1c--989f397bda5641e5ba9aa89d4b681e1b f53cca5ae7f143d386685729d04cf337 989f397bda5641e5ba9aa89d4b681e1b--f53cca5ae7f143d386685729d04cf337 e0e23f33335a4e1e9e47cfe471452e58 f53cca5ae7f143d386685729d04cf337--e0e23f33335a4e1e9e47cfe471452e58 8e6b5ec23f2e4856a800ee26c17b569b e0e23f33335a4e1e9e47cfe471452e58--8e6b5ec23f2e4856a800ee26c17b569b 3f92b7b04d2f44519e3e27b52ede46a0 8e6b5ec23f2e4856a800ee26c17b569b--3f92b7b04d2f44519e3e27b52ede46a0 cf60eaacfb8e468aa4438a04912f893d 3f92b7b04d2f44519e3e27b52ede46a0--cf60eaacfb8e468aa4438a04912f893d 3068041a667949fd899450da8ea27271 cf60eaacfb8e468aa4438a04912f893d--3068041a667949fd899450da8ea27271 7eeb5e83da7941478e3d618c30a12b2a 3068041a667949fd899450da8ea27271--7eeb5e83da7941478e3d618c30a12b2a 3e9cec7d47fd46988f06ddf6e985ce98 7eeb5e83da7941478e3d618c30a12b2a--3e9cec7d47fd46988f06ddf6e985ce98 7c966c19c68340db991ef5f7cbb420a4 3e9cec7d47fd46988f06ddf6e985ce98--7c966c19c68340db991ef5f7cbb420a4 26348d0b4548497ca62902163a08083d X 7c966c19c68340db991ef5f7cbb420a4--26348d0b4548497ca62902163a08083d 26348d0b4548497ca62902163a08083d--f1446493ca024df890dc6c10a32f6637 dfc95911c8b74e2988066e2a29f87ee1 26348d0b4548497ca62902163a08083d--dfc95911c8b74e2988066e2a29f87ee1 064ede4213dc481982004893a53f01b4 dfc95911c8b74e2988066e2a29f87ee1--064ede4213dc481982004893a53f01b4 8f3552036d5e47739d72e9bb83eadb69 064ede4213dc481982004893a53f01b4--8f3552036d5e47739d72e9bb83eadb69 b7c554961fb04e4dbc91b67c23196a79 8f3552036d5e47739d72e9bb83eadb69--b7c554961fb04e4dbc91b67c23196a79 0793cc5bab284ba1a32e57c847b6caea b7c554961fb04e4dbc91b67c23196a79--0793cc5bab284ba1a32e57c847b6caea 5588a7c3b1074028868c001711db5912 0793cc5bab284ba1a32e57c847b6caea--5588a7c3b1074028868c001711db5912 30afa1a869284ac89895bf7f2cc68952 5588a7c3b1074028868c001711db5912--30afa1a869284ac89895bf7f2cc68952 d683d3b00b37420493ea0baa5b1895f3 30afa1a869284ac89895bf7f2cc68952--d683d3b00b37420493ea0baa5b1895f3 997f85c36a4e41c0aec30041d10dd5b3 d683d3b00b37420493ea0baa5b1895f3--997f85c36a4e41c0aec30041d10dd5b3 32b0f595b40e4fe5a5895b65a0f27a45 997f85c36a4e41c0aec30041d10dd5b3--32b0f595b40e4fe5a5895b65a0f27a45 cfd482d3583c47dd849b4fe8cdcde4fc 32b0f595b40e4fe5a5895b65a0f27a45--cfd482d3583c47dd849b4fe8cdcde4fc ee66d95e072e45ca97a239f38f6bf5e3 cfd482d3583c47dd849b4fe8cdcde4fc--ee66d95e072e45ca97a239f38f6bf5e3 f169a865484440ae9d56370509f70bd9 ee66d95e072e45ca97a239f38f6bf5e3--f169a865484440ae9d56370509f70bd9 d5ce190329894368b002195458f895b3 f169a865484440ae9d56370509f70bd9--d5ce190329894368b002195458f895b3 654f936a9d36443086bc0482f37efc87 d5ce190329894368b002195458f895b3--654f936a9d36443086bc0482f37efc87 5029531b562044f4a40c19228a3a6b16 654f936a9d36443086bc0482f37efc87--5029531b562044f4a40c19228a3a6b16 ce79561eea1e478d9e3dbe4557c3ed40 5029531b562044f4a40c19228a3a6b16--ce79561eea1e478d9e3dbe4557c3ed40 4a79531fb57345d5b96502982440808f ce79561eea1e478d9e3dbe4557c3ed40--4a79531fb57345d5b96502982440808f d0a7ff6afb224b83a527e09fd7f57d07 4a79531fb57345d5b96502982440808f--d0a7ff6afb224b83a527e09fd7f57d07 ea473e7755d5479b9a9d23ba3d32013c d0a7ff6afb224b83a527e09fd7f57d07--ea473e7755d5479b9a9d23ba3d32013c 3e252baf71f74125a5c1bd17d71bd68a ea473e7755d5479b9a9d23ba3d32013c--3e252baf71f74125a5c1bd17d71bd68a abf913dc6c1542c88c524b769f351338 3e252baf71f74125a5c1bd17d71bd68a--abf913dc6c1542c88c524b769f351338 229c29767ffd4892b3928aa4ee9de1b3 abf913dc6c1542c88c524b769f351338--229c29767ffd4892b3928aa4ee9de1b3 80cc6363a15a4974884e8de9f4392add 229c29767ffd4892b3928aa4ee9de1b3--80cc6363a15a4974884e8de9f4392add cf4d69f9daf049889074da93714e6a82 80cc6363a15a4974884e8de9f4392add--cf4d69f9daf049889074da93714e6a82 d1e1392c6bb246649ee5016fd7d46d17 cf4d69f9daf049889074da93714e6a82--d1e1392c6bb246649ee5016fd7d46d17 2ced05f9e4a94343a2bc0ef2862d5a6f d1e1392c6bb246649ee5016fd7d46d17--2ced05f9e4a94343a2bc0ef2862d5a6f 466959ef7e4645cf89a6b6ab7a507f52 2ced05f9e4a94343a2bc0ef2862d5a6f--466959ef7e4645cf89a6b6ab7a507f52 84445140e2304957aff28b5032459a5d 466959ef7e4645cf89a6b6ab7a507f52--84445140e2304957aff28b5032459a5d 8e038c7b59664ef2ab7d4692a90469be 84445140e2304957aff28b5032459a5d--8e038c7b59664ef2ab7d4692a90469be 605c655f42da433d8f228e11c7c9327c 8e038c7b59664ef2ab7d4692a90469be--605c655f42da433d8f228e11c7c9327c 163609fe16884d85824ec9021ac1791e 605c655f42da433d8f228e11c7c9327c--163609fe16884d85824ec9021ac1791e 179248113ca84d09b0f5c70aeed99054 163609fe16884d85824ec9021ac1791e--179248113ca84d09b0f5c70aeed99054 b17cc1f7426d4e478aedcf7408a60fd5 179248113ca84d09b0f5c70aeed99054--b17cc1f7426d4e478aedcf7408a60fd5 c0f926eef0a94cd6a4bebf9c56ea3a12 b17cc1f7426d4e478aedcf7408a60fd5--c0f926eef0a94cd6a4bebf9c56ea3a12 684fbdd77be44f3892f72dc4126f6fee c0f926eef0a94cd6a4bebf9c56ea3a12--684fbdd77be44f3892f72dc4126f6fee 77b2741ef92148e38336e7f148b9d91d 684fbdd77be44f3892f72dc4126f6fee--77b2741ef92148e38336e7f148b9d91d b64cbef52ed242259b8491088a6da46f 77b2741ef92148e38336e7f148b9d91d--b64cbef52ed242259b8491088a6da46f 7f87766f7059420b89ed81da7b7af9eb b64cbef52ed242259b8491088a6da46f--7f87766f7059420b89ed81da7b7af9eb a1e632ead22644d6b84499fc1dd9485a 7f87766f7059420b89ed81da7b7af9eb--a1e632ead22644d6b84499fc1dd9485a 19d47c32bf8f467c936ea003a45d43ff a1e632ead22644d6b84499fc1dd9485a--19d47c32bf8f467c936ea003a45d43ff ab5bf26f92d94060a136a07d8f8696e4 19d47c32bf8f467c936ea003a45d43ff--ab5bf26f92d94060a136a07d8f8696e4 b9ff721b46bd4c9d9f14ce8ce8b018df ab5bf26f92d94060a136a07d8f8696e4--b9ff721b46bd4c9d9f14ce8ce8b018df 6db533c9eb574397a0184152616df76f b9ff721b46bd4c9d9f14ce8ce8b018df--6db533c9eb574397a0184152616df76f 221d367d814b4d32a91ec9d3ce9129c6 6db533c9eb574397a0184152616df76f--221d367d814b4d32a91ec9d3ce9129c6 1825104e94fa478999c5aaa5e88b890d 221d367d814b4d32a91ec9d3ce9129c6--1825104e94fa478999c5aaa5e88b890d 8d090cb3832d4b05903256fa8685a301 1825104e94fa478999c5aaa5e88b890d--8d090cb3832d4b05903256fa8685a301 954ad66be8054a03bebb013285389739 8d090cb3832d4b05903256fa8685a301--954ad66be8054a03bebb013285389739 b2899bff283d4257964c40dd1789574e 954ad66be8054a03bebb013285389739--b2899bff283d4257964c40dd1789574e de4c3ac49eee4bf9b3df3c2afc279071 b2899bff283d4257964c40dd1789574e--de4c3ac49eee4bf9b3df3c2afc279071 138c70103c414f158bbb41dcd44c472e de4c3ac49eee4bf9b3df3c2afc279071--138c70103c414f158bbb41dcd44c472e afc6916868804bdba8051696d43b27ca 138c70103c414f158bbb41dcd44c472e--afc6916868804bdba8051696d43b27ca cac711071dc346db8d4b329cfb518dbd afc6916868804bdba8051696d43b27ca--cac711071dc346db8d4b329cfb518dbd ea56424adfb14f24a0fb98fcbc73b347 cac711071dc346db8d4b329cfb518dbd--ea56424adfb14f24a0fb98fcbc73b347 5ecc95d9abda4eeeb73c4af4305701e7 ea56424adfb14f24a0fb98fcbc73b347--5ecc95d9abda4eeeb73c4af4305701e7 749a6aed8c8f45bcaff52f447658ef05 5ecc95d9abda4eeeb73c4af4305701e7--749a6aed8c8f45bcaff52f447658ef05 e0f8e2659f0b42e5b5ec0834afc07c97 749a6aed8c8f45bcaff52f447658ef05--e0f8e2659f0b42e5b5ec0834afc07c97 b34001b3b6584011b93395bd0398cb10 e0f8e2659f0b42e5b5ec0834afc07c97--b34001b3b6584011b93395bd0398cb10 8db44fdf77184158ada671313dec4960 b34001b3b6584011b93395bd0398cb10--8db44fdf77184158ada671313dec4960 055ff935a5dd470c80472b2a1cc57d0b 8db44fdf77184158ada671313dec4960--055ff935a5dd470c80472b2a1cc57d0b 993e70cc8e46445f9fe0ae991156586b 055ff935a5dd470c80472b2a1cc57d0b--993e70cc8e46445f9fe0ae991156586b 161bc52d56854340aca1774983164b9b 993e70cc8e46445f9fe0ae991156586b--161bc52d56854340aca1774983164b9b 0421ad9f46154996861a505dfdefcc96 161bc52d56854340aca1774983164b9b--0421ad9f46154996861a505dfdefcc96 07b9d3ea562846acab1ca9139b66d94a 0421ad9f46154996861a505dfdefcc96--07b9d3ea562846acab1ca9139b66d94a 87b65225b3f3471ca8172f8534a68f70 07b9d3ea562846acab1ca9139b66d94a--87b65225b3f3471ca8172f8534a68f70 3a32ca38656a4ba7b6dc42e50f2508aa 87b65225b3f3471ca8172f8534a68f70--3a32ca38656a4ba7b6dc42e50f2508aa 414345edc9e04dc8a85ee0e0ecea6ba6 3a32ca38656a4ba7b6dc42e50f2508aa--414345edc9e04dc8a85ee0e0ecea6ba6 57e9563209494e3cabb17b076f26b766 414345edc9e04dc8a85ee0e0ecea6ba6--57e9563209494e3cabb17b076f26b766 524ed8b2cb5e49ca8a003c9c590eaad1 57e9563209494e3cabb17b076f26b766--524ed8b2cb5e49ca8a003c9c590eaad1 8391805281d941c1b04ffee8b07c3658 524ed8b2cb5e49ca8a003c9c590eaad1--8391805281d941c1b04ffee8b07c3658 87ed7df12012404a9cc7d3970285f627 8391805281d941c1b04ffee8b07c3658--87ed7df12012404a9cc7d3970285f627 32ce1e32ddba4ec7b613b6782bbd9822 RX(b01) 87ed7df12012404a9cc7d3970285f627--32ce1e32ddba4ec7b613b6782bbd9822 49c3fa9130c540bf9f61813406a5c2ea X 32ce1e32ddba4ec7b613b6782bbd9822--49c3fa9130c540bf9f61813406a5c2ea 49c3fa9130c540bf9f61813406a5c2ea--e73227bef23e48d29b2add3b5663420b 4ac05b5313244623a06685e9b06abcdc 49c3fa9130c540bf9f61813406a5c2ea--4ac05b5313244623a06685e9b06abcdc b97c86fbfbe043aabf5bac7d0552d39a 4ac05b5313244623a06685e9b06abcdc--b97c86fbfbe043aabf5bac7d0552d39a 17fce8c920794e3ca35ef60ce4c0366d b97c86fbfbe043aabf5bac7d0552d39a--17fce8c920794e3ca35ef60ce4c0366d 02ef18374dc540379c76dc8696145b51 17fce8c920794e3ca35ef60ce4c0366d--02ef18374dc540379c76dc8696145b51 92b43a15ba4b49bfb4f56a922feef695 02ef18374dc540379c76dc8696145b51--92b43a15ba4b49bfb4f56a922feef695 66da62cd97fb483283a351e87f4a646a 92b43a15ba4b49bfb4f56a922feef695--66da62cd97fb483283a351e87f4a646a 8cbd0186a4454c688ee89681dca95c7d 66da62cd97fb483283a351e87f4a646a--8cbd0186a4454c688ee89681dca95c7d 46e4e0716ee747a2b9c09dff6b114379 8cbd0186a4454c688ee89681dca95c7d--46e4e0716ee747a2b9c09dff6b114379 220c0125cc0c4468b259a43fb8879306 46e4e0716ee747a2b9c09dff6b114379--220c0125cc0c4468b259a43fb8879306 9887ac9b13404f10ab14b2121a6c205b 220c0125cc0c4468b259a43fb8879306--9887ac9b13404f10ab14b2121a6c205b 3d238a6ef4784008bde3d4ac8829d9ca 9887ac9b13404f10ab14b2121a6c205b--3d238a6ef4784008bde3d4ac8829d9ca 52bd03a9e173434da5817f34d585c19f 3d238a6ef4784008bde3d4ac8829d9ca--52bd03a9e173434da5817f34d585c19f 4e830f3f0d4942fca1e5d172410bb9e1 52bd03a9e173434da5817f34d585c19f--4e830f3f0d4942fca1e5d172410bb9e1 cad741d2117c4b77933bec2c48c94a4e X 4e830f3f0d4942fca1e5d172410bb9e1--cad741d2117c4b77933bec2c48c94a4e cad741d2117c4b77933bec2c48c94a4e--c02e1bd395564ecebc917bdfda058c11 b03f0c19b699429082c45705f2903b52 X cad741d2117c4b77933bec2c48c94a4e--b03f0c19b699429082c45705f2903b52 b03f0c19b699429082c45705f2903b52--50b5e66be42d462da16d3c4b8c5e42d2 78540d16e46c43feb5148126878164cd b03f0c19b699429082c45705f2903b52--78540d16e46c43feb5148126878164cd be218edf01514e8287ad95f26510bd20 78540d16e46c43feb5148126878164cd--be218edf01514e8287ad95f26510bd20 c651b42122c0451c847d16c0fdfcd8dc be218edf01514e8287ad95f26510bd20--c651b42122c0451c847d16c0fdfcd8dc f223ab94862d4cda87fc098b4c9d13fe X c651b42122c0451c847d16c0fdfcd8dc--f223ab94862d4cda87fc098b4c9d13fe f223ab94862d4cda87fc098b4c9d13fe--b2d8c2c867994c54b384b3235cba1619 7cc0f5568093437d94732f0c54fa0033 X f223ab94862d4cda87fc098b4c9d13fe--7cc0f5568093437d94732f0c54fa0033 7cc0f5568093437d94732f0c54fa0033--10e06643b36b49568cef4a170fdbd5aa 8bff2af2d2024bc5aef270118f92e503 7cc0f5568093437d94732f0c54fa0033--8bff2af2d2024bc5aef270118f92e503 79fa9de0fb60488bbfd4b00b13346cd3 8bff2af2d2024bc5aef270118f92e503--79fa9de0fb60488bbfd4b00b13346cd3 87f39fd63991421a8f30101caefcc791 79fa9de0fb60488bbfd4b00b13346cd3--87f39fd63991421a8f30101caefcc791 b96d3b926f6d48e4b9103ca5dd604f79 87f39fd63991421a8f30101caefcc791--b96d3b926f6d48e4b9103ca5dd604f79 aefda303a8b74eeaa39d844b16b65ce0 b96d3b926f6d48e4b9103ca5dd604f79--aefda303a8b74eeaa39d844b16b65ce0 761869d60e314557926332cbc59c3149 X aefda303a8b74eeaa39d844b16b65ce0--761869d60e314557926332cbc59c3149 761869d60e314557926332cbc59c3149--cbca034e61574207bcbfdf0b843d757c 922b0c5e5fcc448bb17ced519095936e X 761869d60e314557926332cbc59c3149--922b0c5e5fcc448bb17ced519095936e 922b0c5e5fcc448bb17ced519095936e--8f461cbe437441208869c397446abb24 7e5e4d75870549c1b492a9194b6c55eb 922b0c5e5fcc448bb17ced519095936e--7e5e4d75870549c1b492a9194b6c55eb ad210bc4bdc341e38413173ecfda6777 7e5e4d75870549c1b492a9194b6c55eb--ad210bc4bdc341e38413173ecfda6777 75448e77e2274cd5bd3978cbf271f492 ad210bc4bdc341e38413173ecfda6777--75448e77e2274cd5bd3978cbf271f492 7ecf6422d9dc44e0a5fd7c2da24b4915 75448e77e2274cd5bd3978cbf271f492--7ecf6422d9dc44e0a5fd7c2da24b4915 a8cbdf568ab44bfcadb4bbb5cd7bfd43 7ecf6422d9dc44e0a5fd7c2da24b4915--a8cbdf568ab44bfcadb4bbb5cd7bfd43 b4503bf09fe54354a3a17c8f405f37a0 a8cbdf568ab44bfcadb4bbb5cd7bfd43--b4503bf09fe54354a3a17c8f405f37a0 f32b7b263fe142f19759dc6ad13a6c43 b4503bf09fe54354a3a17c8f405f37a0--f32b7b263fe142f19759dc6ad13a6c43 30338567ff574fdab589c2a641100c62 f32b7b263fe142f19759dc6ad13a6c43--30338567ff574fdab589c2a641100c62 ac7c9f1d917140819ec4b0d607a3495e 30338567ff574fdab589c2a641100c62--ac7c9f1d917140819ec4b0d607a3495e 02b3ced4cadb415e9fa638a83bcb4913 X ac7c9f1d917140819ec4b0d607a3495e--02b3ced4cadb415e9fa638a83bcb4913 02b3ced4cadb415e9fa638a83bcb4913--afa9a29d57dd4153b405f3f4e610f079 526f153f74dd48ceae94f6a82742359b X 02b3ced4cadb415e9fa638a83bcb4913--526f153f74dd48ceae94f6a82742359b 526f153f74dd48ceae94f6a82742359b--47877c73b71943139986ca1a1d3ccdc4 1062a72f0ee34eaf9ab2c863a8497e8c 526f153f74dd48ceae94f6a82742359b--1062a72f0ee34eaf9ab2c863a8497e8c 62cc236912004ead8d0ff14fa2809e16 1062a72f0ee34eaf9ab2c863a8497e8c--62cc236912004ead8d0ff14fa2809e16 687ea1f72e6948b599715d6eaf7e8a65 62cc236912004ead8d0ff14fa2809e16--687ea1f72e6948b599715d6eaf7e8a65 5762c34caa5e41b880aa3fcb3f9ba55b 687ea1f72e6948b599715d6eaf7e8a65--5762c34caa5e41b880aa3fcb3f9ba55b 547f2862b70041a98c45d7dc1a2c6fc0 5762c34caa5e41b880aa3fcb3f9ba55b--547f2862b70041a98c45d7dc1a2c6fc0 1e267ab5344c4c79acbd4ae754483aa7 547f2862b70041a98c45d7dc1a2c6fc0--1e267ab5344c4c79acbd4ae754483aa7 bac04ddc72474f4ca1c4bab55afadd6a 1e267ab5344c4c79acbd4ae754483aa7--bac04ddc72474f4ca1c4bab55afadd6a 4c5c4af6723d4e90a76c9801f8cb60c5 bac04ddc72474f4ca1c4bab55afadd6a--4c5c4af6723d4e90a76c9801f8cb60c5 2e3aff3bf67f4df7b0e01fbec934a36d 4c5c4af6723d4e90a76c9801f8cb60c5--2e3aff3bf67f4df7b0e01fbec934a36d 6d5d7fbe3fbb44c8a9fc91593a9b7745 2e3aff3bf67f4df7b0e01fbec934a36d--6d5d7fbe3fbb44c8a9fc91593a9b7745 4d9ebc828e2b4d6ca5009ddc8087cb6c 6d5d7fbe3fbb44c8a9fc91593a9b7745--4d9ebc828e2b4d6ca5009ddc8087cb6c 9f6fea1b6477462c90410461eeded8a2 X 4d9ebc828e2b4d6ca5009ddc8087cb6c--9f6fea1b6477462c90410461eeded8a2 9f6fea1b6477462c90410461eeded8a2--3be4ba3bb8984dbdb6eae6a83047243c 9904690cca13432682eb247a78363bf0 X 9f6fea1b6477462c90410461eeded8a2--9904690cca13432682eb247a78363bf0 9904690cca13432682eb247a78363bf0--85e775cee342499bbc26338d9c7f6027 a8f7b977fbbf4baf8a1debce80179ed7 9904690cca13432682eb247a78363bf0--a8f7b977fbbf4baf8a1debce80179ed7 1e9f7290b56048f9bbe4272adbadea71 a8f7b977fbbf4baf8a1debce80179ed7--1e9f7290b56048f9bbe4272adbadea71 eb6a0ffb1efe4b968d2cb6519b4f18ed 1e9f7290b56048f9bbe4272adbadea71--eb6a0ffb1efe4b968d2cb6519b4f18ed cf6919716db14a71b293cf6402cbd855 eb6a0ffb1efe4b968d2cb6519b4f18ed--cf6919716db14a71b293cf6402cbd855 a6bd0bb354304a30997f299a0bb1a8fb cf6919716db14a71b293cf6402cbd855--a6bd0bb354304a30997f299a0bb1a8fb 12b9cffd94734e0cb1ad6c9c1f680ccf a6bd0bb354304a30997f299a0bb1a8fb--12b9cffd94734e0cb1ad6c9c1f680ccf 110cd490598543b59c2f0aca5a3fbcb7 12b9cffd94734e0cb1ad6c9c1f680ccf--110cd490598543b59c2f0aca5a3fbcb7 6aa0da5d89614d3781aa74c10c44686e 110cd490598543b59c2f0aca5a3fbcb7--6aa0da5d89614d3781aa74c10c44686e 3bd8abade001434da39aa0dea3a76d77 6aa0da5d89614d3781aa74c10c44686e--3bd8abade001434da39aa0dea3a76d77 2c85e2d27dff4282891a9d818f5d1652 3bd8abade001434da39aa0dea3a76d77--2c85e2d27dff4282891a9d818f5d1652 ba02db9814964bc19b19e79019a65105 2c85e2d27dff4282891a9d818f5d1652--ba02db9814964bc19b19e79019a65105 538317d6d9fa42579cc988be52a91abd ba02db9814964bc19b19e79019a65105--538317d6d9fa42579cc988be52a91abd aaa8ec58d71f4f95beba4803524de97a 538317d6d9fa42579cc988be52a91abd--aaa8ec58d71f4f95beba4803524de97a c2193b10cb604635966f3489324d5f47 X aaa8ec58d71f4f95beba4803524de97a--c2193b10cb604635966f3489324d5f47 c2193b10cb604635966f3489324d5f47--4281efe6a61f478fab9d89baeccb5736 f5c4abcbd284415fb71d2883fc7ad39c c2193b10cb604635966f3489324d5f47--f5c4abcbd284415fb71d2883fc7ad39c fdd0e8adf89b4abebeef8ffbd39e51fb f5c4abcbd284415fb71d2883fc7ad39c--fdd0e8adf89b4abebeef8ffbd39e51fb 193e3b2988464520a4a031afaad8ccb5 fdd0e8adf89b4abebeef8ffbd39e51fb--193e3b2988464520a4a031afaad8ccb5 649ae83bb68e4400ba21e1f9798ebae9 193e3b2988464520a4a031afaad8ccb5--649ae83bb68e4400ba21e1f9798ebae9 8e6b70e2b77742d8a7c327f9d746ee01 649ae83bb68e4400ba21e1f9798ebae9--8e6b70e2b77742d8a7c327f9d746ee01 57d6286e310c4f3d8e6453922f082350 8e6b70e2b77742d8a7c327f9d746ee01--57d6286e310c4f3d8e6453922f082350 d3c88fbacd6148558370a33b04fc61ce 57d6286e310c4f3d8e6453922f082350--d3c88fbacd6148558370a33b04fc61ce 90fa226bab924d3bb20250c332db1242 d3c88fbacd6148558370a33b04fc61ce--90fa226bab924d3bb20250c332db1242 52986e748b4146d4a2fd36847c0dcdf1 90fa226bab924d3bb20250c332db1242--52986e748b4146d4a2fd36847c0dcdf1 db076776f93d4872882f587a17ec0443 52986e748b4146d4a2fd36847c0dcdf1--db076776f93d4872882f587a17ec0443 aa30effa4f2749cb9bccd0f7df7b0cd0 db076776f93d4872882f587a17ec0443--aa30effa4f2749cb9bccd0f7df7b0cd0 92bba2119686453ba2144f84584c127c aa30effa4f2749cb9bccd0f7df7b0cd0--92bba2119686453ba2144f84584c127c ce56a893623f4a0bb6dc6f6aa2cb44c0 92bba2119686453ba2144f84584c127c--ce56a893623f4a0bb6dc6f6aa2cb44c0 8498352ebe3d4b4ca93378129f5f83e7 ce56a893623f4a0bb6dc6f6aa2cb44c0--8498352ebe3d4b4ca93378129f5f83e7 494d95b82200425087c116196cb2c949 8498352ebe3d4b4ca93378129f5f83e7--494d95b82200425087c116196cb2c949 639f13a001694d6c8e66d392bd0f2c49 494d95b82200425087c116196cb2c949--639f13a001694d6c8e66d392bd0f2c49 2667a7cde5d24a6ba9d000d7bdfe871d 639f13a001694d6c8e66d392bd0f2c49--2667a7cde5d24a6ba9d000d7bdfe871d 6f87a1627833450d9bb924441b0f300b 2667a7cde5d24a6ba9d000d7bdfe871d--6f87a1627833450d9bb924441b0f300b 3c38f2fb7d1a4b61974157ba16fae72d 6f87a1627833450d9bb924441b0f300b--3c38f2fb7d1a4b61974157ba16fae72d b7370f1b48334c5b8f03dd620f1f83b3 3c38f2fb7d1a4b61974157ba16fae72d--b7370f1b48334c5b8f03dd620f1f83b3 3451a0ed616a440fb8b6f89442bc0c78 b7370f1b48334c5b8f03dd620f1f83b3--3451a0ed616a440fb8b6f89442bc0c78 0c64c8d12ff2455ca7482865c9571c11 3451a0ed616a440fb8b6f89442bc0c78--0c64c8d12ff2455ca7482865c9571c11 6e09957f9e214b9db69d38cec113ffe1 0c64c8d12ff2455ca7482865c9571c11--6e09957f9e214b9db69d38cec113ffe1 3a0604da469a42b9b0b1629c3bd71480 6e09957f9e214b9db69d38cec113ffe1--3a0604da469a42b9b0b1629c3bd71480 1943be735c024e5d819f9be34a91f216 3a0604da469a42b9b0b1629c3bd71480--1943be735c024e5d819f9be34a91f216 1ddc2e7143e740f6a954cf972b4e26a3 1943be735c024e5d819f9be34a91f216--1ddc2e7143e740f6a954cf972b4e26a3 5780cf64378c4b3ca21618fef8dd2e21 1ddc2e7143e740f6a954cf972b4e26a3--5780cf64378c4b3ca21618fef8dd2e21 c12514d235f44b299a1a145e30ec6b05 5780cf64378c4b3ca21618fef8dd2e21--c12514d235f44b299a1a145e30ec6b05 ec37bc1b65354a769db00d6557ea4252 c12514d235f44b299a1a145e30ec6b05--ec37bc1b65354a769db00d6557ea4252 2c5b0468aa2d40659d581fd8cead6a20 ec37bc1b65354a769db00d6557ea4252--2c5b0468aa2d40659d581fd8cead6a20 acdab4854c7245c685402f426a32dec0 2c5b0468aa2d40659d581fd8cead6a20--acdab4854c7245c685402f426a32dec0 a09341e13aeb4aef86fe15733bb592e6 acdab4854c7245c685402f426a32dec0--a09341e13aeb4aef86fe15733bb592e6 fa03158108c24499afdb59e7414b6f6f a09341e13aeb4aef86fe15733bb592e6--fa03158108c24499afdb59e7414b6f6f 52ab2d6bc8ab4e4e9bb5b68040931362 fa03158108c24499afdb59e7414b6f6f--52ab2d6bc8ab4e4e9bb5b68040931362 7c8848893b044866a48dc0a44ed191a0 52ab2d6bc8ab4e4e9bb5b68040931362--7c8848893b044866a48dc0a44ed191a0 81def96effde45aebb824dbaaae30114 7c8848893b044866a48dc0a44ed191a0--81def96effde45aebb824dbaaae30114 595296778cee43a488cd04db6283e9ec 81def96effde45aebb824dbaaae30114--595296778cee43a488cd04db6283e9ec aa36a55ca03443b8ba5957c504641e4d 595296778cee43a488cd04db6283e9ec--aa36a55ca03443b8ba5957c504641e4d 939d679cdefe4f34a92bebf1f91e620d aa36a55ca03443b8ba5957c504641e4d--939d679cdefe4f34a92bebf1f91e620d a6aaa4e95f3a4566aeb7e8bc795d604c 939d679cdefe4f34a92bebf1f91e620d--a6aaa4e95f3a4566aeb7e8bc795d604c a45dfd24512749ac971332baaad09ae8 a6aaa4e95f3a4566aeb7e8bc795d604c--a45dfd24512749ac971332baaad09ae8 8c0395bffef64b54aad08ddf68050cd1 a45dfd24512749ac971332baaad09ae8--8c0395bffef64b54aad08ddf68050cd1 23b3a50112f04306aaabdd8191f7dc96 8c0395bffef64b54aad08ddf68050cd1--23b3a50112f04306aaabdd8191f7dc96 6e32d323180f44178b04a54f06a74413 23b3a50112f04306aaabdd8191f7dc96--6e32d323180f44178b04a54f06a74413 fefe7279690e42b4b1da2046784c0fd8 6e32d323180f44178b04a54f06a74413--fefe7279690e42b4b1da2046784c0fd8 7c0c45737e9145599529480ad25b0206 fefe7279690e42b4b1da2046784c0fd8--7c0c45737e9145599529480ad25b0206 a143ee287bae47c88fbf87df003af95c 7c0c45737e9145599529480ad25b0206--a143ee287bae47c88fbf87df003af95c e835e0c3d2cc4e918fee406d041dc502 a143ee287bae47c88fbf87df003af95c--e835e0c3d2cc4e918fee406d041dc502 f914c9e854b04c86bab3d6cbd6542141 e835e0c3d2cc4e918fee406d041dc502--f914c9e854b04c86bab3d6cbd6542141 73a7d0a9998f46da8bab570bd08087cf f914c9e854b04c86bab3d6cbd6542141--73a7d0a9998f46da8bab570bd08087cf 29a30963a36f45c9816734b10a96bf1b 73a7d0a9998f46da8bab570bd08087cf--29a30963a36f45c9816734b10a96bf1b d974e99d359e438a96200a52b0bedd9a 29a30963a36f45c9816734b10a96bf1b--d974e99d359e438a96200a52b0bedd9a 5e89dfd8bf5e4c61ae9c2600ff4a527b d974e99d359e438a96200a52b0bedd9a--5e89dfd8bf5e4c61ae9c2600ff4a527b 88feb90ee306402db167a886f04d39ff 5e89dfd8bf5e4c61ae9c2600ff4a527b--88feb90ee306402db167a886f04d39ff b1ec73c922394afa856a4b59c79068dc 88feb90ee306402db167a886f04d39ff--b1ec73c922394afa856a4b59c79068dc 873d765fe5fe40ebafc7b8f886c0fcda b1ec73c922394afa856a4b59c79068dc--873d765fe5fe40ebafc7b8f886c0fcda 84254b7f0f5f4bf8a4cd9b8631e6cb0f 873d765fe5fe40ebafc7b8f886c0fcda--84254b7f0f5f4bf8a4cd9b8631e6cb0f 02d26cf8f808448c9727ef4b7a5f86d6 84254b7f0f5f4bf8a4cd9b8631e6cb0f--02d26cf8f808448c9727ef4b7a5f86d6 d27990664b6d40ea9de2ef88837ecdcb 02d26cf8f808448c9727ef4b7a5f86d6--d27990664b6d40ea9de2ef88837ecdcb e4e6438315e64b0e8237d76b67bf3192 d27990664b6d40ea9de2ef88837ecdcb--e4e6438315e64b0e8237d76b67bf3192 c9148ae7bc0a487a8ddb45a06e8a9932 e4e6438315e64b0e8237d76b67bf3192--c9148ae7bc0a487a8ddb45a06e8a9932 37ae05efe77c493a8b120c9313d63a65 c9148ae7bc0a487a8ddb45a06e8a9932--37ae05efe77c493a8b120c9313d63a65 9720378479ea49668db7ebae850e771f 37ae05efe77c493a8b120c9313d63a65--9720378479ea49668db7ebae850e771f 5cef80211fb14bafa540a5d60e3ce925 9720378479ea49668db7ebae850e771f--5cef80211fb14bafa540a5d60e3ce925 d1b7898bec1d4d1c908dcdb3ab39bdc2 5cef80211fb14bafa540a5d60e3ce925--d1b7898bec1d4d1c908dcdb3ab39bdc2 d9cee8b4db624b02a5a70b05663fb0f9 d1b7898bec1d4d1c908dcdb3ab39bdc2--d9cee8b4db624b02a5a70b05663fb0f9 6ad010868b014afdb34b0c9cc6376dda d9cee8b4db624b02a5a70b05663fb0f9--6ad010868b014afdb34b0c9cc6376dda d93b63ac502e4fb5909c3c3f9abcc13e 6ad010868b014afdb34b0c9cc6376dda--d93b63ac502e4fb5909c3c3f9abcc13e b5a430f36bb84c588bbe105143c29739 d93b63ac502e4fb5909c3c3f9abcc13e--b5a430f36bb84c588bbe105143c29739 fd3d04d7d5e547f780728d3d3906e695 b5a430f36bb84c588bbe105143c29739--fd3d04d7d5e547f780728d3d3906e695 eb1c43b55e61489fa2f3cb801a146a2f fd3d04d7d5e547f780728d3d3906e695--eb1c43b55e61489fa2f3cb801a146a2f 746cdd5599e5465fb17ab3189d39ce8f RX(b11) eb1c43b55e61489fa2f3cb801a146a2f--746cdd5599e5465fb17ab3189d39ce8f 746cdd5599e5465fb17ab3189d39ce8f--6814834ac08a4a9ca9873083f101f444 82d12f0be2054b48b574a6f11b0e6acf 0eba3f45e8ca4f4d899f0391aff7f477 f332489bba1e48558d01b72496b5d223--0eba3f45e8ca4f4d899f0391aff7f477 925a8120955f4df88757f19a43e23e98 3 c08d8fcf99d946018fb0799123ed4626 X 0eba3f45e8ca4f4d899f0391aff7f477--c08d8fcf99d946018fb0799123ed4626 c08d8fcf99d946018fb0799123ed4626--aa7c5c25aa144eee800e4b868219afb6 96992eff85e249b6a6187dcae4cbdbb4 c08d8fcf99d946018fb0799123ed4626--96992eff85e249b6a6187dcae4cbdbb4 142ac89723a94ffeae50aefc63e4dc71 96992eff85e249b6a6187dcae4cbdbb4--142ac89723a94ffeae50aefc63e4dc71 a0698f72648647d08405f5e9d1d8550f 142ac89723a94ffeae50aefc63e4dc71--a0698f72648647d08405f5e9d1d8550f d5101800d4d3441e99908ec69d747a82 a0698f72648647d08405f5e9d1d8550f--d5101800d4d3441e99908ec69d747a82 2581967cb64c486a93ffc4d8ec7c55f2 d5101800d4d3441e99908ec69d747a82--2581967cb64c486a93ffc4d8ec7c55f2 9054422691f041cfb9a1bc1a55b29d25 2581967cb64c486a93ffc4d8ec7c55f2--9054422691f041cfb9a1bc1a55b29d25 213019e70a344c8e958c3f0c4c78be1a 9054422691f041cfb9a1bc1a55b29d25--213019e70a344c8e958c3f0c4c78be1a e977aa4c557346eba5be8dedea05ecc6 213019e70a344c8e958c3f0c4c78be1a--e977aa4c557346eba5be8dedea05ecc6 8cb0a7ada185486694bb90b3612b13ef e977aa4c557346eba5be8dedea05ecc6--8cb0a7ada185486694bb90b3612b13ef 9418636dc2634503866c00142c55938f 8cb0a7ada185486694bb90b3612b13ef--9418636dc2634503866c00142c55938f 549945d325444f12a583f40a1a9275f1 9418636dc2634503866c00142c55938f--549945d325444f12a583f40a1a9275f1 1623d7f5b8e240e39df2a00a4590b1f7 X 549945d325444f12a583f40a1a9275f1--1623d7f5b8e240e39df2a00a4590b1f7 1623d7f5b8e240e39df2a00a4590b1f7--06a751f8c9be471cb2a1f2333fb6f7fe 48495be03a1a4a55ae0d3e3a05221abc 1623d7f5b8e240e39df2a00a4590b1f7--48495be03a1a4a55ae0d3e3a05221abc ea26fea1838844a8b9777abe7374ac98 48495be03a1a4a55ae0d3e3a05221abc--ea26fea1838844a8b9777abe7374ac98 b54c769d8b654a97854b123d2c6f8776 X ea26fea1838844a8b9777abe7374ac98--b54c769d8b654a97854b123d2c6f8776 b54c769d8b654a97854b123d2c6f8776--118a5c90e9574c21ab0a0061865d810f 080124d419864f489f1b444f0b9d0bb3 RZ(-1.0*g0) b54c769d8b654a97854b123d2c6f8776--080124d419864f489f1b444f0b9d0bb3 bb4dfac6f44c49d9862f6cf0a625db16 X 080124d419864f489f1b444f0b9d0bb3--bb4dfac6f44c49d9862f6cf0a625db16 bb4dfac6f44c49d9862f6cf0a625db16--fecd6998738c48bf9ce2b6619880af67 0c10f4912c6b428590494c1adc29784a bb4dfac6f44c49d9862f6cf0a625db16--0c10f4912c6b428590494c1adc29784a 0465cb6c907541b7a64f0f13fe96686d 0c10f4912c6b428590494c1adc29784a--0465cb6c907541b7a64f0f13fe96686d 4636009a1d674b9aa72483437923dd92 X 0465cb6c907541b7a64f0f13fe96686d--4636009a1d674b9aa72483437923dd92 4636009a1d674b9aa72483437923dd92--2dc5f79352074c71adb5fc0702c03827 2ea092208ded451fbbaa1b262624ed35 4636009a1d674b9aa72483437923dd92--2ea092208ded451fbbaa1b262624ed35 1e8f09833a644e26b31931dacc2899b4 2ea092208ded451fbbaa1b262624ed35--1e8f09833a644e26b31931dacc2899b4 cc4b276fc25a41cbac3569a2c2212954 1e8f09833a644e26b31931dacc2899b4--cc4b276fc25a41cbac3569a2c2212954 64af8c0c5d5042e880b661fc0b7b2d42 X cc4b276fc25a41cbac3569a2c2212954--64af8c0c5d5042e880b661fc0b7b2d42 64af8c0c5d5042e880b661fc0b7b2d42--1ef00375eba94e769462c56a21df7e7e fbce3c79a981481a975863b1d02104f5 64af8c0c5d5042e880b661fc0b7b2d42--fbce3c79a981481a975863b1d02104f5 2410197ca1284223b3167dbaeb70a52b fbce3c79a981481a975863b1d02104f5--2410197ca1284223b3167dbaeb70a52b 9259a010e78648a19cc28cb06ef570c5 X 2410197ca1284223b3167dbaeb70a52b--9259a010e78648a19cc28cb06ef570c5 9259a010e78648a19cc28cb06ef570c5--e5bcd2a27c81422b81226820b4836a8c 38089240386b4379bd18c44709e21e80 9259a010e78648a19cc28cb06ef570c5--38089240386b4379bd18c44709e21e80 c08ef9c69222409aa9c9a3081ab76f24 38089240386b4379bd18c44709e21e80--c08ef9c69222409aa9c9a3081ab76f24 927f2505908d4278aefc5c7cba200b28 c08ef9c69222409aa9c9a3081ab76f24--927f2505908d4278aefc5c7cba200b28 00f2c2f9126043538e6ff86dec1da3e1 927f2505908d4278aefc5c7cba200b28--00f2c2f9126043538e6ff86dec1da3e1 19d0f4dc6911472cb7c5beb3fc7a0648 00f2c2f9126043538e6ff86dec1da3e1--19d0f4dc6911472cb7c5beb3fc7a0648 26950d313b704531b242047336d06655 19d0f4dc6911472cb7c5beb3fc7a0648--26950d313b704531b242047336d06655 6b4fb52aee5b421fa5237a8237143344 26950d313b704531b242047336d06655--6b4fb52aee5b421fa5237a8237143344 bc1d96f9e25447bd884a50c0e0fab95f X 6b4fb52aee5b421fa5237a8237143344--bc1d96f9e25447bd884a50c0e0fab95f bc1d96f9e25447bd884a50c0e0fab95f--6935879396b4480ab6b4cd0dc845063d 3a545fa075fd4119b5494ca9f5253b40 bc1d96f9e25447bd884a50c0e0fab95f--3a545fa075fd4119b5494ca9f5253b40 7265a93310e646fa907260eb5061c3b5 3a545fa075fd4119b5494ca9f5253b40--7265a93310e646fa907260eb5061c3b5 5d647cf4e3ef4853856c7194fab82ebf X 7265a93310e646fa907260eb5061c3b5--5d647cf4e3ef4853856c7194fab82ebf 5d647cf4e3ef4853856c7194fab82ebf--af730d4f980b408288c98c09fd8be36a c4110929f51b4fbcacf948a41bbbb361 5d647cf4e3ef4853856c7194fab82ebf--c4110929f51b4fbcacf948a41bbbb361 ce4fad61161f484cbbf3957a00b0bad4 c4110929f51b4fbcacf948a41bbbb361--ce4fad61161f484cbbf3957a00b0bad4 35d0a753c0af49149bfae17e9ffd1108 ce4fad61161f484cbbf3957a00b0bad4--35d0a753c0af49149bfae17e9ffd1108 dae0057105164565b1423a3a2e8d8f77 35d0a753c0af49149bfae17e9ffd1108--dae0057105164565b1423a3a2e8d8f77 bfbe6f3cd3ee4bcf9b6acfc76316bae7 dae0057105164565b1423a3a2e8d8f77--bfbe6f3cd3ee4bcf9b6acfc76316bae7 19b13b69fd5646218ce94b21e74aeb53 bfbe6f3cd3ee4bcf9b6acfc76316bae7--19b13b69fd5646218ce94b21e74aeb53 6c0e1017c0c1487da2becc66ad58af99 19b13b69fd5646218ce94b21e74aeb53--6c0e1017c0c1487da2becc66ad58af99 6a56f3bd6eba426d94196fd6f5490038 6c0e1017c0c1487da2becc66ad58af99--6a56f3bd6eba426d94196fd6f5490038 b21137408bb94aad8d73bc8dfadac43b 6a56f3bd6eba426d94196fd6f5490038--b21137408bb94aad8d73bc8dfadac43b e4ea9027421d489b89e09b3ddf83cce3 X b21137408bb94aad8d73bc8dfadac43b--e4ea9027421d489b89e09b3ddf83cce3 e4ea9027421d489b89e09b3ddf83cce3--a2ed239eebc34a5aad3221e59a9999c4 86fc508db81c4dc4b87ce94ee38979a7 e4ea9027421d489b89e09b3ddf83cce3--86fc508db81c4dc4b87ce94ee38979a7 8022fa876b4f4388ad70564b321d12af 86fc508db81c4dc4b87ce94ee38979a7--8022fa876b4f4388ad70564b321d12af 2b8702b4d8c6492781d4d2e35bc3b95e X 8022fa876b4f4388ad70564b321d12af--2b8702b4d8c6492781d4d2e35bc3b95e 2b8702b4d8c6492781d4d2e35bc3b95e--04f437a7bc30493e849a18804057a90f 33c7fc4a69d945c1bbf1b54c3fab4d7d 2b8702b4d8c6492781d4d2e35bc3b95e--33c7fc4a69d945c1bbf1b54c3fab4d7d f80ea327db794f10b4ae2b833efeb2a1 33c7fc4a69d945c1bbf1b54c3fab4d7d--f80ea327db794f10b4ae2b833efeb2a1 ce286fe5d4d143c2bfea40e0d5f9a986 f80ea327db794f10b4ae2b833efeb2a1--ce286fe5d4d143c2bfea40e0d5f9a986 275cbe5f1f464f7391de02a7a5fb2792 ce286fe5d4d143c2bfea40e0d5f9a986--275cbe5f1f464f7391de02a7a5fb2792 1d6667799af54659be057058a2fa95ad 275cbe5f1f464f7391de02a7a5fb2792--1d6667799af54659be057058a2fa95ad ed514c12e066425abf342d5069cb6d39 1d6667799af54659be057058a2fa95ad--ed514c12e066425abf342d5069cb6d39 8bbb14fcab304a008b2a7bf9171ce7eb ed514c12e066425abf342d5069cb6d39--8bbb14fcab304a008b2a7bf9171ce7eb f06b42b7b999407bb6c2b931bab0e58d 8bbb14fcab304a008b2a7bf9171ce7eb--f06b42b7b999407bb6c2b931bab0e58d b15798183e314e76bdc6909f56edfbaf f06b42b7b999407bb6c2b931bab0e58d--b15798183e314e76bdc6909f56edfbaf 7c43a752dc0a4d0db4839ecafa141cf6 b15798183e314e76bdc6909f56edfbaf--7c43a752dc0a4d0db4839ecafa141cf6 cf651ed8a5bf42ae9c7777af5b17171d 7c43a752dc0a4d0db4839ecafa141cf6--cf651ed8a5bf42ae9c7777af5b17171d 3d43d48399654f618061b36a507e5481 X cf651ed8a5bf42ae9c7777af5b17171d--3d43d48399654f618061b36a507e5481 3d43d48399654f618061b36a507e5481--7c966c19c68340db991ef5f7cbb420a4 2dc7750d63224aef939c20a70b9c464d 3d43d48399654f618061b36a507e5481--2dc7750d63224aef939c20a70b9c464d 2c889838950f450a808ed9d598fd58d7 X 2dc7750d63224aef939c20a70b9c464d--2c889838950f450a808ed9d598fd58d7 2c889838950f450a808ed9d598fd58d7--dfc95911c8b74e2988066e2a29f87ee1 7cb0b1db67dc40febe507e1d418713f9 2c889838950f450a808ed9d598fd58d7--7cb0b1db67dc40febe507e1d418713f9 79473a8a518e4b42aa1451273f38dfc8 7cb0b1db67dc40febe507e1d418713f9--79473a8a518e4b42aa1451273f38dfc8 12d25e3756f542cd866adaf730a3480e 79473a8a518e4b42aa1451273f38dfc8--12d25e3756f542cd866adaf730a3480e b05e7533f5f64f2aa57b8339cb39657e X 12d25e3756f542cd866adaf730a3480e--b05e7533f5f64f2aa57b8339cb39657e b05e7533f5f64f2aa57b8339cb39657e--0793cc5bab284ba1a32e57c847b6caea 2efe4dcead2e4a5caffbc24357644c48 X b05e7533f5f64f2aa57b8339cb39657e--2efe4dcead2e4a5caffbc24357644c48 2efe4dcead2e4a5caffbc24357644c48--5588a7c3b1074028868c001711db5912 f4571c70b6644f1c92cc83127f97c0c9 2efe4dcead2e4a5caffbc24357644c48--f4571c70b6644f1c92cc83127f97c0c9 d04d3ff753834a65ae7350b8882b03fb f4571c70b6644f1c92cc83127f97c0c9--d04d3ff753834a65ae7350b8882b03fb 63919ca3fd42417da7f47adeb144a027 d04d3ff753834a65ae7350b8882b03fb--63919ca3fd42417da7f47adeb144a027 c291d319f2f7421ba1fe59d186452b2e 63919ca3fd42417da7f47adeb144a027--c291d319f2f7421ba1fe59d186452b2e 67f43b79a60e4ee0aacbca1b975826be c291d319f2f7421ba1fe59d186452b2e--67f43b79a60e4ee0aacbca1b975826be ddae44cec88d4f3e99a34e96164fc36b 67f43b79a60e4ee0aacbca1b975826be--ddae44cec88d4f3e99a34e96164fc36b 68e89256cba94d1aab5366121ad05130 ddae44cec88d4f3e99a34e96164fc36b--68e89256cba94d1aab5366121ad05130 51c4e4fe3a4e4b5d9d98b672f9a5a13d 68e89256cba94d1aab5366121ad05130--51c4e4fe3a4e4b5d9d98b672f9a5a13d c8f61e86794a48dcbfee23d36c5a5a60 51c4e4fe3a4e4b5d9d98b672f9a5a13d--c8f61e86794a48dcbfee23d36c5a5a60 35d5883345b1489187862b9ce92b2cad X c8f61e86794a48dcbfee23d36c5a5a60--35d5883345b1489187862b9ce92b2cad 35d5883345b1489187862b9ce92b2cad--5029531b562044f4a40c19228a3a6b16 e9bdb64dca4f4c4fb998d00d07742bc1 35d5883345b1489187862b9ce92b2cad--e9bdb64dca4f4c4fb998d00d07742bc1 72c4ebb6d0384bf1907ef4865cc3b980 e9bdb64dca4f4c4fb998d00d07742bc1--72c4ebb6d0384bf1907ef4865cc3b980 5558f2c81d144b9593748cc6e5717aef 72c4ebb6d0384bf1907ef4865cc3b980--5558f2c81d144b9593748cc6e5717aef b5151197cce946ec864c56dd6a41ed8e 5558f2c81d144b9593748cc6e5717aef--b5151197cce946ec864c56dd6a41ed8e 4f0e2ded11dd46f3928b37f7693e4aaa b5151197cce946ec864c56dd6a41ed8e--4f0e2ded11dd46f3928b37f7693e4aaa 104149ed083e4bc4a9466bf81176ae5c 4f0e2ded11dd46f3928b37f7693e4aaa--104149ed083e4bc4a9466bf81176ae5c e59dccafc96740bf9aa91de9c2cb265c 104149ed083e4bc4a9466bf81176ae5c--e59dccafc96740bf9aa91de9c2cb265c 1f2275e25ed04bda982766d7bc5acae4 e59dccafc96740bf9aa91de9c2cb265c--1f2275e25ed04bda982766d7bc5acae4 a52e653efafa4153ab26fcb4d4f474c8 1f2275e25ed04bda982766d7bc5acae4--a52e653efafa4153ab26fcb4d4f474c8 5802ad42c9e347c58120871a69209152 a52e653efafa4153ab26fcb4d4f474c8--5802ad42c9e347c58120871a69209152 ae4a848228214ebea36abbfc5835bf44 5802ad42c9e347c58120871a69209152--ae4a848228214ebea36abbfc5835bf44 9a749b7883674d2f87e991cbbfcf8548 ae4a848228214ebea36abbfc5835bf44--9a749b7883674d2f87e991cbbfcf8548 30b0276f75e84443aac4390d29c63ceb 9a749b7883674d2f87e991cbbfcf8548--30b0276f75e84443aac4390d29c63ceb be910c0f0f46433bb11712c664d52263 30b0276f75e84443aac4390d29c63ceb--be910c0f0f46433bb11712c664d52263 4295a3ec3ae04b32a06721240a166ef3 be910c0f0f46433bb11712c664d52263--4295a3ec3ae04b32a06721240a166ef3 433ef5d2427c49658160eb8079b1c681 4295a3ec3ae04b32a06721240a166ef3--433ef5d2427c49658160eb8079b1c681 cb4c7241a1df44a0ae681a950f17d9f8 433ef5d2427c49658160eb8079b1c681--cb4c7241a1df44a0ae681a950f17d9f8 66b95aae9e824be9b7228d4987759b13 cb4c7241a1df44a0ae681a950f17d9f8--66b95aae9e824be9b7228d4987759b13 9c2091c811494eb3a119ee50710e95d1 66b95aae9e824be9b7228d4987759b13--9c2091c811494eb3a119ee50710e95d1 32a8d93262fd48ccb4d43119223068b9 9c2091c811494eb3a119ee50710e95d1--32a8d93262fd48ccb4d43119223068b9 c3189c98ff1b42dfacf6e2be16fb01be 32a8d93262fd48ccb4d43119223068b9--c3189c98ff1b42dfacf6e2be16fb01be aa4ab02f3677401591b99a5b4b9e8c03 c3189c98ff1b42dfacf6e2be16fb01be--aa4ab02f3677401591b99a5b4b9e8c03 dc6145f1131c49cb9fea6dfb9425de54 aa4ab02f3677401591b99a5b4b9e8c03--dc6145f1131c49cb9fea6dfb9425de54 0b244311cba04b65a5f48d4361c06f14 dc6145f1131c49cb9fea6dfb9425de54--0b244311cba04b65a5f48d4361c06f14 a6a2567ef6ad4f4c952afec98496ae99 0b244311cba04b65a5f48d4361c06f14--a6a2567ef6ad4f4c952afec98496ae99 daaa5907e3264c91ad85944cb74d9642 a6a2567ef6ad4f4c952afec98496ae99--daaa5907e3264c91ad85944cb74d9642 e0ee985831274232b3685f09a326b615 daaa5907e3264c91ad85944cb74d9642--e0ee985831274232b3685f09a326b615 14b7e25c9c1d49c69c109f060812bd0a e0ee985831274232b3685f09a326b615--14b7e25c9c1d49c69c109f060812bd0a 9fc3411152cb466ebb58313056861161 14b7e25c9c1d49c69c109f060812bd0a--9fc3411152cb466ebb58313056861161 5ee93de7f49542339a94f02b51785143 9fc3411152cb466ebb58313056861161--5ee93de7f49542339a94f02b51785143 8e2882a92b5a4ec4b1bb63c706ee1ac3 5ee93de7f49542339a94f02b51785143--8e2882a92b5a4ec4b1bb63c706ee1ac3 3d2db25c4c0f4fdb8484920843fec8a2 8e2882a92b5a4ec4b1bb63c706ee1ac3--3d2db25c4c0f4fdb8484920843fec8a2 cb016d480a1348c88ddeeac65b2ed188 3d2db25c4c0f4fdb8484920843fec8a2--cb016d480a1348c88ddeeac65b2ed188 8100400793ac48a39418a1fd7188243f cb016d480a1348c88ddeeac65b2ed188--8100400793ac48a39418a1fd7188243f 292e49b83b674c55a871370f7987e3ff 8100400793ac48a39418a1fd7188243f--292e49b83b674c55a871370f7987e3ff b4f170bc40164664ac19b46cf3ebce12 292e49b83b674c55a871370f7987e3ff--b4f170bc40164664ac19b46cf3ebce12 aa3292647ae64af3a1a5d3252aa97b74 b4f170bc40164664ac19b46cf3ebce12--aa3292647ae64af3a1a5d3252aa97b74 0c9b387dfc67414fb38a999a2b2b5c09 aa3292647ae64af3a1a5d3252aa97b74--0c9b387dfc67414fb38a999a2b2b5c09 ddf393413f61482697641373b06a436c 0c9b387dfc67414fb38a999a2b2b5c09--ddf393413f61482697641373b06a436c d4dbe14e7afb488499e6fcb15a545da7 ddf393413f61482697641373b06a436c--d4dbe14e7afb488499e6fcb15a545da7 edb3c4d080a74496a595684b5f8f9e55 d4dbe14e7afb488499e6fcb15a545da7--edb3c4d080a74496a595684b5f8f9e55 9723c9f798ee40c68a171a098632d2dd edb3c4d080a74496a595684b5f8f9e55--9723c9f798ee40c68a171a098632d2dd b3ff7c222a184e40835cf224d1752b55 9723c9f798ee40c68a171a098632d2dd--b3ff7c222a184e40835cf224d1752b55 26dfc2f5e59c42dfb8b2b16f909962b4 b3ff7c222a184e40835cf224d1752b55--26dfc2f5e59c42dfb8b2b16f909962b4 8d07c56657004547a3472a88e8c6d281 26dfc2f5e59c42dfb8b2b16f909962b4--8d07c56657004547a3472a88e8c6d281 e1bccbb9e24d4edba7a05f1faa04f19c 8d07c56657004547a3472a88e8c6d281--e1bccbb9e24d4edba7a05f1faa04f19c 797968522f3b4fd9ae551a4e0e5ba02b e1bccbb9e24d4edba7a05f1faa04f19c--797968522f3b4fd9ae551a4e0e5ba02b d660b4db30084b469216285162f393ef 797968522f3b4fd9ae551a4e0e5ba02b--d660b4db30084b469216285162f393ef d02bbdebed9647af9e01942f1eee05d3 d660b4db30084b469216285162f393ef--d02bbdebed9647af9e01942f1eee05d3 93835fa830fb4fb0919356957ea7e42f d02bbdebed9647af9e01942f1eee05d3--93835fa830fb4fb0919356957ea7e42f 32e15305852b4c5b984a3da6425124e8 93835fa830fb4fb0919356957ea7e42f--32e15305852b4c5b984a3da6425124e8 15f99667b4314e12b58fa789ac288a8d 32e15305852b4c5b984a3da6425124e8--15f99667b4314e12b58fa789ac288a8d 5ad91ab72d334dbaaef6d0d55673c7be 15f99667b4314e12b58fa789ac288a8d--5ad91ab72d334dbaaef6d0d55673c7be 146a05dfd3c04c2c98e1a51afcf47a51 5ad91ab72d334dbaaef6d0d55673c7be--146a05dfd3c04c2c98e1a51afcf47a51 23e8bbd8dcb542c8bcf2a012bac225e3 146a05dfd3c04c2c98e1a51afcf47a51--23e8bbd8dcb542c8bcf2a012bac225e3 ba9deab2801b4506902ac05d96a64888 RX(b02) 23e8bbd8dcb542c8bcf2a012bac225e3--ba9deab2801b4506902ac05d96a64888 5ec367d4b81c4e7881d6eef56bf2c66e ba9deab2801b4506902ac05d96a64888--5ec367d4b81c4e7881d6eef56bf2c66e d09b7a2fb6384b87935e9022316f0ffa X 5ec367d4b81c4e7881d6eef56bf2c66e--d09b7a2fb6384b87935e9022316f0ffa d09b7a2fb6384b87935e9022316f0ffa--4ac05b5313244623a06685e9b06abcdc 56aacc3507c34666b3dc1bf25646473e d09b7a2fb6384b87935e9022316f0ffa--56aacc3507c34666b3dc1bf25646473e d65f44dd3ca24178876a444aaae7928b 56aacc3507c34666b3dc1bf25646473e--d65f44dd3ca24178876a444aaae7928b 941200e0aa454cc389d8b4d44756cbe7 d65f44dd3ca24178876a444aaae7928b--941200e0aa454cc389d8b4d44756cbe7 30cce1ed06d9472ca3f1ec112d43934a 941200e0aa454cc389d8b4d44756cbe7--30cce1ed06d9472ca3f1ec112d43934a 2de0b64c335843c5b141227182ff7fd4 30cce1ed06d9472ca3f1ec112d43934a--2de0b64c335843c5b141227182ff7fd4 63814857adff429a866c1d52f143c4e5 2de0b64c335843c5b141227182ff7fd4--63814857adff429a866c1d52f143c4e5 3468bc287076405da850404936b90499 63814857adff429a866c1d52f143c4e5--3468bc287076405da850404936b90499 f97ad91c28974fc4810226d5163eedbc 3468bc287076405da850404936b90499--f97ad91c28974fc4810226d5163eedbc 2688a96533604f2ca516a0656a29e50f f97ad91c28974fc4810226d5163eedbc--2688a96533604f2ca516a0656a29e50f 9007829731524f80a9be331974bf1c21 2688a96533604f2ca516a0656a29e50f--9007829731524f80a9be331974bf1c21 bad0341878094584a2b74322e725af8e 9007829731524f80a9be331974bf1c21--bad0341878094584a2b74322e725af8e 8f30790e0e294854971112ccbe977215 X bad0341878094584a2b74322e725af8e--8f30790e0e294854971112ccbe977215 8f30790e0e294854971112ccbe977215--4e830f3f0d4942fca1e5d172410bb9e1 fec0843bd4ec4684a3fceafe4f79e5a6 8f30790e0e294854971112ccbe977215--fec0843bd4ec4684a3fceafe4f79e5a6 5e149f877d20429a807f8f62625bac45 fec0843bd4ec4684a3fceafe4f79e5a6--5e149f877d20429a807f8f62625bac45 791063cf9516434ab343eaffcff6229a X 5e149f877d20429a807f8f62625bac45--791063cf9516434ab343eaffcff6229a 791063cf9516434ab343eaffcff6229a--78540d16e46c43feb5148126878164cd 922b5b4485cb43f3835f99bdf70fe8c3 RZ(-1.0*g1) 791063cf9516434ab343eaffcff6229a--922b5b4485cb43f3835f99bdf70fe8c3 b848084cd0de4144961ddb5da4117172 X 922b5b4485cb43f3835f99bdf70fe8c3--b848084cd0de4144961ddb5da4117172 b848084cd0de4144961ddb5da4117172--c651b42122c0451c847d16c0fdfcd8dc cff1c1e7e91c4a62beb521bd0b2f8aae b848084cd0de4144961ddb5da4117172--cff1c1e7e91c4a62beb521bd0b2f8aae 152b7ad8f1c94f699fe8bd1389730728 cff1c1e7e91c4a62beb521bd0b2f8aae--152b7ad8f1c94f699fe8bd1389730728 665ff7d02002460eba99834143d7bf38 X 152b7ad8f1c94f699fe8bd1389730728--665ff7d02002460eba99834143d7bf38 665ff7d02002460eba99834143d7bf38--8bff2af2d2024bc5aef270118f92e503 394cd3aeff0946b1b2e0493a4ef6310c 665ff7d02002460eba99834143d7bf38--394cd3aeff0946b1b2e0493a4ef6310c c601fb1e072543d0ad7dd784dfe6e511 394cd3aeff0946b1b2e0493a4ef6310c--c601fb1e072543d0ad7dd784dfe6e511 eb5f9b16176c4983994ae331a5fb4be1 c601fb1e072543d0ad7dd784dfe6e511--eb5f9b16176c4983994ae331a5fb4be1 046ecedd106541869fe46e84065ec666 X eb5f9b16176c4983994ae331a5fb4be1--046ecedd106541869fe46e84065ec666 046ecedd106541869fe46e84065ec666--aefda303a8b74eeaa39d844b16b65ce0 639659ced0e24d688dc24f4e3b1888ae 046ecedd106541869fe46e84065ec666--639659ced0e24d688dc24f4e3b1888ae 060bc4dde05c477b86d5200f610b26d1 639659ced0e24d688dc24f4e3b1888ae--060bc4dde05c477b86d5200f610b26d1 19947da7da794bf58e36769283fe95ce X 060bc4dde05c477b86d5200f610b26d1--19947da7da794bf58e36769283fe95ce 19947da7da794bf58e36769283fe95ce--7e5e4d75870549c1b492a9194b6c55eb 1fa6e25570104748acb8e15bc8fca86d 19947da7da794bf58e36769283fe95ce--1fa6e25570104748acb8e15bc8fca86d ea6a3a7ba2e640c69b8fd59f80aefd8e 1fa6e25570104748acb8e15bc8fca86d--ea6a3a7ba2e640c69b8fd59f80aefd8e 8018d161182c426c9c2a0b9b37cad52b ea6a3a7ba2e640c69b8fd59f80aefd8e--8018d161182c426c9c2a0b9b37cad52b 98ecaf71430140f5a100e9fa03cda5a8 8018d161182c426c9c2a0b9b37cad52b--98ecaf71430140f5a100e9fa03cda5a8 533909cd7b50481899967a4d7167a745 98ecaf71430140f5a100e9fa03cda5a8--533909cd7b50481899967a4d7167a745 fccc8b35bc68413a9518ea1a5865ee06 533909cd7b50481899967a4d7167a745--fccc8b35bc68413a9518ea1a5865ee06 070d1f29fe934ef3a7e9a05522336551 fccc8b35bc68413a9518ea1a5865ee06--070d1f29fe934ef3a7e9a05522336551 8008381c6e384c909fe437ce97ea9fe8 X 070d1f29fe934ef3a7e9a05522336551--8008381c6e384c909fe437ce97ea9fe8 8008381c6e384c909fe437ce97ea9fe8--ac7c9f1d917140819ec4b0d607a3495e 550a1517f5e04308bcde391a7a0e308b 8008381c6e384c909fe437ce97ea9fe8--550a1517f5e04308bcde391a7a0e308b 7263855bff2248fd84946550349de4f4 550a1517f5e04308bcde391a7a0e308b--7263855bff2248fd84946550349de4f4 e9f5e3f71049460f9a7cd6ed638865a2 X 7263855bff2248fd84946550349de4f4--e9f5e3f71049460f9a7cd6ed638865a2 e9f5e3f71049460f9a7cd6ed638865a2--1062a72f0ee34eaf9ab2c863a8497e8c 102133bec842470e9a1fec54d6ad94af e9f5e3f71049460f9a7cd6ed638865a2--102133bec842470e9a1fec54d6ad94af 153da428a67f44ef8757f6d92624fd81 102133bec842470e9a1fec54d6ad94af--153da428a67f44ef8757f6d92624fd81 9b623f2e8bd2402eb35ef88e7bfbd7b2 153da428a67f44ef8757f6d92624fd81--9b623f2e8bd2402eb35ef88e7bfbd7b2 9f1689cdd41f4e7aa5e34c8a44391565 9b623f2e8bd2402eb35ef88e7bfbd7b2--9f1689cdd41f4e7aa5e34c8a44391565 620d2c5e2a0b44d3b74f3d45f879a650 9f1689cdd41f4e7aa5e34c8a44391565--620d2c5e2a0b44d3b74f3d45f879a650 3d61bf18e7c0494fa5f633519dbd8ee3 620d2c5e2a0b44d3b74f3d45f879a650--3d61bf18e7c0494fa5f633519dbd8ee3 57c50f0b259c4a80bed59eb5476c8074 3d61bf18e7c0494fa5f633519dbd8ee3--57c50f0b259c4a80bed59eb5476c8074 177a7b2e510b4c718d4d794c6abe8447 57c50f0b259c4a80bed59eb5476c8074--177a7b2e510b4c718d4d794c6abe8447 ae2d7e09c11c4d03bbe1fa63b034921e 177a7b2e510b4c718d4d794c6abe8447--ae2d7e09c11c4d03bbe1fa63b034921e 3968f814bdc542a4b06b234838394d16 X ae2d7e09c11c4d03bbe1fa63b034921e--3968f814bdc542a4b06b234838394d16 3968f814bdc542a4b06b234838394d16--4d9ebc828e2b4d6ca5009ddc8087cb6c 236a39dde26c42d6a6e9e0e3097a2100 3968f814bdc542a4b06b234838394d16--236a39dde26c42d6a6e9e0e3097a2100 d04e9564a2814239b3cc7559237bad18 236a39dde26c42d6a6e9e0e3097a2100--d04e9564a2814239b3cc7559237bad18 ad36dddce6124caf816f539c2d265ee6 X d04e9564a2814239b3cc7559237bad18--ad36dddce6124caf816f539c2d265ee6 ad36dddce6124caf816f539c2d265ee6--a8f7b977fbbf4baf8a1debce80179ed7 456f8f552ea14686a1c9b09877ecf443 ad36dddce6124caf816f539c2d265ee6--456f8f552ea14686a1c9b09877ecf443 a66c22dc0245495ebaecb000e3f6401c 456f8f552ea14686a1c9b09877ecf443--a66c22dc0245495ebaecb000e3f6401c f512ee78a827434f91c81354bb607dca a66c22dc0245495ebaecb000e3f6401c--f512ee78a827434f91c81354bb607dca a3d60269f57144d2b0ceee23b2f1aaa3 f512ee78a827434f91c81354bb607dca--a3d60269f57144d2b0ceee23b2f1aaa3 1ba2da0f1abe42fb9bb1d9958a591ae3 a3d60269f57144d2b0ceee23b2f1aaa3--1ba2da0f1abe42fb9bb1d9958a591ae3 f3e725332e7f4b4cb1f52da5801fc69a 1ba2da0f1abe42fb9bb1d9958a591ae3--f3e725332e7f4b4cb1f52da5801fc69a 6f7fb641eb3c4efc9c7cd04d4c0b30eb f3e725332e7f4b4cb1f52da5801fc69a--6f7fb641eb3c4efc9c7cd04d4c0b30eb 3960e043b47041efa0a8fd58144f7b1c 6f7fb641eb3c4efc9c7cd04d4c0b30eb--3960e043b47041efa0a8fd58144f7b1c d3f2ded44a764782a82bd02c5f96c96e 3960e043b47041efa0a8fd58144f7b1c--d3f2ded44a764782a82bd02c5f96c96e 8880e226bdba43b7817653c987d75b3a d3f2ded44a764782a82bd02c5f96c96e--8880e226bdba43b7817653c987d75b3a 1359917473a24a00a30a5f8d779e2d80 8880e226bdba43b7817653c987d75b3a--1359917473a24a00a30a5f8d779e2d80 af3a7955efff4b78af8bda212ff80c40 X 1359917473a24a00a30a5f8d779e2d80--af3a7955efff4b78af8bda212ff80c40 af3a7955efff4b78af8bda212ff80c40--aaa8ec58d71f4f95beba4803524de97a c521b663cdc64fca994762a864abd2c1 af3a7955efff4b78af8bda212ff80c40--c521b663cdc64fca994762a864abd2c1 3b59b5a2ee454650b6af9d490a2ea7b1 X c521b663cdc64fca994762a864abd2c1--3b59b5a2ee454650b6af9d490a2ea7b1 3b59b5a2ee454650b6af9d490a2ea7b1--f5c4abcbd284415fb71d2883fc7ad39c 2dffc42bd4c247c7b1038d56ab10a283 3b59b5a2ee454650b6af9d490a2ea7b1--2dffc42bd4c247c7b1038d56ab10a283 c4d207d6ceb34cc9ac0893ccc06c51c9 2dffc42bd4c247c7b1038d56ab10a283--c4d207d6ceb34cc9ac0893ccc06c51c9 476531a3b0e44f0bb0e112126ad38991 c4d207d6ceb34cc9ac0893ccc06c51c9--476531a3b0e44f0bb0e112126ad38991 03a057218a8d4e44bc6432e5849a65d2 X 476531a3b0e44f0bb0e112126ad38991--03a057218a8d4e44bc6432e5849a65d2 03a057218a8d4e44bc6432e5849a65d2--8e6b70e2b77742d8a7c327f9d746ee01 fc78bf65cb8943dc9135ba346ee3c21f X 03a057218a8d4e44bc6432e5849a65d2--fc78bf65cb8943dc9135ba346ee3c21f fc78bf65cb8943dc9135ba346ee3c21f--57d6286e310c4f3d8e6453922f082350 1a211a2ddc5b4e6ca2a3aafbed4841a7 fc78bf65cb8943dc9135ba346ee3c21f--1a211a2ddc5b4e6ca2a3aafbed4841a7 b18c29f3952f4ee398224679b720f03f 1a211a2ddc5b4e6ca2a3aafbed4841a7--b18c29f3952f4ee398224679b720f03f d700ac139a4c45e491bdce5417795161 b18c29f3952f4ee398224679b720f03f--d700ac139a4c45e491bdce5417795161 de4e8dc3e1ef43faa9c35a53d3ddf07f d700ac139a4c45e491bdce5417795161--de4e8dc3e1ef43faa9c35a53d3ddf07f ea6ba61968074a9dbe1ef110ba89164f de4e8dc3e1ef43faa9c35a53d3ddf07f--ea6ba61968074a9dbe1ef110ba89164f 9bd2f862fda24e92b552cdc317828c8a ea6ba61968074a9dbe1ef110ba89164f--9bd2f862fda24e92b552cdc317828c8a 79c934c7fdb04d0499b4dd02432187f0 9bd2f862fda24e92b552cdc317828c8a--79c934c7fdb04d0499b4dd02432187f0 5dc6b736cf1d4c7394b23be592bd6db0 79c934c7fdb04d0499b4dd02432187f0--5dc6b736cf1d4c7394b23be592bd6db0 660e97fe01244863a65270e57f438cbb 5dc6b736cf1d4c7394b23be592bd6db0--660e97fe01244863a65270e57f438cbb fa95c32be4e54e98898b18f01e4735db X 660e97fe01244863a65270e57f438cbb--fa95c32be4e54e98898b18f01e4735db fa95c32be4e54e98898b18f01e4735db--639f13a001694d6c8e66d392bd0f2c49 1a2f8c9045004e7eada6f98de01b44b0 fa95c32be4e54e98898b18f01e4735db--1a2f8c9045004e7eada6f98de01b44b0 bf9677ca6fa549a88bdb142ccc11017a 1a2f8c9045004e7eada6f98de01b44b0--bf9677ca6fa549a88bdb142ccc11017a 0b6021f39b674d1992af1f958925461a bf9677ca6fa549a88bdb142ccc11017a--0b6021f39b674d1992af1f958925461a 02a518743cef46a1bf4e9517fb93a7bb 0b6021f39b674d1992af1f958925461a--02a518743cef46a1bf4e9517fb93a7bb 489ab001383640daa0a9fc81539c63d8 02a518743cef46a1bf4e9517fb93a7bb--489ab001383640daa0a9fc81539c63d8 0127fb00b8e748508c3f00dec22849f2 489ab001383640daa0a9fc81539c63d8--0127fb00b8e748508c3f00dec22849f2 7277f51d6813445db6d0ccd803c0f2de 0127fb00b8e748508c3f00dec22849f2--7277f51d6813445db6d0ccd803c0f2de 1cfef364e030452c9cabd24d4dbf7b24 7277f51d6813445db6d0ccd803c0f2de--1cfef364e030452c9cabd24d4dbf7b24 facd2c5e16174d24805e6c36025076cf 1cfef364e030452c9cabd24d4dbf7b24--facd2c5e16174d24805e6c36025076cf 9468d7003a31421ab5c300eca56de0ba facd2c5e16174d24805e6c36025076cf--9468d7003a31421ab5c300eca56de0ba b66c7d5a5c024b5a9ada9d0ac7cbebdf 9468d7003a31421ab5c300eca56de0ba--b66c7d5a5c024b5a9ada9d0ac7cbebdf be5df90e9f474d6799d3c428517716f0 b66c7d5a5c024b5a9ada9d0ac7cbebdf--be5df90e9f474d6799d3c428517716f0 df98344d87f547919ee07eaec166c846 be5df90e9f474d6799d3c428517716f0--df98344d87f547919ee07eaec166c846 d483e4f8e993430698492f34ccb9e796 df98344d87f547919ee07eaec166c846--d483e4f8e993430698492f34ccb9e796 49fb0da3b50f4046bf3becbbb6108fc4 d483e4f8e993430698492f34ccb9e796--49fb0da3b50f4046bf3becbbb6108fc4 d5830eb826ef47db8ddbe45602ebd10b 49fb0da3b50f4046bf3becbbb6108fc4--d5830eb826ef47db8ddbe45602ebd10b 308b360d24b64e1292f38b08f83bac1e d5830eb826ef47db8ddbe45602ebd10b--308b360d24b64e1292f38b08f83bac1e c886d7f697f9448bbd1222e0b1e75142 308b360d24b64e1292f38b08f83bac1e--c886d7f697f9448bbd1222e0b1e75142 347ccd35455e43ffa3f901db0d523908 c886d7f697f9448bbd1222e0b1e75142--347ccd35455e43ffa3f901db0d523908 c2b78d0547174ed5a8f3f48863fde146 347ccd35455e43ffa3f901db0d523908--c2b78d0547174ed5a8f3f48863fde146 fff69d895e2a49088ba7337d3fd71c02 c2b78d0547174ed5a8f3f48863fde146--fff69d895e2a49088ba7337d3fd71c02 cb80af1313774a519322a9337882bad7 fff69d895e2a49088ba7337d3fd71c02--cb80af1313774a519322a9337882bad7 8139c824c24542f2b4a4cb86267ed22a cb80af1313774a519322a9337882bad7--8139c824c24542f2b4a4cb86267ed22a fbd7e7237a5146688d987bca3a2b9c0c 8139c824c24542f2b4a4cb86267ed22a--fbd7e7237a5146688d987bca3a2b9c0c 6f3ee39637fb4876a07430144baa5b95 fbd7e7237a5146688d987bca3a2b9c0c--6f3ee39637fb4876a07430144baa5b95 ae7a59fdec9e43f4b342257c1bf30dd5 6f3ee39637fb4876a07430144baa5b95--ae7a59fdec9e43f4b342257c1bf30dd5 302093a3fc0140a5b3be7b64a8992ea1 ae7a59fdec9e43f4b342257c1bf30dd5--302093a3fc0140a5b3be7b64a8992ea1 1f238a1cfaf04f44afc31f35aff100bc 302093a3fc0140a5b3be7b64a8992ea1--1f238a1cfaf04f44afc31f35aff100bc 67a2fd5c472140df829a6966ebce6d25 1f238a1cfaf04f44afc31f35aff100bc--67a2fd5c472140df829a6966ebce6d25 d62d2657761048a4a85559680e7d537c 67a2fd5c472140df829a6966ebce6d25--d62d2657761048a4a85559680e7d537c 2a3a0964c1fa409190e4ff1dbe5d3d1e d62d2657761048a4a85559680e7d537c--2a3a0964c1fa409190e4ff1dbe5d3d1e e6ca79e042564edea2b2d0dc92cf5437 2a3a0964c1fa409190e4ff1dbe5d3d1e--e6ca79e042564edea2b2d0dc92cf5437 35447de943de40d999660977ae4d8771 e6ca79e042564edea2b2d0dc92cf5437--35447de943de40d999660977ae4d8771 22785ff7fa31452ea1847b531b3daafa 35447de943de40d999660977ae4d8771--22785ff7fa31452ea1847b531b3daafa 9a91b8e74a854d7280fad18f961e9145 22785ff7fa31452ea1847b531b3daafa--9a91b8e74a854d7280fad18f961e9145 f3a287724b12430880f93913f25069cf 9a91b8e74a854d7280fad18f961e9145--f3a287724b12430880f93913f25069cf 240d02747db742d68c0fe6b817ace980 f3a287724b12430880f93913f25069cf--240d02747db742d68c0fe6b817ace980 e6d996394bb84711ace10a19309b2bd5 240d02747db742d68c0fe6b817ace980--e6d996394bb84711ace10a19309b2bd5 1639d39208fa4564bc7a72cc9a194d2e e6d996394bb84711ace10a19309b2bd5--1639d39208fa4564bc7a72cc9a194d2e 33dfabe642ae498bb64ab11a36817686 1639d39208fa4564bc7a72cc9a194d2e--33dfabe642ae498bb64ab11a36817686 407f3de8cddd46d6957197bd02674dec 33dfabe642ae498bb64ab11a36817686--407f3de8cddd46d6957197bd02674dec eb483f2326814bcc82477ab6d2ef2054 407f3de8cddd46d6957197bd02674dec--eb483f2326814bcc82477ab6d2ef2054 c615e2caee7341bc9227f354628854c6 eb483f2326814bcc82477ab6d2ef2054--c615e2caee7341bc9227f354628854c6 31ddb0cce5274663bdfe9a11a8629137 c615e2caee7341bc9227f354628854c6--31ddb0cce5274663bdfe9a11a8629137 2cd5e6c3b2b145328546304c1bd92357 31ddb0cce5274663bdfe9a11a8629137--2cd5e6c3b2b145328546304c1bd92357 90d58bb6f10a45c88cf0f33621f5f5ee 2cd5e6c3b2b145328546304c1bd92357--90d58bb6f10a45c88cf0f33621f5f5ee ba878721a1254682977a333493c7313f 90d58bb6f10a45c88cf0f33621f5f5ee--ba878721a1254682977a333493c7313f c6798c3f52b84c069b20c626c00635c9 ba878721a1254682977a333493c7313f--c6798c3f52b84c069b20c626c00635c9 2f98f780393b4a00ae52337edc3fffee c6798c3f52b84c069b20c626c00635c9--2f98f780393b4a00ae52337edc3fffee 3d28020ad6ef419b9971e890aad9cd31 2f98f780393b4a00ae52337edc3fffee--3d28020ad6ef419b9971e890aad9cd31 031806bc257f4b46b3b52b971506b210 3d28020ad6ef419b9971e890aad9cd31--031806bc257f4b46b3b52b971506b210 2753fa5e71e64432b7333a09c7b7bc2f 031806bc257f4b46b3b52b971506b210--2753fa5e71e64432b7333a09c7b7bc2f eb713098f9cc45f291d99269ee74f06b 2753fa5e71e64432b7333a09c7b7bc2f--eb713098f9cc45f291d99269ee74f06b 92957d2d11694d808b7de04a7e649ce3 eb713098f9cc45f291d99269ee74f06b--92957d2d11694d808b7de04a7e649ce3 43532cd423fb4884819f8c3692e1ccfe 92957d2d11694d808b7de04a7e649ce3--43532cd423fb4884819f8c3692e1ccfe ea5726171295463dab781284b4b77119 RX(b12) 43532cd423fb4884819f8c3692e1ccfe--ea5726171295463dab781284b4b77119 ea5726171295463dab781284b4b77119--82d12f0be2054b48b574a6f11b0e6acf 046553c22c7c460fbf404fb0144d3886 dc908ba30a3c44dc9a979e08c8bbc7dc 925a8120955f4df88757f19a43e23e98--dc908ba30a3c44dc9a979e08c8bbc7dc ea7ead8e62c545d7bd2416437499cff5 4 a803e157ae2545fbb9ee7b3e07d28d4b dc908ba30a3c44dc9a979e08c8bbc7dc--a803e157ae2545fbb9ee7b3e07d28d4b 6f3d748d629a4fed8a7291cda9f15ede X a803e157ae2545fbb9ee7b3e07d28d4b--6f3d748d629a4fed8a7291cda9f15ede 6f3d748d629a4fed8a7291cda9f15ede--96992eff85e249b6a6187dcae4cbdbb4 445d320fb8414f9c8f9aa82b9979cead 6f3d748d629a4fed8a7291cda9f15ede--445d320fb8414f9c8f9aa82b9979cead 18aa2c0648c34379a7284b780f3b67a6 445d320fb8414f9c8f9aa82b9979cead--18aa2c0648c34379a7284b780f3b67a6 71961665a2bd4d92858a9cbc99ccdf2d 18aa2c0648c34379a7284b780f3b67a6--71961665a2bd4d92858a9cbc99ccdf2d 2d6296957a8141aebf684ca7ddf3dbe0 71961665a2bd4d92858a9cbc99ccdf2d--2d6296957a8141aebf684ca7ddf3dbe0 20501d99bba84fcd97d058b32d6d02dc 2d6296957a8141aebf684ca7ddf3dbe0--20501d99bba84fcd97d058b32d6d02dc 2277265edd1642a898115d2b23851b3a 20501d99bba84fcd97d058b32d6d02dc--2277265edd1642a898115d2b23851b3a f0825435a5ad4bcb9b19010fceee7f2d 2277265edd1642a898115d2b23851b3a--f0825435a5ad4bcb9b19010fceee7f2d 07eda89a2d2f45c787fca561a09d3ae5 f0825435a5ad4bcb9b19010fceee7f2d--07eda89a2d2f45c787fca561a09d3ae5 7a736c5f2a704515b89c9cd7c529e758 07eda89a2d2f45c787fca561a09d3ae5--7a736c5f2a704515b89c9cd7c529e758 6d40be7355324d5183335df294e3c243 X 7a736c5f2a704515b89c9cd7c529e758--6d40be7355324d5183335df294e3c243 6d40be7355324d5183335df294e3c243--549945d325444f12a583f40a1a9275f1 b6c189cb99b546fdbca87549653be6b7 6d40be7355324d5183335df294e3c243--b6c189cb99b546fdbca87549653be6b7 2984b9aacf6542cea327d74192a2b6ad b6c189cb99b546fdbca87549653be6b7--2984b9aacf6542cea327d74192a2b6ad 9b459bc52cf34a1f8a833972a5f3b85c 2984b9aacf6542cea327d74192a2b6ad--9b459bc52cf34a1f8a833972a5f3b85c eb1efdee3cbf4109bad09e168ec4d09c 9b459bc52cf34a1f8a833972a5f3b85c--eb1efdee3cbf4109bad09e168ec4d09c cc951821b1634d7cadb716c04f8d299f eb1efdee3cbf4109bad09e168ec4d09c--cc951821b1634d7cadb716c04f8d299f 3b5f9497da08473da9e29f4eb11fb103 cc951821b1634d7cadb716c04f8d299f--3b5f9497da08473da9e29f4eb11fb103 3f4d8f8bd9f54987967358884a5e19d1 3b5f9497da08473da9e29f4eb11fb103--3f4d8f8bd9f54987967358884a5e19d1 ce89f945b4514348be4851711b7b6da8 3f4d8f8bd9f54987967358884a5e19d1--ce89f945b4514348be4851711b7b6da8 9ebafe283d5c4c23b673aa69589ff0ef ce89f945b4514348be4851711b7b6da8--9ebafe283d5c4c23b673aa69589ff0ef 6053d8165c2a4d9d848a11ac953d4d69 X 9ebafe283d5c4c23b673aa69589ff0ef--6053d8165c2a4d9d848a11ac953d4d69 6053d8165c2a4d9d848a11ac953d4d69--2ea092208ded451fbbaa1b262624ed35 bf77831704fb45a68f17c9d63c054a9e RZ(-1.0*g0) 6053d8165c2a4d9d848a11ac953d4d69--bf77831704fb45a68f17c9d63c054a9e c5ff746f4d894700a77f9adacbb7fdd6 X bf77831704fb45a68f17c9d63c054a9e--c5ff746f4d894700a77f9adacbb7fdd6 c5ff746f4d894700a77f9adacbb7fdd6--cc4b276fc25a41cbac3569a2c2212954 17f247e57bc04a249b9d799c79e29380 c5ff746f4d894700a77f9adacbb7fdd6--17f247e57bc04a249b9d799c79e29380 cf7237ac1beb4825bf9a29f6359ca137 17f247e57bc04a249b9d799c79e29380--cf7237ac1beb4825bf9a29f6359ca137 4e0d4769323840899bf461687a46c9d4 cf7237ac1beb4825bf9a29f6359ca137--4e0d4769323840899bf461687a46c9d4 c83b9d23a54145dd9ea0c7432a1fd834 4e0d4769323840899bf461687a46c9d4--c83b9d23a54145dd9ea0c7432a1fd834 5902c7d9701f4812801d8964d54612bc X c83b9d23a54145dd9ea0c7432a1fd834--5902c7d9701f4812801d8964d54612bc 5902c7d9701f4812801d8964d54612bc--38089240386b4379bd18c44709e21e80 b5f38e56811445538af7450225e248d9 5902c7d9701f4812801d8964d54612bc--b5f38e56811445538af7450225e248d9 955d7d4153f04a4c9c509ffb5ad099b8 b5f38e56811445538af7450225e248d9--955d7d4153f04a4c9c509ffb5ad099b8 d9ab214f01d64b0abd392166456b2eb7 955d7d4153f04a4c9c509ffb5ad099b8--d9ab214f01d64b0abd392166456b2eb7 c8cbbd0512ee4972b38f394b3d05da19 d9ab214f01d64b0abd392166456b2eb7--c8cbbd0512ee4972b38f394b3d05da19 3550c9fdda26471f84762cab142dff4f c8cbbd0512ee4972b38f394b3d05da19--3550c9fdda26471f84762cab142dff4f 801f1f7c810040e6929f8d5d072fbacf X 3550c9fdda26471f84762cab142dff4f--801f1f7c810040e6929f8d5d072fbacf 801f1f7c810040e6929f8d5d072fbacf--6b4fb52aee5b421fa5237a8237143344 056dfb3a6c9f40de9ca66777fb23b0de 801f1f7c810040e6929f8d5d072fbacf--056dfb3a6c9f40de9ca66777fb23b0de dc8f03a0ce294db289afada2e9c2d624 056dfb3a6c9f40de9ca66777fb23b0de--dc8f03a0ce294db289afada2e9c2d624 51c03c19f5f84034a006a971629ed01f dc8f03a0ce294db289afada2e9c2d624--51c03c19f5f84034a006a971629ed01f 744ba242642b4d65868ec9c3fcd8fff6 51c03c19f5f84034a006a971629ed01f--744ba242642b4d65868ec9c3fcd8fff6 e3a2384225f04f65abdb1563b099d013 X 744ba242642b4d65868ec9c3fcd8fff6--e3a2384225f04f65abdb1563b099d013 e3a2384225f04f65abdb1563b099d013--c4110929f51b4fbcacf948a41bbbb361 84d550c819cc4e0c9710ee465a47fb7c e3a2384225f04f65abdb1563b099d013--84d550c819cc4e0c9710ee465a47fb7c 1718659b244d4767933f936d8db7f855 84d550c819cc4e0c9710ee465a47fb7c--1718659b244d4767933f936d8db7f855 98a3061c59a24421b6ae0e8afed50022 1718659b244d4767933f936d8db7f855--98a3061c59a24421b6ae0e8afed50022 55d36c7aba0c41f9a5eaaa874a460d35 98a3061c59a24421b6ae0e8afed50022--55d36c7aba0c41f9a5eaaa874a460d35 7ef16eecc80f48dbb3bf960a0e1dff90 55d36c7aba0c41f9a5eaaa874a460d35--7ef16eecc80f48dbb3bf960a0e1dff90 5d4e2091a3334a2aa34352c2d2d99d74 7ef16eecc80f48dbb3bf960a0e1dff90--5d4e2091a3334a2aa34352c2d2d99d74 fd172d2a73b244038cf584a1d6575c11 5d4e2091a3334a2aa34352c2d2d99d74--fd172d2a73b244038cf584a1d6575c11 13a9c40b7a3543909da0074ea05bcf51 X fd172d2a73b244038cf584a1d6575c11--13a9c40b7a3543909da0074ea05bcf51 13a9c40b7a3543909da0074ea05bcf51--b21137408bb94aad8d73bc8dfadac43b a88c68eb2e0f4adeb2d8cdd18de816ca 13a9c40b7a3543909da0074ea05bcf51--a88c68eb2e0f4adeb2d8cdd18de816ca f3f31a35d3a04ef98884c2ade4b69b3b a88c68eb2e0f4adeb2d8cdd18de816ca--f3f31a35d3a04ef98884c2ade4b69b3b a6bd7ad951ee4ed19ef436131bb730e7 f3f31a35d3a04ef98884c2ade4b69b3b--a6bd7ad951ee4ed19ef436131bb730e7 72cea343e03d4f508a0878b73efc9bab a6bd7ad951ee4ed19ef436131bb730e7--72cea343e03d4f508a0878b73efc9bab 38babbd3229d4cc695dbcfe546218e28 X 72cea343e03d4f508a0878b73efc9bab--38babbd3229d4cc695dbcfe546218e28 38babbd3229d4cc695dbcfe546218e28--33c7fc4a69d945c1bbf1b54c3fab4d7d cd7bbd0898374cee925a098932b1ea6e 38babbd3229d4cc695dbcfe546218e28--cd7bbd0898374cee925a098932b1ea6e ad6146ae62ee420a8ee2614e2b026b97 cd7bbd0898374cee925a098932b1ea6e--ad6146ae62ee420a8ee2614e2b026b97 2795a1704d82455caeaef11079fa8037 ad6146ae62ee420a8ee2614e2b026b97--2795a1704d82455caeaef11079fa8037 6af310349d21487ab37ee4e59ed694e0 2795a1704d82455caeaef11079fa8037--6af310349d21487ab37ee4e59ed694e0 51138a59740d479cbf323c9ea3994125 6af310349d21487ab37ee4e59ed694e0--51138a59740d479cbf323c9ea3994125 fb570e736e4e4b2286eb0061890e13f2 51138a59740d479cbf323c9ea3994125--fb570e736e4e4b2286eb0061890e13f2 31f4f7807bdc4bdbb15724d6ee1698d6 fb570e736e4e4b2286eb0061890e13f2--31f4f7807bdc4bdbb15724d6ee1698d6 e2707b7fb808471893cabc4b7231ebe3 31f4f7807bdc4bdbb15724d6ee1698d6--e2707b7fb808471893cabc4b7231ebe3 906f347fdd5c4715a023de4465a3fbe8 e2707b7fb808471893cabc4b7231ebe3--906f347fdd5c4715a023de4465a3fbe8 bd9c66386657473280d7a97b417eefc0 X 906f347fdd5c4715a023de4465a3fbe8--bd9c66386657473280d7a97b417eefc0 bd9c66386657473280d7a97b417eefc0--cf651ed8a5bf42ae9c7777af5b17171d 0fc29daeed1248648d4521d4d61c9c9b bd9c66386657473280d7a97b417eefc0--0fc29daeed1248648d4521d4d61c9c9b 4bd6da87b85e45c19eb3a8b5d0d2c134 0fc29daeed1248648d4521d4d61c9c9b--4bd6da87b85e45c19eb3a8b5d0d2c134 167bcb118866490386f3c9c7e8628647 4bd6da87b85e45c19eb3a8b5d0d2c134--167bcb118866490386f3c9c7e8628647 e9a2bab15e154af48c7cbec0ac69677f X 167bcb118866490386f3c9c7e8628647--e9a2bab15e154af48c7cbec0ac69677f e9a2bab15e154af48c7cbec0ac69677f--7cb0b1db67dc40febe507e1d418713f9 2d403d45250d4eccae48832892bb1ed8 RZ(-1.0*g0) e9a2bab15e154af48c7cbec0ac69677f--2d403d45250d4eccae48832892bb1ed8 2f2482756d274cd5a95400a6ded90c02 X 2d403d45250d4eccae48832892bb1ed8--2f2482756d274cd5a95400a6ded90c02 2f2482756d274cd5a95400a6ded90c02--12d25e3756f542cd866adaf730a3480e 4e00b78a01f34881ae7890b0aed4404b 2f2482756d274cd5a95400a6ded90c02--4e00b78a01f34881ae7890b0aed4404b 947b7b2c869b4412b0aaf3e573d6fa97 4e00b78a01f34881ae7890b0aed4404b--947b7b2c869b4412b0aaf3e573d6fa97 3c41eff98e1d4dec81669a14c6d8a8fc X 947b7b2c869b4412b0aaf3e573d6fa97--3c41eff98e1d4dec81669a14c6d8a8fc 3c41eff98e1d4dec81669a14c6d8a8fc--f4571c70b6644f1c92cc83127f97c0c9 9dbaa808439341198401bd726e773331 3c41eff98e1d4dec81669a14c6d8a8fc--9dbaa808439341198401bd726e773331 62df26624a72410b9baf26ffc2f8a34f 9dbaa808439341198401bd726e773331--62df26624a72410b9baf26ffc2f8a34f 8fd1dfe8fc3f4857af1486870de4c975 62df26624a72410b9baf26ffc2f8a34f--8fd1dfe8fc3f4857af1486870de4c975 ccdd3ce29612486c9b26118eb08167bd 8fd1dfe8fc3f4857af1486870de4c975--ccdd3ce29612486c9b26118eb08167bd ba48e3ee825e41eda3411ccaac49cbfe ccdd3ce29612486c9b26118eb08167bd--ba48e3ee825e41eda3411ccaac49cbfe b667f73bc8a54bcfb411998b1b8097ee ba48e3ee825e41eda3411ccaac49cbfe--b667f73bc8a54bcfb411998b1b8097ee fa4191c6c7474d1d8d84196e1c767ea3 b667f73bc8a54bcfb411998b1b8097ee--fa4191c6c7474d1d8d84196e1c767ea3 b8643cfe3fbb40caa6459add729d9f21 X fa4191c6c7474d1d8d84196e1c767ea3--b8643cfe3fbb40caa6459add729d9f21 b8643cfe3fbb40caa6459add729d9f21--c8f61e86794a48dcbfee23d36c5a5a60 ff8f1527a2414ab4a27f095f95523724 b8643cfe3fbb40caa6459add729d9f21--ff8f1527a2414ab4a27f095f95523724 def8e070a9c64fa69ca16fe831b77d11 X ff8f1527a2414ab4a27f095f95523724--def8e070a9c64fa69ca16fe831b77d11 def8e070a9c64fa69ca16fe831b77d11--e9bdb64dca4f4c4fb998d00d07742bc1 f5faa897a37f48b0beb8c828d7c644e7 def8e070a9c64fa69ca16fe831b77d11--f5faa897a37f48b0beb8c828d7c644e7 e56bef8a005a4b6d9d797dd96250fa08 f5faa897a37f48b0beb8c828d7c644e7--e56bef8a005a4b6d9d797dd96250fa08 7f5b0a49dc61493ebb1c71d5925041ec e56bef8a005a4b6d9d797dd96250fa08--7f5b0a49dc61493ebb1c71d5925041ec 638d5aad9f564643b30f381123ea9134 7f5b0a49dc61493ebb1c71d5925041ec--638d5aad9f564643b30f381123ea9134 513640282fe14fdf9499a24bb3d89cf1 638d5aad9f564643b30f381123ea9134--513640282fe14fdf9499a24bb3d89cf1 a1f5399d156b4d0fbee38aa1ec95d9a8 X 513640282fe14fdf9499a24bb3d89cf1--a1f5399d156b4d0fbee38aa1ec95d9a8 a1f5399d156b4d0fbee38aa1ec95d9a8--e59dccafc96740bf9aa91de9c2cb265c c09451fb3cf0433284a471b1c8826014 X a1f5399d156b4d0fbee38aa1ec95d9a8--c09451fb3cf0433284a471b1c8826014 c09451fb3cf0433284a471b1c8826014--1f2275e25ed04bda982766d7bc5acae4 19c77660f07b4e3896abd35b787c7190 c09451fb3cf0433284a471b1c8826014--19c77660f07b4e3896abd35b787c7190 e15e0a12d9f94631b8fa80ec5ec5749f 19c77660f07b4e3896abd35b787c7190--e15e0a12d9f94631b8fa80ec5ec5749f ef0decba916f47f59abe956f2f53aed4 e15e0a12d9f94631b8fa80ec5ec5749f--ef0decba916f47f59abe956f2f53aed4 53d3ee91af7c46168eda7fcdf6a41c3f ef0decba916f47f59abe956f2f53aed4--53d3ee91af7c46168eda7fcdf6a41c3f 75313a61c55c4c5686b1d2a607b6f129 53d3ee91af7c46168eda7fcdf6a41c3f--75313a61c55c4c5686b1d2a607b6f129 039bc8006b374b4fb5e231235c5f1296 75313a61c55c4c5686b1d2a607b6f129--039bc8006b374b4fb5e231235c5f1296 d25b6519d24543b98babaf1012c8493a 039bc8006b374b4fb5e231235c5f1296--d25b6519d24543b98babaf1012c8493a 5b8d5e681e3d42d69985eee5e2682e73 X d25b6519d24543b98babaf1012c8493a--5b8d5e681e3d42d69985eee5e2682e73 5b8d5e681e3d42d69985eee5e2682e73--433ef5d2427c49658160eb8079b1c681 e84a81c28fe447aab09dd9f7d0840c4f X 5b8d5e681e3d42d69985eee5e2682e73--e84a81c28fe447aab09dd9f7d0840c4f e84a81c28fe447aab09dd9f7d0840c4f--cb4c7241a1df44a0ae681a950f17d9f8 96bae515723e4fb8afa7e5e51eb7dff0 e84a81c28fe447aab09dd9f7d0840c4f--96bae515723e4fb8afa7e5e51eb7dff0 e79291ca5aa34f9b83dc4320d731a6de 96bae515723e4fb8afa7e5e51eb7dff0--e79291ca5aa34f9b83dc4320d731a6de da3c6ce846b5482aaa023e2f73c835a2 e79291ca5aa34f9b83dc4320d731a6de--da3c6ce846b5482aaa023e2f73c835a2 8d17544be4834a7593cba70ba9403ba3 da3c6ce846b5482aaa023e2f73c835a2--8d17544be4834a7593cba70ba9403ba3 2436e033d6034038b060eb33c98bc66d 8d17544be4834a7593cba70ba9403ba3--2436e033d6034038b060eb33c98bc66d 78782e2634cc4df7bbbd22af2a07343d 2436e033d6034038b060eb33c98bc66d--78782e2634cc4df7bbbd22af2a07343d a3c1c8c9c11a4536a8e620215017ae9b 78782e2634cc4df7bbbd22af2a07343d--a3c1c8c9c11a4536a8e620215017ae9b 09ee408477074a8b9537d7bfa8156c42 a3c1c8c9c11a4536a8e620215017ae9b--09ee408477074a8b9537d7bfa8156c42 d88e34ad3667456ea5d2af18bd48e621 09ee408477074a8b9537d7bfa8156c42--d88e34ad3667456ea5d2af18bd48e621 3e45ddaaf5aa48faa47c8cf39867e4b9 X d88e34ad3667456ea5d2af18bd48e621--3e45ddaaf5aa48faa47c8cf39867e4b9 3e45ddaaf5aa48faa47c8cf39867e4b9--e0ee985831274232b3685f09a326b615 973e11bf462d404db1dfb2512ae9689f 3e45ddaaf5aa48faa47c8cf39867e4b9--973e11bf462d404db1dfb2512ae9689f 72924f3ada0941229cdffee760b90a31 973e11bf462d404db1dfb2512ae9689f--72924f3ada0941229cdffee760b90a31 5fe80e2a16ac4ed7a7067fa569a66051 72924f3ada0941229cdffee760b90a31--5fe80e2a16ac4ed7a7067fa569a66051 29a14f18f67940da98c3930efcc1b6b0 5fe80e2a16ac4ed7a7067fa569a66051--29a14f18f67940da98c3930efcc1b6b0 29e2ac111b05422895d775c3f4a32360 29a14f18f67940da98c3930efcc1b6b0--29e2ac111b05422895d775c3f4a32360 cae2dc2da6cf4f5985da328ea05fed4f 29e2ac111b05422895d775c3f4a32360--cae2dc2da6cf4f5985da328ea05fed4f 5a9eeef5e97a46c9b9258970cab03178 cae2dc2da6cf4f5985da328ea05fed4f--5a9eeef5e97a46c9b9258970cab03178 dd4f5ab1cbea476183a2ecc9c8819403 5a9eeef5e97a46c9b9258970cab03178--dd4f5ab1cbea476183a2ecc9c8819403 20360812d3634506b260c9d9efc96c00 dd4f5ab1cbea476183a2ecc9c8819403--20360812d3634506b260c9d9efc96c00 49d0b08f51464034a995aa499374ed46 20360812d3634506b260c9d9efc96c00--49d0b08f51464034a995aa499374ed46 c809df1a7ad048078d608473b0b73312 49d0b08f51464034a995aa499374ed46--c809df1a7ad048078d608473b0b73312 0800069ddc0b490ba6d573512100c13d c809df1a7ad048078d608473b0b73312--0800069ddc0b490ba6d573512100c13d 22b198e2ca8148768ac451c87a8c4b1f 0800069ddc0b490ba6d573512100c13d--22b198e2ca8148768ac451c87a8c4b1f e87c6b147d8d410c8d2275c23d46790c 22b198e2ca8148768ac451c87a8c4b1f--e87c6b147d8d410c8d2275c23d46790c d0befaa9d63e42419b11c6885e9a3f58 e87c6b147d8d410c8d2275c23d46790c--d0befaa9d63e42419b11c6885e9a3f58 7fec0d7e7b6d4528baa07e43ba748ad2 d0befaa9d63e42419b11c6885e9a3f58--7fec0d7e7b6d4528baa07e43ba748ad2 86ce58c753c44a41b192794c030920d7 7fec0d7e7b6d4528baa07e43ba748ad2--86ce58c753c44a41b192794c030920d7 2ca63a3899554654850aa2d5eb7a289b 86ce58c753c44a41b192794c030920d7--2ca63a3899554654850aa2d5eb7a289b b092ab3423a24b69b7575d43fe5a67c4 2ca63a3899554654850aa2d5eb7a289b--b092ab3423a24b69b7575d43fe5a67c4 7a563e1f3f694c24a443c29598ea1432 b092ab3423a24b69b7575d43fe5a67c4--7a563e1f3f694c24a443c29598ea1432 fba68053513847a8bf6e4b3eca1e5fa4 7a563e1f3f694c24a443c29598ea1432--fba68053513847a8bf6e4b3eca1e5fa4 c4e01218e89d4e4da80ae2169518ea77 fba68053513847a8bf6e4b3eca1e5fa4--c4e01218e89d4e4da80ae2169518ea77 81af9262627e42219142daf78ab8538b c4e01218e89d4e4da80ae2169518ea77--81af9262627e42219142daf78ab8538b c24461d0642943a6b8a968ec8178b5c4 81af9262627e42219142daf78ab8538b--c24461d0642943a6b8a968ec8178b5c4 c5d21a279aff4dafa1bb977243575b5e c24461d0642943a6b8a968ec8178b5c4--c5d21a279aff4dafa1bb977243575b5e 493aae01b36a41c5bf59640be38b17d5 c5d21a279aff4dafa1bb977243575b5e--493aae01b36a41c5bf59640be38b17d5 37d15c8f8f144295a4efe31f99bcf248 493aae01b36a41c5bf59640be38b17d5--37d15c8f8f144295a4efe31f99bcf248 d40d48652b964aa2bc896b97d4c492e1 37d15c8f8f144295a4efe31f99bcf248--d40d48652b964aa2bc896b97d4c492e1 d3abea4d4650440bbb095a87bcdb0856 RX(b03) d40d48652b964aa2bc896b97d4c492e1--d3abea4d4650440bbb095a87bcdb0856 3c237d0212f34ef4ad170ad8e233773d d3abea4d4650440bbb095a87bcdb0856--3c237d0212f34ef4ad170ad8e233773d 546d2b575f5a4c00815e0278011aaa84 3c237d0212f34ef4ad170ad8e233773d--546d2b575f5a4c00815e0278011aaa84 49f11bfa39bb4f0aab99f96bf8766154 X 546d2b575f5a4c00815e0278011aaa84--49f11bfa39bb4f0aab99f96bf8766154 49f11bfa39bb4f0aab99f96bf8766154--56aacc3507c34666b3dc1bf25646473e 1da38fd6750b4fbb8f76a8c25ddb63d7 49f11bfa39bb4f0aab99f96bf8766154--1da38fd6750b4fbb8f76a8c25ddb63d7 791f40c96a5644efa26ece4dad9b7047 1da38fd6750b4fbb8f76a8c25ddb63d7--791f40c96a5644efa26ece4dad9b7047 e2dba8ca4b8d45bd835440b3e66369d8 791f40c96a5644efa26ece4dad9b7047--e2dba8ca4b8d45bd835440b3e66369d8 a2ab943182ea4b129b02f06a32898dbb e2dba8ca4b8d45bd835440b3e66369d8--a2ab943182ea4b129b02f06a32898dbb 874876dc4cba40839eaee3c72ba6f206 a2ab943182ea4b129b02f06a32898dbb--874876dc4cba40839eaee3c72ba6f206 6c8693e038f0499d88cc646dac3acdfd 874876dc4cba40839eaee3c72ba6f206--6c8693e038f0499d88cc646dac3acdfd dc8217dfd8de419c8e1caae7b5787cf7 6c8693e038f0499d88cc646dac3acdfd--dc8217dfd8de419c8e1caae7b5787cf7 0cbf294a8ee646df92358323a1df38ff dc8217dfd8de419c8e1caae7b5787cf7--0cbf294a8ee646df92358323a1df38ff c2caf37268164c5880e594f62148c689 0cbf294a8ee646df92358323a1df38ff--c2caf37268164c5880e594f62148c689 459a64b293fa4cb5a579b8240a55d70b X c2caf37268164c5880e594f62148c689--459a64b293fa4cb5a579b8240a55d70b 459a64b293fa4cb5a579b8240a55d70b--bad0341878094584a2b74322e725af8e 027f8126a1ea4b698b6aa936d3053231 459a64b293fa4cb5a579b8240a55d70b--027f8126a1ea4b698b6aa936d3053231 3764438cc84b44a29f2f014217413040 027f8126a1ea4b698b6aa936d3053231--3764438cc84b44a29f2f014217413040 2c8563b930f44893b4ef8f87ce854f7f 3764438cc84b44a29f2f014217413040--2c8563b930f44893b4ef8f87ce854f7f 9a7d4898199e494d95d4673d42ed0a32 2c8563b930f44893b4ef8f87ce854f7f--9a7d4898199e494d95d4673d42ed0a32 36e24bbbc86e4591a9424f7a93df6690 9a7d4898199e494d95d4673d42ed0a32--36e24bbbc86e4591a9424f7a93df6690 7e5e666e2f0344f49522af674ec4d2f2 36e24bbbc86e4591a9424f7a93df6690--7e5e666e2f0344f49522af674ec4d2f2 5feaf9ba77d04eacbc5fbfc059a024d7 7e5e666e2f0344f49522af674ec4d2f2--5feaf9ba77d04eacbc5fbfc059a024d7 15ad046c57d54a3db02ef0f116c7d913 5feaf9ba77d04eacbc5fbfc059a024d7--15ad046c57d54a3db02ef0f116c7d913 f6465bb029ac4e89940899d610a19367 15ad046c57d54a3db02ef0f116c7d913--f6465bb029ac4e89940899d610a19367 747d9ff809984e42b92ce0381479d7c1 X f6465bb029ac4e89940899d610a19367--747d9ff809984e42b92ce0381479d7c1 747d9ff809984e42b92ce0381479d7c1--394cd3aeff0946b1b2e0493a4ef6310c a75a8f8b088a47e59345151e3b56591a RZ(-1.0*g1) 747d9ff809984e42b92ce0381479d7c1--a75a8f8b088a47e59345151e3b56591a f534b5725e6743788a7ed56e0a0b38a6 X a75a8f8b088a47e59345151e3b56591a--f534b5725e6743788a7ed56e0a0b38a6 f534b5725e6743788a7ed56e0a0b38a6--eb5f9b16176c4983994ae331a5fb4be1 ce28c8a3d1ad44408c403ee3a482eee3 f534b5725e6743788a7ed56e0a0b38a6--ce28c8a3d1ad44408c403ee3a482eee3 ba690c5ced99484ca40738e068d9214f ce28c8a3d1ad44408c403ee3a482eee3--ba690c5ced99484ca40738e068d9214f e7961f0f54424c5393019c54b6c7bd9e ba690c5ced99484ca40738e068d9214f--e7961f0f54424c5393019c54b6c7bd9e 78357eb6da1f4ce78b10c3a0ebbd426b e7961f0f54424c5393019c54b6c7bd9e--78357eb6da1f4ce78b10c3a0ebbd426b 3dbc3fa7d45e45b7a89ce54fd1016567 X 78357eb6da1f4ce78b10c3a0ebbd426b--3dbc3fa7d45e45b7a89ce54fd1016567 3dbc3fa7d45e45b7a89ce54fd1016567--1fa6e25570104748acb8e15bc8fca86d 293894bcc08c4109b1eef59e85e137f0 3dbc3fa7d45e45b7a89ce54fd1016567--293894bcc08c4109b1eef59e85e137f0 e2b3b50acb2f4464aaff9b7ce3790825 293894bcc08c4109b1eef59e85e137f0--e2b3b50acb2f4464aaff9b7ce3790825 45f9156bbaa944ebb1450db2612d6d5e e2b3b50acb2f4464aaff9b7ce3790825--45f9156bbaa944ebb1450db2612d6d5e 45dffc9e274647398eb38a00413c2bbd 45f9156bbaa944ebb1450db2612d6d5e--45dffc9e274647398eb38a00413c2bbd d454af361c6f415293a199dd9a308b8d 45dffc9e274647398eb38a00413c2bbd--d454af361c6f415293a199dd9a308b8d 2eb9f87565344bdcba80dde7df816bf9 X d454af361c6f415293a199dd9a308b8d--2eb9f87565344bdcba80dde7df816bf9 2eb9f87565344bdcba80dde7df816bf9--070d1f29fe934ef3a7e9a05522336551 17290291c22540a8ac6158c48630c5f5 2eb9f87565344bdcba80dde7df816bf9--17290291c22540a8ac6158c48630c5f5 c44c7b06a1524873bb9334a9cae34f59 17290291c22540a8ac6158c48630c5f5--c44c7b06a1524873bb9334a9cae34f59 7bf02bde628841acbd1a266b6bdff53f c44c7b06a1524873bb9334a9cae34f59--7bf02bde628841acbd1a266b6bdff53f a6ef675e351a49efaa0f49fd45879760 7bf02bde628841acbd1a266b6bdff53f--a6ef675e351a49efaa0f49fd45879760 922a3a3be79945aab3df31b4706b7a9d X a6ef675e351a49efaa0f49fd45879760--922a3a3be79945aab3df31b4706b7a9d 922a3a3be79945aab3df31b4706b7a9d--102133bec842470e9a1fec54d6ad94af 4f4a344cda6a41b2aad0509985791551 922a3a3be79945aab3df31b4706b7a9d--4f4a344cda6a41b2aad0509985791551 4f61f00efa23435b842f15ce4d3fa6a8 4f4a344cda6a41b2aad0509985791551--4f61f00efa23435b842f15ce4d3fa6a8 2f97cbec2c0843878672b0e30c08c678 4f61f00efa23435b842f15ce4d3fa6a8--2f97cbec2c0843878672b0e30c08c678 4dff6984e72c4db78ac1a44271f9b507 2f97cbec2c0843878672b0e30c08c678--4dff6984e72c4db78ac1a44271f9b507 339d876ab49c4914ab4cd844d0118079 4dff6984e72c4db78ac1a44271f9b507--339d876ab49c4914ab4cd844d0118079 62dc9723c88d448ca94c810e80b054ae 339d876ab49c4914ab4cd844d0118079--62dc9723c88d448ca94c810e80b054ae 9bfcdbaf847d4b069c4cd273d2ce5296 62dc9723c88d448ca94c810e80b054ae--9bfcdbaf847d4b069c4cd273d2ce5296 57cb921ebf774b82be9304a7d912e27f X 9bfcdbaf847d4b069c4cd273d2ce5296--57cb921ebf774b82be9304a7d912e27f 57cb921ebf774b82be9304a7d912e27f--ae2d7e09c11c4d03bbe1fa63b034921e 19753a513cfe432e920fef75fc4aa67d 57cb921ebf774b82be9304a7d912e27f--19753a513cfe432e920fef75fc4aa67d 917213f3aeea4640ace19bad3811bfe6 19753a513cfe432e920fef75fc4aa67d--917213f3aeea4640ace19bad3811bfe6 10f3a9715945447db4bbb8ca685025d8 917213f3aeea4640ace19bad3811bfe6--10f3a9715945447db4bbb8ca685025d8 bcf5689e6ad840019686c58afe8312de 10f3a9715945447db4bbb8ca685025d8--bcf5689e6ad840019686c58afe8312de 699c87127bfc4b67a954d9233e02528d X bcf5689e6ad840019686c58afe8312de--699c87127bfc4b67a954d9233e02528d 699c87127bfc4b67a954d9233e02528d--456f8f552ea14686a1c9b09877ecf443 8cc7e68231c44b4cb8031ff427c33307 699c87127bfc4b67a954d9233e02528d--8cc7e68231c44b4cb8031ff427c33307 3e5b945999e741f5b4a6950cb746c12d 8cc7e68231c44b4cb8031ff427c33307--3e5b945999e741f5b4a6950cb746c12d 0bcfac58925542e69072137b1dba5ace 3e5b945999e741f5b4a6950cb746c12d--0bcfac58925542e69072137b1dba5ace d3b08c781e904f25a10fdecfb8bc336c 0bcfac58925542e69072137b1dba5ace--d3b08c781e904f25a10fdecfb8bc336c 635bb107c1de4ebf9c0fdc40c48b5559 d3b08c781e904f25a10fdecfb8bc336c--635bb107c1de4ebf9c0fdc40c48b5559 764a196269fb4a21a44aba2cc72383b2 635bb107c1de4ebf9c0fdc40c48b5559--764a196269fb4a21a44aba2cc72383b2 e174df40ebe04603b1e44ce2b16f4773 764a196269fb4a21a44aba2cc72383b2--e174df40ebe04603b1e44ce2b16f4773 c187f8b3252a4b2e900433bada018f4b e174df40ebe04603b1e44ce2b16f4773--c187f8b3252a4b2e900433bada018f4b 88dde5dce4244a4eab976b63c89d4614 c187f8b3252a4b2e900433bada018f4b--88dde5dce4244a4eab976b63c89d4614 bc7f129cee3841a3af8c18dd04aea914 X 88dde5dce4244a4eab976b63c89d4614--bc7f129cee3841a3af8c18dd04aea914 bc7f129cee3841a3af8c18dd04aea914--1359917473a24a00a30a5f8d779e2d80 f4e4f286041b4e73a3ae57031d69141f bc7f129cee3841a3af8c18dd04aea914--f4e4f286041b4e73a3ae57031d69141f db43003cdc30478d85f1e7f864967578 f4e4f286041b4e73a3ae57031d69141f--db43003cdc30478d85f1e7f864967578 914165e559cf42aaa882e268557ffebf db43003cdc30478d85f1e7f864967578--914165e559cf42aaa882e268557ffebf c1caa8d6d07b4af582b8cc451377bb60 X 914165e559cf42aaa882e268557ffebf--c1caa8d6d07b4af582b8cc451377bb60 c1caa8d6d07b4af582b8cc451377bb60--2dffc42bd4c247c7b1038d56ab10a283 039018066d0e49d59486110f2e7dc15a RZ(-1.0*g1) c1caa8d6d07b4af582b8cc451377bb60--039018066d0e49d59486110f2e7dc15a 41dab79dad294ccbb95e84da513afc12 X 039018066d0e49d59486110f2e7dc15a--41dab79dad294ccbb95e84da513afc12 41dab79dad294ccbb95e84da513afc12--476531a3b0e44f0bb0e112126ad38991 23fdfad7f25c416bb34e5ae89b3ba9e2 41dab79dad294ccbb95e84da513afc12--23fdfad7f25c416bb34e5ae89b3ba9e2 b748ffc3cee646438714e916b6673f3e 23fdfad7f25c416bb34e5ae89b3ba9e2--b748ffc3cee646438714e916b6673f3e e6770c6c003b42e49f140162e832746c X b748ffc3cee646438714e916b6673f3e--e6770c6c003b42e49f140162e832746c e6770c6c003b42e49f140162e832746c--1a211a2ddc5b4e6ca2a3aafbed4841a7 38561354980e42c5b9276bd30aea537a e6770c6c003b42e49f140162e832746c--38561354980e42c5b9276bd30aea537a ff399be4d7f44d3c94d96c86a4aff4a3 38561354980e42c5b9276bd30aea537a--ff399be4d7f44d3c94d96c86a4aff4a3 7ac664e514ea4927aa38c7789f15ed2b ff399be4d7f44d3c94d96c86a4aff4a3--7ac664e514ea4927aa38c7789f15ed2b fe7d570001ed4082b403f3fe37c4d7b7 7ac664e514ea4927aa38c7789f15ed2b--fe7d570001ed4082b403f3fe37c4d7b7 62948ddf21d346a48d6783daed2359ec fe7d570001ed4082b403f3fe37c4d7b7--62948ddf21d346a48d6783daed2359ec 6eefebda89214dc3a67a37027dced5f5 62948ddf21d346a48d6783daed2359ec--6eefebda89214dc3a67a37027dced5f5 79bdf89b094b4dd887fd171d297f9c3a 6eefebda89214dc3a67a37027dced5f5--79bdf89b094b4dd887fd171d297f9c3a 5642934088694f8dab985202acb4c8af X 79bdf89b094b4dd887fd171d297f9c3a--5642934088694f8dab985202acb4c8af 5642934088694f8dab985202acb4c8af--660e97fe01244863a65270e57f438cbb a2e7faa553814a88bdf45d9055b92cb3 5642934088694f8dab985202acb4c8af--a2e7faa553814a88bdf45d9055b92cb3 ad989d3bc9c342069a21ea5df14a2c5c X a2e7faa553814a88bdf45d9055b92cb3--ad989d3bc9c342069a21ea5df14a2c5c ad989d3bc9c342069a21ea5df14a2c5c--1a2f8c9045004e7eada6f98de01b44b0 badbf23b91bd4d888c7ae23cff02120e ad989d3bc9c342069a21ea5df14a2c5c--badbf23b91bd4d888c7ae23cff02120e dbf66845aabd4893aa6b48c3ed504dc9 badbf23b91bd4d888c7ae23cff02120e--dbf66845aabd4893aa6b48c3ed504dc9 f0356a10646349cf9d983692078f66cd dbf66845aabd4893aa6b48c3ed504dc9--f0356a10646349cf9d983692078f66cd c8b5520b54684bfe9db9832d1e47a516 f0356a10646349cf9d983692078f66cd--c8b5520b54684bfe9db9832d1e47a516 4bb2f1ec097f4e2d87cc24282aeb9774 c8b5520b54684bfe9db9832d1e47a516--4bb2f1ec097f4e2d87cc24282aeb9774 7ef9a1c518874952af74ad3c062f145e X 4bb2f1ec097f4e2d87cc24282aeb9774--7ef9a1c518874952af74ad3c062f145e 7ef9a1c518874952af74ad3c062f145e--7277f51d6813445db6d0ccd803c0f2de 8be5464acc2e4c01a04ab265389391cb X 7ef9a1c518874952af74ad3c062f145e--8be5464acc2e4c01a04ab265389391cb 8be5464acc2e4c01a04ab265389391cb--1cfef364e030452c9cabd24d4dbf7b24 96ced1d4d05440d1b5722c00943112c5 8be5464acc2e4c01a04ab265389391cb--96ced1d4d05440d1b5722c00943112c5 a5a17743f4f84f5899a688be5ec46847 96ced1d4d05440d1b5722c00943112c5--a5a17743f4f84f5899a688be5ec46847 f38c9e4c4cdb432baedff08862e04eee a5a17743f4f84f5899a688be5ec46847--f38c9e4c4cdb432baedff08862e04eee 2406a899802b42879257c93f750f4b27 f38c9e4c4cdb432baedff08862e04eee--2406a899802b42879257c93f750f4b27 c3fd08f62a6d4c41be7579c56178c8cc 2406a899802b42879257c93f750f4b27--c3fd08f62a6d4c41be7579c56178c8cc 4889e04b1ca5412e893025f484c1e040 c3fd08f62a6d4c41be7579c56178c8cc--4889e04b1ca5412e893025f484c1e040 86a0ab207f3c43f0b6531d742bcebf64 4889e04b1ca5412e893025f484c1e040--86a0ab207f3c43f0b6531d742bcebf64 e23ce0ca97af42ff9bd81e4a788b9125 X 86a0ab207f3c43f0b6531d742bcebf64--e23ce0ca97af42ff9bd81e4a788b9125 e23ce0ca97af42ff9bd81e4a788b9125--d5830eb826ef47db8ddbe45602ebd10b 317b3b9fc660429499b937d83c88c02e X e23ce0ca97af42ff9bd81e4a788b9125--317b3b9fc660429499b937d83c88c02e 317b3b9fc660429499b937d83c88c02e--308b360d24b64e1292f38b08f83bac1e a476161419584ad285b5d35679dd3ca8 317b3b9fc660429499b937d83c88c02e--a476161419584ad285b5d35679dd3ca8 64114a0a061844cab0d7860100f26f3a a476161419584ad285b5d35679dd3ca8--64114a0a061844cab0d7860100f26f3a 877a012a01e847f28d96fcaaf3f5d10a 64114a0a061844cab0d7860100f26f3a--877a012a01e847f28d96fcaaf3f5d10a 66543567dd1e4720a2827dfbdf883a4e 877a012a01e847f28d96fcaaf3f5d10a--66543567dd1e4720a2827dfbdf883a4e 0a2daec17ad8460f8f52546c7bcc9c3b 66543567dd1e4720a2827dfbdf883a4e--0a2daec17ad8460f8f52546c7bcc9c3b c98477f182cc44ffb7de200a51fd9010 0a2daec17ad8460f8f52546c7bcc9c3b--c98477f182cc44ffb7de200a51fd9010 176ef1dfcb9b4be7a96a6f107a1a9ca8 c98477f182cc44ffb7de200a51fd9010--176ef1dfcb9b4be7a96a6f107a1a9ca8 39c9a4a522d645d188b8d3048736a87c 176ef1dfcb9b4be7a96a6f107a1a9ca8--39c9a4a522d645d188b8d3048736a87c 22efc098045a458e832a8b99390d4965 39c9a4a522d645d188b8d3048736a87c--22efc098045a458e832a8b99390d4965 f95f0d5fc5154b31893d301561a0ce23 X 22efc098045a458e832a8b99390d4965--f95f0d5fc5154b31893d301561a0ce23 f95f0d5fc5154b31893d301561a0ce23--302093a3fc0140a5b3be7b64a8992ea1 15a3d498a19f40f9a613c242e69b097e f95f0d5fc5154b31893d301561a0ce23--15a3d498a19f40f9a613c242e69b097e 129f791032c44002a3391778bfc10cd9 15a3d498a19f40f9a613c242e69b097e--129f791032c44002a3391778bfc10cd9 fe2b82f999c3434787573d5f1b34eda3 129f791032c44002a3391778bfc10cd9--fe2b82f999c3434787573d5f1b34eda3 42d2db58970f49afb99ff403bec8ff76 fe2b82f999c3434787573d5f1b34eda3--42d2db58970f49afb99ff403bec8ff76 161609801549475ca1687ae481735c82 42d2db58970f49afb99ff403bec8ff76--161609801549475ca1687ae481735c82 704e558758d64738bce18800751ed7e7 161609801549475ca1687ae481735c82--704e558758d64738bce18800751ed7e7 1577db27218d4cdbb40fe9fc8ed1d344 704e558758d64738bce18800751ed7e7--1577db27218d4cdbb40fe9fc8ed1d344 d790865b9c8f4ed584feede7a20bc70b 1577db27218d4cdbb40fe9fc8ed1d344--d790865b9c8f4ed584feede7a20bc70b 5f28afad6e454876b31b1f9138752b47 d790865b9c8f4ed584feede7a20bc70b--5f28afad6e454876b31b1f9138752b47 bc781133e19b4e12994a296dd5c10f91 5f28afad6e454876b31b1f9138752b47--bc781133e19b4e12994a296dd5c10f91 3f564825a8a14b6183b671f52916079a bc781133e19b4e12994a296dd5c10f91--3f564825a8a14b6183b671f52916079a 6bc656d7161e4996a43d89f3c44d79fd 3f564825a8a14b6183b671f52916079a--6bc656d7161e4996a43d89f3c44d79fd 1df95b0826d84f4090f3b7a73fd81e28 6bc656d7161e4996a43d89f3c44d79fd--1df95b0826d84f4090f3b7a73fd81e28 832f8c02028a4b86a09f5295291ba7a8 1df95b0826d84f4090f3b7a73fd81e28--832f8c02028a4b86a09f5295291ba7a8 0eb062144f94435e8664ca849606ed21 832f8c02028a4b86a09f5295291ba7a8--0eb062144f94435e8664ca849606ed21 55fec083c6d44076be05606bc84c9056 0eb062144f94435e8664ca849606ed21--55fec083c6d44076be05606bc84c9056 fd485248cd3b49808277646f3e894ba7 55fec083c6d44076be05606bc84c9056--fd485248cd3b49808277646f3e894ba7 32c52e33f7b34d1a9bb2997c5b4ad277 fd485248cd3b49808277646f3e894ba7--32c52e33f7b34d1a9bb2997c5b4ad277 cb355f5d32ea48909e0f126a24c4cc60 32c52e33f7b34d1a9bb2997c5b4ad277--cb355f5d32ea48909e0f126a24c4cc60 4a03f10709654979b3fa61523bc2236b cb355f5d32ea48909e0f126a24c4cc60--4a03f10709654979b3fa61523bc2236b 695b52fb422c4b5daec94c45c705bb1c 4a03f10709654979b3fa61523bc2236b--695b52fb422c4b5daec94c45c705bb1c 109a4132a44245d88762ef453234c676 695b52fb422c4b5daec94c45c705bb1c--109a4132a44245d88762ef453234c676 4f6ec9c675a140eba105781f16ecdf59 109a4132a44245d88762ef453234c676--4f6ec9c675a140eba105781f16ecdf59 cd510f0a71fc4acab78e92e0701ad9c2 4f6ec9c675a140eba105781f16ecdf59--cd510f0a71fc4acab78e92e0701ad9c2 0a7b064429fc4d11ad86614bb1d981ac cd510f0a71fc4acab78e92e0701ad9c2--0a7b064429fc4d11ad86614bb1d981ac 84d4efd1afb84e1a94c8ccece62a2bea 0a7b064429fc4d11ad86614bb1d981ac--84d4efd1afb84e1a94c8ccece62a2bea 5d7a842f87bd4b0a8fd91b7b80ffc062 84d4efd1afb84e1a94c8ccece62a2bea--5d7a842f87bd4b0a8fd91b7b80ffc062 a813c3e6c1354a09ad4f880e2b73e15f 5d7a842f87bd4b0a8fd91b7b80ffc062--a813c3e6c1354a09ad4f880e2b73e15f ded2bad3ec564b679af9c2c557dab516 RX(b13) a813c3e6c1354a09ad4f880e2b73e15f--ded2bad3ec564b679af9c2c557dab516 ded2bad3ec564b679af9c2c557dab516--046553c22c7c460fbf404fb0144d3886 f08e023a21524a6a833053d4bbe1d77c f8e05ce4dc0d4dea8df10d8930234125 ea7ead8e62c545d7bd2416437499cff5--f8e05ce4dc0d4dea8df10d8930234125 7eeef696fbc84ce78cabc3ce763a087a 5 b0032cd06d8841459fdf07a35a34ec5c f8e05ce4dc0d4dea8df10d8930234125--b0032cd06d8841459fdf07a35a34ec5c 0771a6209a914908ade2a962460b73cf b0032cd06d8841459fdf07a35a34ec5c--0771a6209a914908ade2a962460b73cf cf3c3ae4bf6449d8ab9738c874cb7171 X 0771a6209a914908ade2a962460b73cf--cf3c3ae4bf6449d8ab9738c874cb7171 cf3c3ae4bf6449d8ab9738c874cb7171--445d320fb8414f9c8f9aa82b9979cead df6cdbd7be9349ae92627865fc246bf9 cf3c3ae4bf6449d8ab9738c874cb7171--df6cdbd7be9349ae92627865fc246bf9 0faa7931a6ae4f0eb17c044acc5f6871 df6cdbd7be9349ae92627865fc246bf9--0faa7931a6ae4f0eb17c044acc5f6871 e4465f0ffbdb4c58b9a758f3d5ed9f9b 0faa7931a6ae4f0eb17c044acc5f6871--e4465f0ffbdb4c58b9a758f3d5ed9f9b 1846a8f7baa44ba290e081dc4887ef0b e4465f0ffbdb4c58b9a758f3d5ed9f9b--1846a8f7baa44ba290e081dc4887ef0b 63b65b33e3234b69b045de886809cbfc 1846a8f7baa44ba290e081dc4887ef0b--63b65b33e3234b69b045de886809cbfc b60d2349589f4373ad2058fdb04a4219 63b65b33e3234b69b045de886809cbfc--b60d2349589f4373ad2058fdb04a4219 ce6e608287a14ed1812bfaca77106a06 b60d2349589f4373ad2058fdb04a4219--ce6e608287a14ed1812bfaca77106a06 5095385c6dc64117b4e2294495971b6b X ce6e608287a14ed1812bfaca77106a06--5095385c6dc64117b4e2294495971b6b 5095385c6dc64117b4e2294495971b6b--7a736c5f2a704515b89c9cd7c529e758 af11e7b62348473592b3c7a1e294737f 5095385c6dc64117b4e2294495971b6b--af11e7b62348473592b3c7a1e294737f 7854fd09de4d49369b98245d06ad7e7b af11e7b62348473592b3c7a1e294737f--7854fd09de4d49369b98245d06ad7e7b 8b494371a6cd4910acfe45b92e484d12 7854fd09de4d49369b98245d06ad7e7b--8b494371a6cd4910acfe45b92e484d12 b70cef84273a4b95b78cf80a2e439374 8b494371a6cd4910acfe45b92e484d12--b70cef84273a4b95b78cf80a2e439374 4042d87e38fd4b0bb85d41004254df77 b70cef84273a4b95b78cf80a2e439374--4042d87e38fd4b0bb85d41004254df77 f8fcc467e0334d27a0e105e272c58970 4042d87e38fd4b0bb85d41004254df77--f8fcc467e0334d27a0e105e272c58970 ef4450b35b7e4111b6c830832284042c f8fcc467e0334d27a0e105e272c58970--ef4450b35b7e4111b6c830832284042c c8d2b2ae26a74b0fa89559ef96caf5a6 ef4450b35b7e4111b6c830832284042c--c8d2b2ae26a74b0fa89559ef96caf5a6 29c601b2467b4d0ca6ddc3e667c81203 c8d2b2ae26a74b0fa89559ef96caf5a6--29c601b2467b4d0ca6ddc3e667c81203 17d2950f8594454cb985aba75e3cdcba 29c601b2467b4d0ca6ddc3e667c81203--17d2950f8594454cb985aba75e3cdcba daa983cf56174ec6bd514024756ef043 17d2950f8594454cb985aba75e3cdcba--daa983cf56174ec6bd514024756ef043 6e2f9479bf434e86869bc0dc51e724c2 daa983cf56174ec6bd514024756ef043--6e2f9479bf434e86869bc0dc51e724c2 f2b57d60e2a24efaaa7aeb5dea76ff85 6e2f9479bf434e86869bc0dc51e724c2--f2b57d60e2a24efaaa7aeb5dea76ff85 e4bde5c4461f42ffbab59147fde806c2 f2b57d60e2a24efaaa7aeb5dea76ff85--e4bde5c4461f42ffbab59147fde806c2 11930b48f19445adb863dfded3e428c3 e4bde5c4461f42ffbab59147fde806c2--11930b48f19445adb863dfded3e428c3 ba0785fae75a4c3a89f4e14ebdf73669 11930b48f19445adb863dfded3e428c3--ba0785fae75a4c3a89f4e14ebdf73669 e5ea6c74ad4a48d29c0636f02922573a ba0785fae75a4c3a89f4e14ebdf73669--e5ea6c74ad4a48d29c0636f02922573a 26f883cc54fc4cb9b07c0a3c0e9bd448 e5ea6c74ad4a48d29c0636f02922573a--26f883cc54fc4cb9b07c0a3c0e9bd448 14e463eeda254c97b69141a0cf15c1c9 X 26f883cc54fc4cb9b07c0a3c0e9bd448--14e463eeda254c97b69141a0cf15c1c9 14e463eeda254c97b69141a0cf15c1c9--b5f38e56811445538af7450225e248d9 9e64067b8f5744cc86143a2ec1e8425c 14e463eeda254c97b69141a0cf15c1c9--9e64067b8f5744cc86143a2ec1e8425c 9b0f9fcebc2c4791b2f66bc4a1938740 9e64067b8f5744cc86143a2ec1e8425c--9b0f9fcebc2c4791b2f66bc4a1938740 b903c6d179a54146ae95dc947ca679ed 9b0f9fcebc2c4791b2f66bc4a1938740--b903c6d179a54146ae95dc947ca679ed fade4fb0277f43cba044720a382cb34e X b903c6d179a54146ae95dc947ca679ed--fade4fb0277f43cba044720a382cb34e fade4fb0277f43cba044720a382cb34e--3550c9fdda26471f84762cab142dff4f 5bdfd24558e14c549e0774f281bc13bd fade4fb0277f43cba044720a382cb34e--5bdfd24558e14c549e0774f281bc13bd 39503d43133f4e45bf44a74cc8c54dfb 5bdfd24558e14c549e0774f281bc13bd--39503d43133f4e45bf44a74cc8c54dfb e0744e0034f043b7bbb2c0bc3ecb8506 39503d43133f4e45bf44a74cc8c54dfb--e0744e0034f043b7bbb2c0bc3ecb8506 d9b296810eb7498db1d6ff137848673d e0744e0034f043b7bbb2c0bc3ecb8506--d9b296810eb7498db1d6ff137848673d 5994264818da42f78a1d7649618d80fd d9b296810eb7498db1d6ff137848673d--5994264818da42f78a1d7649618d80fd 60c4773adfa043dea8605cd9d25306ea 5994264818da42f78a1d7649618d80fd--60c4773adfa043dea8605cd9d25306ea db5ae3272f724a3a898c0fe8a0aee939 X 60c4773adfa043dea8605cd9d25306ea--db5ae3272f724a3a898c0fe8a0aee939 db5ae3272f724a3a898c0fe8a0aee939--84d550c819cc4e0c9710ee465a47fb7c e5813b6de8374c37a10545fa147a3f35 db5ae3272f724a3a898c0fe8a0aee939--e5813b6de8374c37a10545fa147a3f35 4ac15903983f45b69ec4c2d2187e244f e5813b6de8374c37a10545fa147a3f35--4ac15903983f45b69ec4c2d2187e244f 822e0a57051340678998f20c832addc1 4ac15903983f45b69ec4c2d2187e244f--822e0a57051340678998f20c832addc1 9d4b336ac7c0492f8bcde80023a6fd59 822e0a57051340678998f20c832addc1--9d4b336ac7c0492f8bcde80023a6fd59 9d4f081634624701a282a915894f95e3 9d4b336ac7c0492f8bcde80023a6fd59--9d4f081634624701a282a915894f95e3 e83f208d9ab3499e91a6ecb69a5ef0ea X 9d4f081634624701a282a915894f95e3--e83f208d9ab3499e91a6ecb69a5ef0ea e83f208d9ab3499e91a6ecb69a5ef0ea--fd172d2a73b244038cf584a1d6575c11 275a8c000e0b417f97ff3afb31b8a1e2 e83f208d9ab3499e91a6ecb69a5ef0ea--275a8c000e0b417f97ff3afb31b8a1e2 29a57e3d0a3546c4b4dd7f4268c24b3a 275a8c000e0b417f97ff3afb31b8a1e2--29a57e3d0a3546c4b4dd7f4268c24b3a 5d55c578a44e4ef29a8d3d4d0404c8ad 29a57e3d0a3546c4b4dd7f4268c24b3a--5d55c578a44e4ef29a8d3d4d0404c8ad 2f6bd213a1e2438384ef716d1d131526 5d55c578a44e4ef29a8d3d4d0404c8ad--2f6bd213a1e2438384ef716d1d131526 35a98680959444fab646cc58b7ef443a 2f6bd213a1e2438384ef716d1d131526--35a98680959444fab646cc58b7ef443a 296ab86a3ebc4e829716443b2a397bdb 35a98680959444fab646cc58b7ef443a--296ab86a3ebc4e829716443b2a397bdb bc0f11ca51034b8a84f784ea3b33a2dd X 296ab86a3ebc4e829716443b2a397bdb--bc0f11ca51034b8a84f784ea3b33a2dd bc0f11ca51034b8a84f784ea3b33a2dd--cd7bbd0898374cee925a098932b1ea6e 15232cfde05f460ebb474e5584912bdb bc0f11ca51034b8a84f784ea3b33a2dd--15232cfde05f460ebb474e5584912bdb d523eba315ea48eaab28bbb23b6a003d 15232cfde05f460ebb474e5584912bdb--d523eba315ea48eaab28bbb23b6a003d 345fff759701428981a821d901662f8d d523eba315ea48eaab28bbb23b6a003d--345fff759701428981a821d901662f8d b103b49334974b8c9badd76c9d67e930 345fff759701428981a821d901662f8d--b103b49334974b8c9badd76c9d67e930 1db31f1c27d045b69a99c4f23c759029 b103b49334974b8c9badd76c9d67e930--1db31f1c27d045b69a99c4f23c759029 f2dbfbaa5070461287f0e822d9e6243d 1db31f1c27d045b69a99c4f23c759029--f2dbfbaa5070461287f0e822d9e6243d 365f77da531c4c448489b984eca5a019 f2dbfbaa5070461287f0e822d9e6243d--365f77da531c4c448489b984eca5a019 f5489ef5adf04485a531a78b1eb24af1 X 365f77da531c4c448489b984eca5a019--f5489ef5adf04485a531a78b1eb24af1 f5489ef5adf04485a531a78b1eb24af1--906f347fdd5c4715a023de4465a3fbe8 bd837a3ddf5348ad97530dc59d91dc81 f5489ef5adf04485a531a78b1eb24af1--bd837a3ddf5348ad97530dc59d91dc81 4274073e26834086914f7db24f6b64e7 bd837a3ddf5348ad97530dc59d91dc81--4274073e26834086914f7db24f6b64e7 c7273b70227942d4b49684af36d72a60 4274073e26834086914f7db24f6b64e7--c7273b70227942d4b49684af36d72a60 27e2664c3c0441a081cd350284f66cfa c7273b70227942d4b49684af36d72a60--27e2664c3c0441a081cd350284f66cfa 162846d90449479a8b854c8678724cdf 27e2664c3c0441a081cd350284f66cfa--162846d90449479a8b854c8678724cdf 9401048a897948d288844f54392edc8d 162846d90449479a8b854c8678724cdf--9401048a897948d288844f54392edc8d f5b71db4a2f44108a44827b32787d48b 9401048a897948d288844f54392edc8d--f5b71db4a2f44108a44827b32787d48b 3d1dae3186014188babe4c5f6d3caa76 f5b71db4a2f44108a44827b32787d48b--3d1dae3186014188babe4c5f6d3caa76 6705ba93645b48ae8a47525bf97f030d 3d1dae3186014188babe4c5f6d3caa76--6705ba93645b48ae8a47525bf97f030d 14dfabd6189e40d598c08b2915f81b99 6705ba93645b48ae8a47525bf97f030d--14dfabd6189e40d598c08b2915f81b99 589ee378afa448a7aa5423a59532ce63 X 14dfabd6189e40d598c08b2915f81b99--589ee378afa448a7aa5423a59532ce63 589ee378afa448a7aa5423a59532ce63--9dbaa808439341198401bd726e773331 8bd7b9d9fa7349c6856d570ccc25858b 589ee378afa448a7aa5423a59532ce63--8bd7b9d9fa7349c6856d570ccc25858b 71acacbf69374ffa94b4a0d2e9727527 8bd7b9d9fa7349c6856d570ccc25858b--71acacbf69374ffa94b4a0d2e9727527 808cbfc8dc6d4aad8c2ba437a4afb80d 71acacbf69374ffa94b4a0d2e9727527--808cbfc8dc6d4aad8c2ba437a4afb80d 053858aeffc14135afdb67947919f9e8 808cbfc8dc6d4aad8c2ba437a4afb80d--053858aeffc14135afdb67947919f9e8 d092a1142da848d8920437cb910ca4aa 053858aeffc14135afdb67947919f9e8--d092a1142da848d8920437cb910ca4aa 8ea0493c05c34b1fa31cc2687fc38299 X d092a1142da848d8920437cb910ca4aa--8ea0493c05c34b1fa31cc2687fc38299 8ea0493c05c34b1fa31cc2687fc38299--fa4191c6c7474d1d8d84196e1c767ea3 dbba7cf5d0da49dc929eacc5fda1d47e 8ea0493c05c34b1fa31cc2687fc38299--dbba7cf5d0da49dc929eacc5fda1d47e 383b3c61642f4e979c0e1bfd576981be dbba7cf5d0da49dc929eacc5fda1d47e--383b3c61642f4e979c0e1bfd576981be 82d353e235e14e88b4ca5ef52f527633 383b3c61642f4e979c0e1bfd576981be--82d353e235e14e88b4ca5ef52f527633 96f69e4166d9403e8b41371b89c48434 X 82d353e235e14e88b4ca5ef52f527633--96f69e4166d9403e8b41371b89c48434 96f69e4166d9403e8b41371b89c48434--f5faa897a37f48b0beb8c828d7c644e7 b98ae8128efe46f4a7b4af74aa7d023b 96f69e4166d9403e8b41371b89c48434--b98ae8128efe46f4a7b4af74aa7d023b b554736a94a443059e0a11ec08860530 b98ae8128efe46f4a7b4af74aa7d023b--b554736a94a443059e0a11ec08860530 4397b4d238a64bbda4ccbcf485aba108 b554736a94a443059e0a11ec08860530--4397b4d238a64bbda4ccbcf485aba108 66d234d243fd489984b4a796f274d80e X 4397b4d238a64bbda4ccbcf485aba108--66d234d243fd489984b4a796f274d80e 66d234d243fd489984b4a796f274d80e--513640282fe14fdf9499a24bb3d89cf1 957546496de84452bfdfc79495b06e63 66d234d243fd489984b4a796f274d80e--957546496de84452bfdfc79495b06e63 941d4e55a32246188e4884a4bf01988a 957546496de84452bfdfc79495b06e63--941d4e55a32246188e4884a4bf01988a d79bbe0b48e445008d2e8c68292b64d5 X 941d4e55a32246188e4884a4bf01988a--d79bbe0b48e445008d2e8c68292b64d5 d79bbe0b48e445008d2e8c68292b64d5--19c77660f07b4e3896abd35b787c7190 b226ed716cfc4549a6f2bfe8c98ac76b d79bbe0b48e445008d2e8c68292b64d5--b226ed716cfc4549a6f2bfe8c98ac76b 422a6cf2fbca41e3951bf2f38b34460c b226ed716cfc4549a6f2bfe8c98ac76b--422a6cf2fbca41e3951bf2f38b34460c eda1b49660c54d43b7c93df4e5f7b5d2 422a6cf2fbca41e3951bf2f38b34460c--eda1b49660c54d43b7c93df4e5f7b5d2 7282f63ba8394c7ab7297e6f2ba210f1 eda1b49660c54d43b7c93df4e5f7b5d2--7282f63ba8394c7ab7297e6f2ba210f1 eceaa8068ea34a1f989b4ec82f1289b8 7282f63ba8394c7ab7297e6f2ba210f1--eceaa8068ea34a1f989b4ec82f1289b8 0d3061b324e44e56a5ca4820eeb106c9 X eceaa8068ea34a1f989b4ec82f1289b8--0d3061b324e44e56a5ca4820eeb106c9 0d3061b324e44e56a5ca4820eeb106c9--d25b6519d24543b98babaf1012c8493a d116fbcd23bc42d38123b8bb748f71a9 0d3061b324e44e56a5ca4820eeb106c9--d116fbcd23bc42d38123b8bb748f71a9 723c5454370f45f8a5c0f3e5eb64fc48 d116fbcd23bc42d38123b8bb748f71a9--723c5454370f45f8a5c0f3e5eb64fc48 0179046ade034343b2d9e65f210b8b71 X 723c5454370f45f8a5c0f3e5eb64fc48--0179046ade034343b2d9e65f210b8b71 0179046ade034343b2d9e65f210b8b71--96bae515723e4fb8afa7e5e51eb7dff0 3d212e8242b34203af0aa71ee1f1293d 0179046ade034343b2d9e65f210b8b71--3d212e8242b34203af0aa71ee1f1293d 053ba8704d514b19a81b7f12b172cc91 3d212e8242b34203af0aa71ee1f1293d--053ba8704d514b19a81b7f12b172cc91 572cd7fed53d4170bde75cd208439c34 053ba8704d514b19a81b7f12b172cc91--572cd7fed53d4170bde75cd208439c34 02c5c0c341dd42098194a2643ff8d856 572cd7fed53d4170bde75cd208439c34--02c5c0c341dd42098194a2643ff8d856 19f11dcf428c403292326e846086db9f 02c5c0c341dd42098194a2643ff8d856--19f11dcf428c403292326e846086db9f eca79cb3d6294d84a46697d93dea34d7 19f11dcf428c403292326e846086db9f--eca79cb3d6294d84a46697d93dea34d7 dcc5d3f9289b42c8825c499d458b25b7 eca79cb3d6294d84a46697d93dea34d7--dcc5d3f9289b42c8825c499d458b25b7 db8ab56d5d434c0694e52ed7b4c8d38e X dcc5d3f9289b42c8825c499d458b25b7--db8ab56d5d434c0694e52ed7b4c8d38e db8ab56d5d434c0694e52ed7b4c8d38e--d88e34ad3667456ea5d2af18bd48e621 6fbeb8978d8449e8a9f28c9a7f520330 db8ab56d5d434c0694e52ed7b4c8d38e--6fbeb8978d8449e8a9f28c9a7f520330 ebad7b8df2ba4ae7a304acc9ee0a642b X 6fbeb8978d8449e8a9f28c9a7f520330--ebad7b8df2ba4ae7a304acc9ee0a642b ebad7b8df2ba4ae7a304acc9ee0a642b--973e11bf462d404db1dfb2512ae9689f 41da3d5097334a989b519e7077f0f1f0 RZ(-1.0*g0) ebad7b8df2ba4ae7a304acc9ee0a642b--41da3d5097334a989b519e7077f0f1f0 f36d5f3b9823412f94cad54a97a35902 X 41da3d5097334a989b519e7077f0f1f0--f36d5f3b9823412f94cad54a97a35902 f36d5f3b9823412f94cad54a97a35902--5fe80e2a16ac4ed7a7067fa569a66051 9a9c14a399c844f2ae77d97a390defa1 X f36d5f3b9823412f94cad54a97a35902--9a9c14a399c844f2ae77d97a390defa1 9a9c14a399c844f2ae77d97a390defa1--29a14f18f67940da98c3930efcc1b6b0 9b1e41bb26a147fea59dbc5245cb091a 9a9c14a399c844f2ae77d97a390defa1--9b1e41bb26a147fea59dbc5245cb091a ad0c156b29704022a42fd86726ca2f83 9b1e41bb26a147fea59dbc5245cb091a--ad0c156b29704022a42fd86726ca2f83 d45e4a6085ee40059b278fc720d4f4a7 ad0c156b29704022a42fd86726ca2f83--d45e4a6085ee40059b278fc720d4f4a7 fe253d71c21240cb86c086e4a54caa87 X d45e4a6085ee40059b278fc720d4f4a7--fe253d71c21240cb86c086e4a54caa87 fe253d71c21240cb86c086e4a54caa87--dd4f5ab1cbea476183a2ecc9c8819403 4f5d0e13ddcd4eaca770c910136513c3 X fe253d71c21240cb86c086e4a54caa87--4f5d0e13ddcd4eaca770c910136513c3 4f5d0e13ddcd4eaca770c910136513c3--20360812d3634506b260c9d9efc96c00 e319ed85a39245f5b8ff43d19e96e2b5 4f5d0e13ddcd4eaca770c910136513c3--e319ed85a39245f5b8ff43d19e96e2b5 64af78482c4a4b70b65e050490951e6d e319ed85a39245f5b8ff43d19e96e2b5--64af78482c4a4b70b65e050490951e6d 44b0d34e34684fbba810db8f48008d49 64af78482c4a4b70b65e050490951e6d--44b0d34e34684fbba810db8f48008d49 86e437283b7c4dabb72fcc4cd34193ee 44b0d34e34684fbba810db8f48008d49--86e437283b7c4dabb72fcc4cd34193ee 77c5280287de4a17b0b894158ee1425d 86e437283b7c4dabb72fcc4cd34193ee--77c5280287de4a17b0b894158ee1425d 157f68f76aed46dc90c4a20ed9922a20 X 77c5280287de4a17b0b894158ee1425d--157f68f76aed46dc90c4a20ed9922a20 157f68f76aed46dc90c4a20ed9922a20--d0befaa9d63e42419b11c6885e9a3f58 da47b85744fd43eb87ef28cbf68cb4c0 157f68f76aed46dc90c4a20ed9922a20--da47b85744fd43eb87ef28cbf68cb4c0 ded1ce4a2dbf4d2dbfbd707af28dd7ef da47b85744fd43eb87ef28cbf68cb4c0--ded1ce4a2dbf4d2dbfbd707af28dd7ef f7d293e8055e4991a650adcd4857bc93 ded1ce4a2dbf4d2dbfbd707af28dd7ef--f7d293e8055e4991a650adcd4857bc93 584dd8c6d5ae479192009a31581f1908 f7d293e8055e4991a650adcd4857bc93--584dd8c6d5ae479192009a31581f1908 d7ac7e9a26934547abcb6f5e53534529 584dd8c6d5ae479192009a31581f1908--d7ac7e9a26934547abcb6f5e53534529 7d8da9d738f6402aba4899b1f1a98550 d7ac7e9a26934547abcb6f5e53534529--7d8da9d738f6402aba4899b1f1a98550 8493e5d363234e9a87e685d84f6ec416 7d8da9d738f6402aba4899b1f1a98550--8493e5d363234e9a87e685d84f6ec416 44c6bdb4c43944488b7b1bd6b89a9376 8493e5d363234e9a87e685d84f6ec416--44c6bdb4c43944488b7b1bd6b89a9376 82dc1bb9310a45e5ab710dde093911a2 44c6bdb4c43944488b7b1bd6b89a9376--82dc1bb9310a45e5ab710dde093911a2 d979ebdf00194fb5989d22f682e77a62 82dc1bb9310a45e5ab710dde093911a2--d979ebdf00194fb5989d22f682e77a62 7efa497d15df4fe8af7ebd46eb580e2a d979ebdf00194fb5989d22f682e77a62--7efa497d15df4fe8af7ebd46eb580e2a 6f8837045ce74eeda775dfd9c6a00264 7efa497d15df4fe8af7ebd46eb580e2a--6f8837045ce74eeda775dfd9c6a00264 a5bcc461d09f44c886639b1df713c4bd 6f8837045ce74eeda775dfd9c6a00264--a5bcc461d09f44c886639b1df713c4bd 35de09a4b60942b8b453e550fc5fd76b RX(b04) a5bcc461d09f44c886639b1df713c4bd--35de09a4b60942b8b453e550fc5fd76b f997883a44a84ee88fae7d5cd98041c5 35de09a4b60942b8b453e550fc5fd76b--f997883a44a84ee88fae7d5cd98041c5 1c27848e0f27478fbda73352113cd55a f997883a44a84ee88fae7d5cd98041c5--1c27848e0f27478fbda73352113cd55a e1a9ca36b3694415a98f5addc1bad526 1c27848e0f27478fbda73352113cd55a--e1a9ca36b3694415a98f5addc1bad526 2240f38a995549d684ec450318d9d08e X e1a9ca36b3694415a98f5addc1bad526--2240f38a995549d684ec450318d9d08e 2240f38a995549d684ec450318d9d08e--1da38fd6750b4fbb8f76a8c25ddb63d7 1ae64be25c1447ddb5049ad83de50126 2240f38a995549d684ec450318d9d08e--1ae64be25c1447ddb5049ad83de50126 3df5d92844c143d79cde062595dc1d68 1ae64be25c1447ddb5049ad83de50126--3df5d92844c143d79cde062595dc1d68 823e7ca49f944eb7bd0cb1fa4b399bb8 3df5d92844c143d79cde062595dc1d68--823e7ca49f944eb7bd0cb1fa4b399bb8 fc3b4ee1aa3f4939a18dd05af151ba86 823e7ca49f944eb7bd0cb1fa4b399bb8--fc3b4ee1aa3f4939a18dd05af151ba86 44a718a966e24aa6a50552979cd249c7 fc3b4ee1aa3f4939a18dd05af151ba86--44a718a966e24aa6a50552979cd249c7 2f498569be3f4e459c1c45cfcc3e5b15 44a718a966e24aa6a50552979cd249c7--2f498569be3f4e459c1c45cfcc3e5b15 de225a38e51145a5a7b645ea042d897f 2f498569be3f4e459c1c45cfcc3e5b15--de225a38e51145a5a7b645ea042d897f 15819208c5c04272a09f443018ad8bc9 X de225a38e51145a5a7b645ea042d897f--15819208c5c04272a09f443018ad8bc9 15819208c5c04272a09f443018ad8bc9--c2caf37268164c5880e594f62148c689 69fa96b66de147ceb7432982713cdc24 15819208c5c04272a09f443018ad8bc9--69fa96b66de147ceb7432982713cdc24 84168c7422c94b9692174acbdaa0efe6 69fa96b66de147ceb7432982713cdc24--84168c7422c94b9692174acbdaa0efe6 535c4c708575408e80e9759a5c58f85b 84168c7422c94b9692174acbdaa0efe6--535c4c708575408e80e9759a5c58f85b 26fb7b37a7fd401bba65bda9515d4743 535c4c708575408e80e9759a5c58f85b--26fb7b37a7fd401bba65bda9515d4743 97d8f683b8214776b604c4a15fa4780a 26fb7b37a7fd401bba65bda9515d4743--97d8f683b8214776b604c4a15fa4780a 9b638e4d1d064f5684ebc27a3a2b97be 97d8f683b8214776b604c4a15fa4780a--9b638e4d1d064f5684ebc27a3a2b97be 8ffd80c607e54cf0ad0e0b3b89cef2fe 9b638e4d1d064f5684ebc27a3a2b97be--8ffd80c607e54cf0ad0e0b3b89cef2fe b4d63d2746e549c19ddab8f2b86c7e9d 8ffd80c607e54cf0ad0e0b3b89cef2fe--b4d63d2746e549c19ddab8f2b86c7e9d 38a02ef4adfe4194be1a8f3e79e47df0 b4d63d2746e549c19ddab8f2b86c7e9d--38a02ef4adfe4194be1a8f3e79e47df0 3853a54c12f145efb07bc22ec16066ee 38a02ef4adfe4194be1a8f3e79e47df0--3853a54c12f145efb07bc22ec16066ee 1f99c1e1802a49b48a0427098dbe08dd 3853a54c12f145efb07bc22ec16066ee--1f99c1e1802a49b48a0427098dbe08dd 6155234556a74feea566dad715bb872a 1f99c1e1802a49b48a0427098dbe08dd--6155234556a74feea566dad715bb872a 0e30ac28692448b3bdfe53d0ede328f1 6155234556a74feea566dad715bb872a--0e30ac28692448b3bdfe53d0ede328f1 eaba8daac642487eac32743f6b4ef1db 0e30ac28692448b3bdfe53d0ede328f1--eaba8daac642487eac32743f6b4ef1db c1272136bf1a43b694acb90156176e31 eaba8daac642487eac32743f6b4ef1db--c1272136bf1a43b694acb90156176e31 09b1a24e6fd24cb9b7a53cbd2e5c606b c1272136bf1a43b694acb90156176e31--09b1a24e6fd24cb9b7a53cbd2e5c606b 5a67d32147674f1182a3e6a4c517fb05 09b1a24e6fd24cb9b7a53cbd2e5c606b--5a67d32147674f1182a3e6a4c517fb05 8556c372bd1644878ec25236f541371b 5a67d32147674f1182a3e6a4c517fb05--8556c372bd1644878ec25236f541371b b3e9c98e75d64b86ad9474a353c53f74 X 8556c372bd1644878ec25236f541371b--b3e9c98e75d64b86ad9474a353c53f74 b3e9c98e75d64b86ad9474a353c53f74--293894bcc08c4109b1eef59e85e137f0 b87a3bbaa2164007925759ed41228817 b3e9c98e75d64b86ad9474a353c53f74--b87a3bbaa2164007925759ed41228817 9bb151e2ebfa47d8bb62d9e95f2f2727 b87a3bbaa2164007925759ed41228817--9bb151e2ebfa47d8bb62d9e95f2f2727 076ebae25f094b81b447ccf0e5204c78 9bb151e2ebfa47d8bb62d9e95f2f2727--076ebae25f094b81b447ccf0e5204c78 66166d4406f14ac68550a7cdf8cb2f25 X 076ebae25f094b81b447ccf0e5204c78--66166d4406f14ac68550a7cdf8cb2f25 66166d4406f14ac68550a7cdf8cb2f25--d454af361c6f415293a199dd9a308b8d fd305dac6e1049868c8dcb915e22b425 66166d4406f14ac68550a7cdf8cb2f25--fd305dac6e1049868c8dcb915e22b425 e9aff6d1d65848bfac4ff03de80c9434 fd305dac6e1049868c8dcb915e22b425--e9aff6d1d65848bfac4ff03de80c9434 e1486b2fe03e4f37ac2805142aeedf43 e9aff6d1d65848bfac4ff03de80c9434--e1486b2fe03e4f37ac2805142aeedf43 6f35efe4cda44680912f2e9c1795f993 e1486b2fe03e4f37ac2805142aeedf43--6f35efe4cda44680912f2e9c1795f993 cf8e12870a7a41738007c15e3d901a14 6f35efe4cda44680912f2e9c1795f993--cf8e12870a7a41738007c15e3d901a14 b0f14d91747b40b7982f9f111fd3fee1 cf8e12870a7a41738007c15e3d901a14--b0f14d91747b40b7982f9f111fd3fee1 f9745158fb5244ab8758ec02b8ba8792 X b0f14d91747b40b7982f9f111fd3fee1--f9745158fb5244ab8758ec02b8ba8792 f9745158fb5244ab8758ec02b8ba8792--4f4a344cda6a41b2aad0509985791551 4a33cea0640a4ec093a537434801b547 f9745158fb5244ab8758ec02b8ba8792--4a33cea0640a4ec093a537434801b547 380686cc50824fcf883c702c1cf13fbf 4a33cea0640a4ec093a537434801b547--380686cc50824fcf883c702c1cf13fbf 063185c4735f4c8facfae742170e9dd8 380686cc50824fcf883c702c1cf13fbf--063185c4735f4c8facfae742170e9dd8 13c34049c8444b638976053f1840c045 063185c4735f4c8facfae742170e9dd8--13c34049c8444b638976053f1840c045 9fff622ad547407298d773fb35d03bb5 13c34049c8444b638976053f1840c045--9fff622ad547407298d773fb35d03bb5 128741b8baae43f3a2f841927fc73712 X 9fff622ad547407298d773fb35d03bb5--128741b8baae43f3a2f841927fc73712 128741b8baae43f3a2f841927fc73712--9bfcdbaf847d4b069c4cd273d2ce5296 d91e992533f94ce98d7fa8fa1473d0b4 128741b8baae43f3a2f841927fc73712--d91e992533f94ce98d7fa8fa1473d0b4 9eef92fe36734d29a48db930bd851cd8 d91e992533f94ce98d7fa8fa1473d0b4--9eef92fe36734d29a48db930bd851cd8 2b2e313298764d749d7a3fd694cbd1e6 9eef92fe36734d29a48db930bd851cd8--2b2e313298764d749d7a3fd694cbd1e6 1e3ab983c9124c3385678210600d39ed 2b2e313298764d749d7a3fd694cbd1e6--1e3ab983c9124c3385678210600d39ed 99c0c0215134425d8142478b413dcbe4 1e3ab983c9124c3385678210600d39ed--99c0c0215134425d8142478b413dcbe4 091ab01663e94eac958c18f33b55f7cf 99c0c0215134425d8142478b413dcbe4--091ab01663e94eac958c18f33b55f7cf 9f388a7c2a0f4694bc22be376381085f X 091ab01663e94eac958c18f33b55f7cf--9f388a7c2a0f4694bc22be376381085f 9f388a7c2a0f4694bc22be376381085f--8cc7e68231c44b4cb8031ff427c33307 abefcb686c0443e9b19828ac1a9f0a4f 9f388a7c2a0f4694bc22be376381085f--abefcb686c0443e9b19828ac1a9f0a4f 710ba67f6be14819822c0b75822cd512 abefcb686c0443e9b19828ac1a9f0a4f--710ba67f6be14819822c0b75822cd512 ea6e27f667874ce9afade6bf3f20eebc 710ba67f6be14819822c0b75822cd512--ea6e27f667874ce9afade6bf3f20eebc 5004d084922d4db5bfe45ccc37759962 ea6e27f667874ce9afade6bf3f20eebc--5004d084922d4db5bfe45ccc37759962 60f3ef8fda734e52a8027093630f8dc5 5004d084922d4db5bfe45ccc37759962--60f3ef8fda734e52a8027093630f8dc5 5858cdae00324e02a991480c901ac0df 60f3ef8fda734e52a8027093630f8dc5--5858cdae00324e02a991480c901ac0df 5b008ffcea3d421ca5308be7eb680238 5858cdae00324e02a991480c901ac0df--5b008ffcea3d421ca5308be7eb680238 71f83c4ce34f47b6b0dd863e5656a4b5 X 5b008ffcea3d421ca5308be7eb680238--71f83c4ce34f47b6b0dd863e5656a4b5 71f83c4ce34f47b6b0dd863e5656a4b5--88dde5dce4244a4eab976b63c89d4614 ce8bc9dcfcde4764aec59d999f76e450 71f83c4ce34f47b6b0dd863e5656a4b5--ce8bc9dcfcde4764aec59d999f76e450 81d59e2e5a0e4fe4852fbe8a1e664fd2 ce8bc9dcfcde4764aec59d999f76e450--81d59e2e5a0e4fe4852fbe8a1e664fd2 979a6cb2e05541779fc07114e8eb3673 81d59e2e5a0e4fe4852fbe8a1e664fd2--979a6cb2e05541779fc07114e8eb3673 6e4f55888d554836bd2221a7d5976207 979a6cb2e05541779fc07114e8eb3673--6e4f55888d554836bd2221a7d5976207 2fa8aa80b3e84747adb6380e09b21819 6e4f55888d554836bd2221a7d5976207--2fa8aa80b3e84747adb6380e09b21819 fb321f7830cd4bf1af0d2b0d231b7f73 2fa8aa80b3e84747adb6380e09b21819--fb321f7830cd4bf1af0d2b0d231b7f73 23111e6329a94a5dbca528cca5c46151 fb321f7830cd4bf1af0d2b0d231b7f73--23111e6329a94a5dbca528cca5c46151 8ee639706481496ea9f209d3fd68c6d4 23111e6329a94a5dbca528cca5c46151--8ee639706481496ea9f209d3fd68c6d4 240eb7f9bd6945f28bfb238fd6981f12 8ee639706481496ea9f209d3fd68c6d4--240eb7f9bd6945f28bfb238fd6981f12 d388332f350d442396e5d04d13febcfc 240eb7f9bd6945f28bfb238fd6981f12--d388332f350d442396e5d04d13febcfc 0daee77a4f0b4ae7b9bc53328300684c X d388332f350d442396e5d04d13febcfc--0daee77a4f0b4ae7b9bc53328300684c 0daee77a4f0b4ae7b9bc53328300684c--38561354980e42c5b9276bd30aea537a b284d68873e34a6889be115a5847bf8a 0daee77a4f0b4ae7b9bc53328300684c--b284d68873e34a6889be115a5847bf8a 0c69b47195e24c339178aa724f1c3c08 b284d68873e34a6889be115a5847bf8a--0c69b47195e24c339178aa724f1c3c08 fa623256cda148cfb26b3106121e8f92 0c69b47195e24c339178aa724f1c3c08--fa623256cda148cfb26b3106121e8f92 bdccfccbb53c48ff9a13e1f99d4c784e fa623256cda148cfb26b3106121e8f92--bdccfccbb53c48ff9a13e1f99d4c784e 5a05a48dd16c4356854b16ca90fc6360 bdccfccbb53c48ff9a13e1f99d4c784e--5a05a48dd16c4356854b16ca90fc6360 6b59952e26f14528be326d16b9b34271 X 5a05a48dd16c4356854b16ca90fc6360--6b59952e26f14528be326d16b9b34271 6b59952e26f14528be326d16b9b34271--79bdf89b094b4dd887fd171d297f9c3a 7dfc87b0d05b4ef598f2d62d0b3cc3e5 6b59952e26f14528be326d16b9b34271--7dfc87b0d05b4ef598f2d62d0b3cc3e5 6cf6a13f812b44e8a7ac72df098f18c5 7dfc87b0d05b4ef598f2d62d0b3cc3e5--6cf6a13f812b44e8a7ac72df098f18c5 8c63325f9a54473a997cba15acd3edf9 6cf6a13f812b44e8a7ac72df098f18c5--8c63325f9a54473a997cba15acd3edf9 9f0813f666b041e8ab06ba788fddd7c9 X 8c63325f9a54473a997cba15acd3edf9--9f0813f666b041e8ab06ba788fddd7c9 9f0813f666b041e8ab06ba788fddd7c9--badbf23b91bd4d888c7ae23cff02120e 24d25d4ef53b497599d27d6f4f5ccc37 9f0813f666b041e8ab06ba788fddd7c9--24d25d4ef53b497599d27d6f4f5ccc37 12ad2fb9a9c8448eb97848b1f1982355 24d25d4ef53b497599d27d6f4f5ccc37--12ad2fb9a9c8448eb97848b1f1982355 bd644bad6c224e4ea994f5a457f3fdb5 12ad2fb9a9c8448eb97848b1f1982355--bd644bad6c224e4ea994f5a457f3fdb5 22761154e89a4c91bc6e0a2f42a92195 X bd644bad6c224e4ea994f5a457f3fdb5--22761154e89a4c91bc6e0a2f42a92195 22761154e89a4c91bc6e0a2f42a92195--4bb2f1ec097f4e2d87cc24282aeb9774 dd56b5475a2c4364b840f7fbfed11a1b 22761154e89a4c91bc6e0a2f42a92195--dd56b5475a2c4364b840f7fbfed11a1b d9104c0629d14cb8ae4bf00b31c93f20 dd56b5475a2c4364b840f7fbfed11a1b--d9104c0629d14cb8ae4bf00b31c93f20 53b0dace7d9f4ccc9cdb781892c4d00e X d9104c0629d14cb8ae4bf00b31c93f20--53b0dace7d9f4ccc9cdb781892c4d00e 53b0dace7d9f4ccc9cdb781892c4d00e--96ced1d4d05440d1b5722c00943112c5 be21f8a7455840d0b393c0d46e440365 53b0dace7d9f4ccc9cdb781892c4d00e--be21f8a7455840d0b393c0d46e440365 34787ad0e45b48f0aaeec0e0c177baf2 be21f8a7455840d0b393c0d46e440365--34787ad0e45b48f0aaeec0e0c177baf2 054273de4bb5443bbd5f59abcb18f525 34787ad0e45b48f0aaeec0e0c177baf2--054273de4bb5443bbd5f59abcb18f525 1de8e9bd5289477f9c0ec17b7e588494 054273de4bb5443bbd5f59abcb18f525--1de8e9bd5289477f9c0ec17b7e588494 a818d69df5774f72b2a8a1eb92f212f0 1de8e9bd5289477f9c0ec17b7e588494--a818d69df5774f72b2a8a1eb92f212f0 0c9b4bfa764844ee8667893af75aada1 X a818d69df5774f72b2a8a1eb92f212f0--0c9b4bfa764844ee8667893af75aada1 0c9b4bfa764844ee8667893af75aada1--86a0ab207f3c43f0b6531d742bcebf64 af8153a853c0467680418ab019279198 0c9b4bfa764844ee8667893af75aada1--af8153a853c0467680418ab019279198 ca46be43a1c64e708b12eb4c893c6399 af8153a853c0467680418ab019279198--ca46be43a1c64e708b12eb4c893c6399 65b040d09e7a439ca85aa80ad00efcd0 X ca46be43a1c64e708b12eb4c893c6399--65b040d09e7a439ca85aa80ad00efcd0 65b040d09e7a439ca85aa80ad00efcd0--a476161419584ad285b5d35679dd3ca8 0c1cd2277ac5443d939301855785d45f 65b040d09e7a439ca85aa80ad00efcd0--0c1cd2277ac5443d939301855785d45f 958f583f3a5044e881da585f02db95b0 0c1cd2277ac5443d939301855785d45f--958f583f3a5044e881da585f02db95b0 8e853628020543c0b12b6855f61f0efa 958f583f3a5044e881da585f02db95b0--8e853628020543c0b12b6855f61f0efa 7b512ef95daa4b8c98865c85bb1c7f5a 8e853628020543c0b12b6855f61f0efa--7b512ef95daa4b8c98865c85bb1c7f5a 4d578a77aa26441ea91be6e080f54574 7b512ef95daa4b8c98865c85bb1c7f5a--4d578a77aa26441ea91be6e080f54574 3b4518d957d6475585b33f31aaf201e5 4d578a77aa26441ea91be6e080f54574--3b4518d957d6475585b33f31aaf201e5 9ff57b8921db457eaca71ef41c79f794 3b4518d957d6475585b33f31aaf201e5--9ff57b8921db457eaca71ef41c79f794 815ef61756af480b9cd90ac2b5af9a60 X 9ff57b8921db457eaca71ef41c79f794--815ef61756af480b9cd90ac2b5af9a60 815ef61756af480b9cd90ac2b5af9a60--22efc098045a458e832a8b99390d4965 ebfa2584e21f4bc7a77d814f285811e4 815ef61756af480b9cd90ac2b5af9a60--ebfa2584e21f4bc7a77d814f285811e4 c33273fa10f4433ea5af666281a21e9f X ebfa2584e21f4bc7a77d814f285811e4--c33273fa10f4433ea5af666281a21e9f c33273fa10f4433ea5af666281a21e9f--15a3d498a19f40f9a613c242e69b097e 5f0c37b4c59e4257acd5a74a936f3ec3 RZ(-1.0*g1) c33273fa10f4433ea5af666281a21e9f--5f0c37b4c59e4257acd5a74a936f3ec3 cdbbc48f60154680b121b081b985f4fb X 5f0c37b4c59e4257acd5a74a936f3ec3--cdbbc48f60154680b121b081b985f4fb cdbbc48f60154680b121b081b985f4fb--fe2b82f999c3434787573d5f1b34eda3 83a46e59aed240eda87968bf37a3540a X cdbbc48f60154680b121b081b985f4fb--83a46e59aed240eda87968bf37a3540a 83a46e59aed240eda87968bf37a3540a--42d2db58970f49afb99ff403bec8ff76 c48b8c062ff341f18ef50443779f9b9f 83a46e59aed240eda87968bf37a3540a--c48b8c062ff341f18ef50443779f9b9f 7c3bec29746846eba87dc01b88434e63 c48b8c062ff341f18ef50443779f9b9f--7c3bec29746846eba87dc01b88434e63 f8036b71ccfb42e6a3e1a0549ecdb09a 7c3bec29746846eba87dc01b88434e63--f8036b71ccfb42e6a3e1a0549ecdb09a 5dc8d230fd854b5fabd705c078495728 X f8036b71ccfb42e6a3e1a0549ecdb09a--5dc8d230fd854b5fabd705c078495728 5dc8d230fd854b5fabd705c078495728--d790865b9c8f4ed584feede7a20bc70b 80fd1b8de04447efac08874963fcb76e X 5dc8d230fd854b5fabd705c078495728--80fd1b8de04447efac08874963fcb76e 80fd1b8de04447efac08874963fcb76e--5f28afad6e454876b31b1f9138752b47 44a507faf3c64ed295bf44c46facca64 80fd1b8de04447efac08874963fcb76e--44a507faf3c64ed295bf44c46facca64 fe8dc3982e1248eb80f60d3f10163763 44a507faf3c64ed295bf44c46facca64--fe8dc3982e1248eb80f60d3f10163763 f4bd8bbd55b94655a4655505127f5e3d fe8dc3982e1248eb80f60d3f10163763--f4bd8bbd55b94655a4655505127f5e3d 9ac35d11877242249fd0e3bd9b1287c1 f4bd8bbd55b94655a4655505127f5e3d--9ac35d11877242249fd0e3bd9b1287c1 b91a813e21d14a5d856f7df8edf66798 9ac35d11877242249fd0e3bd9b1287c1--b91a813e21d14a5d856f7df8edf66798 f793dd87b4f34e1da0dfd351d10e0d1a X b91a813e21d14a5d856f7df8edf66798--f793dd87b4f34e1da0dfd351d10e0d1a f793dd87b4f34e1da0dfd351d10e0d1a--0eb062144f94435e8664ca849606ed21 e179a4d92eb34bb0b6e72491c6fa4143 f793dd87b4f34e1da0dfd351d10e0d1a--e179a4d92eb34bb0b6e72491c6fa4143 08732e16b0894ef9be7ed1c33782b160 e179a4d92eb34bb0b6e72491c6fa4143--08732e16b0894ef9be7ed1c33782b160 4a11453460244e3bbe6be7ecadb508ff 08732e16b0894ef9be7ed1c33782b160--4a11453460244e3bbe6be7ecadb508ff e9a1ec3cc1f441f8a67f2b416a90b5d1 4a11453460244e3bbe6be7ecadb508ff--e9a1ec3cc1f441f8a67f2b416a90b5d1 93607f7871e24a6caa4e47641cf5696a e9a1ec3cc1f441f8a67f2b416a90b5d1--93607f7871e24a6caa4e47641cf5696a 27e34a9ef90341edafc2559c9b7a8ef8 93607f7871e24a6caa4e47641cf5696a--27e34a9ef90341edafc2559c9b7a8ef8 17c83ced39a74f078b99a7f7c83535fd 27e34a9ef90341edafc2559c9b7a8ef8--17c83ced39a74f078b99a7f7c83535fd 104e6f2b29944590b8c4d55d9ef8b544 17c83ced39a74f078b99a7f7c83535fd--104e6f2b29944590b8c4d55d9ef8b544 5a9b70a5e4244479adfaf4e1544d814f 104e6f2b29944590b8c4d55d9ef8b544--5a9b70a5e4244479adfaf4e1544d814f fbecbae86f2e48e99fcff96c4f4f35da 5a9b70a5e4244479adfaf4e1544d814f--fbecbae86f2e48e99fcff96c4f4f35da 32d90e124e704dee943dbd0111d1770a fbecbae86f2e48e99fcff96c4f4f35da--32d90e124e704dee943dbd0111d1770a 31696ce472ed4f19b4fd81ac6762d54c 32d90e124e704dee943dbd0111d1770a--31696ce472ed4f19b4fd81ac6762d54c b7734c980a594b4e918660f618014781 31696ce472ed4f19b4fd81ac6762d54c--b7734c980a594b4e918660f618014781 61d82e000ede4198b05eccdb11e897d9 RX(b14) b7734c980a594b4e918660f618014781--61d82e000ede4198b05eccdb11e897d9 61d82e000ede4198b05eccdb11e897d9--f08e023a21524a6a833053d4bbe1d77c 4dba3979d19741c1a72ad4fe2096e23c 9da0d44532044214bd4f73f000c922f1 7eeef696fbc84ce78cabc3ce763a087a--9da0d44532044214bd4f73f000c922f1 b7a12f85467649199053ed039a694281 6 94ca864972a7411ca9ce647d1522eeac 9da0d44532044214bd4f73f000c922f1--94ca864972a7411ca9ce647d1522eeac 8c9ebb02920c4c4b9cc9dbdc5cb15476 94ca864972a7411ca9ce647d1522eeac--8c9ebb02920c4c4b9cc9dbdc5cb15476 6dd56fa234354f82ab9c53ee6fc90493 8c9ebb02920c4c4b9cc9dbdc5cb15476--6dd56fa234354f82ab9c53ee6fc90493 3949d35a019644e1afded4d73e88dd84 X 6dd56fa234354f82ab9c53ee6fc90493--3949d35a019644e1afded4d73e88dd84 3949d35a019644e1afded4d73e88dd84--df6cdbd7be9349ae92627865fc246bf9 da2a6d90b5b94e00841ff98d9d948e0e 3949d35a019644e1afded4d73e88dd84--da2a6d90b5b94e00841ff98d9d948e0e 6056b22f9eec47b996f4bfcab58c308e da2a6d90b5b94e00841ff98d9d948e0e--6056b22f9eec47b996f4bfcab58c308e 2b45417e49ca4ea78d846cd6e5329748 6056b22f9eec47b996f4bfcab58c308e--2b45417e49ca4ea78d846cd6e5329748 c6adb52151ef42a286e7bd5df1b21a6b 2b45417e49ca4ea78d846cd6e5329748--c6adb52151ef42a286e7bd5df1b21a6b 8af5d9c0ab9f4b13a52bb77d30e98db0 c6adb52151ef42a286e7bd5df1b21a6b--8af5d9c0ab9f4b13a52bb77d30e98db0 92bed308ae6146ddbd89a1d981df6d74 X 8af5d9c0ab9f4b13a52bb77d30e98db0--92bed308ae6146ddbd89a1d981df6d74 92bed308ae6146ddbd89a1d981df6d74--ce6e608287a14ed1812bfaca77106a06 81e3700a717344c2a932f4cd7555fe41 92bed308ae6146ddbd89a1d981df6d74--81e3700a717344c2a932f4cd7555fe41 9a7391b06e96407b843ca541af5a5712 81e3700a717344c2a932f4cd7555fe41--9a7391b06e96407b843ca541af5a5712 82dce7370185484b8632f957ee7b630d 9a7391b06e96407b843ca541af5a5712--82dce7370185484b8632f957ee7b630d 8e7a9924f762483baf08d40dc6b0c12a 82dce7370185484b8632f957ee7b630d--8e7a9924f762483baf08d40dc6b0c12a 8760f4b8e9e44e428240bc8b479d788c 8e7a9924f762483baf08d40dc6b0c12a--8760f4b8e9e44e428240bc8b479d788c d772834a8e1643e9a8b4afce4f925404 8760f4b8e9e44e428240bc8b479d788c--d772834a8e1643e9a8b4afce4f925404 7c3f2ae6ff1243f09349ed71556598f0 d772834a8e1643e9a8b4afce4f925404--7c3f2ae6ff1243f09349ed71556598f0 6d1b5bd3fb7742bca464b7cc5db01242 7c3f2ae6ff1243f09349ed71556598f0--6d1b5bd3fb7742bca464b7cc5db01242 6c54c07937fa4226a738662b084b5fd8 6d1b5bd3fb7742bca464b7cc5db01242--6c54c07937fa4226a738662b084b5fd8 82bdaf371540410097aad13117a17a2e 6c54c07937fa4226a738662b084b5fd8--82bdaf371540410097aad13117a17a2e 2608e50c691642359d254ac8ba4deb38 82bdaf371540410097aad13117a17a2e--2608e50c691642359d254ac8ba4deb38 ff908b19b11549d89b9b40c38229f1f6 2608e50c691642359d254ac8ba4deb38--ff908b19b11549d89b9b40c38229f1f6 8420716a846541ecad43776d7998128e ff908b19b11549d89b9b40c38229f1f6--8420716a846541ecad43776d7998128e 51502d01c4754e859de789b8b424f92f 8420716a846541ecad43776d7998128e--51502d01c4754e859de789b8b424f92f 2fc8bde88fee412a89a04c85ba920c35 51502d01c4754e859de789b8b424f92f--2fc8bde88fee412a89a04c85ba920c35 60bb3509aeb7484699035101d5c13831 2fc8bde88fee412a89a04c85ba920c35--60bb3509aeb7484699035101d5c13831 fc0d10d13756454d9267187d24d5738a 60bb3509aeb7484699035101d5c13831--fc0d10d13756454d9267187d24d5738a 3e81ee2015754d87b559af200ddfd34e fc0d10d13756454d9267187d24d5738a--3e81ee2015754d87b559af200ddfd34e 9f5a1dfc01ab4c26b29ebbb6fd30f125 3e81ee2015754d87b559af200ddfd34e--9f5a1dfc01ab4c26b29ebbb6fd30f125 71d24b14e9ce4708b084a5f5d825c0ae 9f5a1dfc01ab4c26b29ebbb6fd30f125--71d24b14e9ce4708b084a5f5d825c0ae 295bcf93e59c43188ce4f2ff79ed5bbb X 71d24b14e9ce4708b084a5f5d825c0ae--295bcf93e59c43188ce4f2ff79ed5bbb 295bcf93e59c43188ce4f2ff79ed5bbb--9e64067b8f5744cc86143a2ec1e8425c d39796c7ba8e4c2096033e3ebe0f591b RZ(-1.0*g0) 295bcf93e59c43188ce4f2ff79ed5bbb--d39796c7ba8e4c2096033e3ebe0f591b a61324bd40284e0181e2012035193271 X d39796c7ba8e4c2096033e3ebe0f591b--a61324bd40284e0181e2012035193271 a61324bd40284e0181e2012035193271--b903c6d179a54146ae95dc947ca679ed 8f39add312154896b474e2facb6a612a a61324bd40284e0181e2012035193271--8f39add312154896b474e2facb6a612a 3034cc4c25534814804a3f4fbfc67242 8f39add312154896b474e2facb6a612a--3034cc4c25534814804a3f4fbfc67242 b97653bb8bb84d4f8dd45ddab4f05a36 3034cc4c25534814804a3f4fbfc67242--b97653bb8bb84d4f8dd45ddab4f05a36 5c4253a0cb9542009dd52b5b0a91c108 b97653bb8bb84d4f8dd45ddab4f05a36--5c4253a0cb9542009dd52b5b0a91c108 3b54a958b38b4aaba44bad4410b526a4 5c4253a0cb9542009dd52b5b0a91c108--3b54a958b38b4aaba44bad4410b526a4 4b97cf32c4c740e8a8b2fb0e6bdccc70 3b54a958b38b4aaba44bad4410b526a4--4b97cf32c4c740e8a8b2fb0e6bdccc70 8783e2035033481ca1ced16ab60c26a3 4b97cf32c4c740e8a8b2fb0e6bdccc70--8783e2035033481ca1ced16ab60c26a3 be77a01f4d0a4b68a22713f654844966 8783e2035033481ca1ced16ab60c26a3--be77a01f4d0a4b68a22713f654844966 5b86bcb979d94ff7adc2a849c08009b3 X be77a01f4d0a4b68a22713f654844966--5b86bcb979d94ff7adc2a849c08009b3 5b86bcb979d94ff7adc2a849c08009b3--e5813b6de8374c37a10545fa147a3f35 c3b17af6c056475db1df5b52be30251c 5b86bcb979d94ff7adc2a849c08009b3--c3b17af6c056475db1df5b52be30251c 0308233648854685857c2bdfa5448d8e c3b17af6c056475db1df5b52be30251c--0308233648854685857c2bdfa5448d8e 2e26b50cd8f04737a1ddba005df74a83 0308233648854685857c2bdfa5448d8e--2e26b50cd8f04737a1ddba005df74a83 d853c2d022094c0b9ec4e12b13e1066f X 2e26b50cd8f04737a1ddba005df74a83--d853c2d022094c0b9ec4e12b13e1066f d853c2d022094c0b9ec4e12b13e1066f--9d4f081634624701a282a915894f95e3 a634b389ea9b4eec92bd4ab427ae69cb d853c2d022094c0b9ec4e12b13e1066f--a634b389ea9b4eec92bd4ab427ae69cb 9ecdc75a6bd442eea1047b2cccdfbf37 a634b389ea9b4eec92bd4ab427ae69cb--9ecdc75a6bd442eea1047b2cccdfbf37 ebc2a35d81864bfc935aeacbb4031d36 9ecdc75a6bd442eea1047b2cccdfbf37--ebc2a35d81864bfc935aeacbb4031d36 c5fa27cdae284fb9967c1f67d8ceb67b ebc2a35d81864bfc935aeacbb4031d36--c5fa27cdae284fb9967c1f67d8ceb67b 93128c84776a471ea63c4e16a05f8ee2 c5fa27cdae284fb9967c1f67d8ceb67b--93128c84776a471ea63c4e16a05f8ee2 fcec415849ea4a53921f1279adb02e7b 93128c84776a471ea63c4e16a05f8ee2--fcec415849ea4a53921f1279adb02e7b 2b2e493138d745969e854f9568347fe7 fcec415849ea4a53921f1279adb02e7b--2b2e493138d745969e854f9568347fe7 fc731e0599dd47bdb2ef4106e2e59027 2b2e493138d745969e854f9568347fe7--fc731e0599dd47bdb2ef4106e2e59027 196c0807ede54293bd425734311c4316 X fc731e0599dd47bdb2ef4106e2e59027--196c0807ede54293bd425734311c4316 196c0807ede54293bd425734311c4316--15232cfde05f460ebb474e5584912bdb 06163d93e4a34e3da36e89adbea42af5 196c0807ede54293bd425734311c4316--06163d93e4a34e3da36e89adbea42af5 259ca9713b3d4122961b73279a73360d 06163d93e4a34e3da36e89adbea42af5--259ca9713b3d4122961b73279a73360d 839e9cdfdc174d69aa69d86f16f227e1 259ca9713b3d4122961b73279a73360d--839e9cdfdc174d69aa69d86f16f227e1 0338289c6ca7417e946efb4e730dea05 839e9cdfdc174d69aa69d86f16f227e1--0338289c6ca7417e946efb4e730dea05 72103c18b607440d92ebda7ff2aacf93 0338289c6ca7417e946efb4e730dea05--72103c18b607440d92ebda7ff2aacf93 e9f01a815c04472dbf5fb16dd3601024 X 72103c18b607440d92ebda7ff2aacf93--e9f01a815c04472dbf5fb16dd3601024 e9f01a815c04472dbf5fb16dd3601024--365f77da531c4c448489b984eca5a019 0ac7b9910ec44875b4b6e6c6c98a231e e9f01a815c04472dbf5fb16dd3601024--0ac7b9910ec44875b4b6e6c6c98a231e 2cc6a19e487a4479a20fc4c15642ffef 0ac7b9910ec44875b4b6e6c6c98a231e--2cc6a19e487a4479a20fc4c15642ffef 69f27702a0ab4392ae80f562e41d90ca 2cc6a19e487a4479a20fc4c15642ffef--69f27702a0ab4392ae80f562e41d90ca ededb845dba04fa5bb4a760985c253b1 69f27702a0ab4392ae80f562e41d90ca--ededb845dba04fa5bb4a760985c253b1 fc83fd36a71e41d894fe083f00c807b7 ededb845dba04fa5bb4a760985c253b1--fc83fd36a71e41d894fe083f00c807b7 30aa2d82639e4574b6e26d4b3be8c01d fc83fd36a71e41d894fe083f00c807b7--30aa2d82639e4574b6e26d4b3be8c01d ab473826de1f49d1908cd01653f2fda0 30aa2d82639e4574b6e26d4b3be8c01d--ab473826de1f49d1908cd01653f2fda0 101f14416c954438b1ccf961afe4c42a ab473826de1f49d1908cd01653f2fda0--101f14416c954438b1ccf961afe4c42a 9c315bc11f384fa092e243cb823e29d3 101f14416c954438b1ccf961afe4c42a--9c315bc11f384fa092e243cb823e29d3 6868776a69ed47dd88d6c9d52e783bd4 9c315bc11f384fa092e243cb823e29d3--6868776a69ed47dd88d6c9d52e783bd4 251989f56cd4471fad7834454c18e116 6868776a69ed47dd88d6c9d52e783bd4--251989f56cd4471fad7834454c18e116 018a7289c6d048c18c1488595b7cf386 251989f56cd4471fad7834454c18e116--018a7289c6d048c18c1488595b7cf386 fdfd590214f4475f91a7abb101e8fb59 X 018a7289c6d048c18c1488595b7cf386--fdfd590214f4475f91a7abb101e8fb59 fdfd590214f4475f91a7abb101e8fb59--8bd7b9d9fa7349c6856d570ccc25858b 53c2b165c6a4465e89e4dd4639c3f363 fdfd590214f4475f91a7abb101e8fb59--53c2b165c6a4465e89e4dd4639c3f363 f0e3540b9e40412da162bcfa34fcf4c3 53c2b165c6a4465e89e4dd4639c3f363--f0e3540b9e40412da162bcfa34fcf4c3 dbc3958bca984a9e98afab795231356d f0e3540b9e40412da162bcfa34fcf4c3--dbc3958bca984a9e98afab795231356d 89dd73e988f04467b6b3155b6d539f6e X dbc3958bca984a9e98afab795231356d--89dd73e988f04467b6b3155b6d539f6e 89dd73e988f04467b6b3155b6d539f6e--d092a1142da848d8920437cb910ca4aa 126a58610ea04a03a16e740a4c30b735 89dd73e988f04467b6b3155b6d539f6e--126a58610ea04a03a16e740a4c30b735 3aac0ee2afa84d169d8ce4fe46172a11 126a58610ea04a03a16e740a4c30b735--3aac0ee2afa84d169d8ce4fe46172a11 d5a1860e97fe4b498e7e58c0b856e902 3aac0ee2afa84d169d8ce4fe46172a11--d5a1860e97fe4b498e7e58c0b856e902 23f8d1352eec45d19cd96b5c9d6e5f77 d5a1860e97fe4b498e7e58c0b856e902--23f8d1352eec45d19cd96b5c9d6e5f77 1e3248171bb748a18b23e5972a38f576 23f8d1352eec45d19cd96b5c9d6e5f77--1e3248171bb748a18b23e5972a38f576 7c7231438850435290b42f9e5de64259 X 1e3248171bb748a18b23e5972a38f576--7c7231438850435290b42f9e5de64259 7c7231438850435290b42f9e5de64259--b98ae8128efe46f4a7b4af74aa7d023b a5ccd0b0c8d544cd8bd53a27d31b9674 RZ(-1.0*g0) 7c7231438850435290b42f9e5de64259--a5ccd0b0c8d544cd8bd53a27d31b9674 19fd2827be32455e9baa317433ef0148 X a5ccd0b0c8d544cd8bd53a27d31b9674--19fd2827be32455e9baa317433ef0148 19fd2827be32455e9baa317433ef0148--4397b4d238a64bbda4ccbcf485aba108 e93d057e5f5d4b179958b0b0a81aa9fd 19fd2827be32455e9baa317433ef0148--e93d057e5f5d4b179958b0b0a81aa9fd 160f301cbb864e9aa3f958d441ffde69 e93d057e5f5d4b179958b0b0a81aa9fd--160f301cbb864e9aa3f958d441ffde69 c0915707bd824c869177b503561e4987 160f301cbb864e9aa3f958d441ffde69--c0915707bd824c869177b503561e4987 9602d99672aa4dbdb75d58dd8f46f726 c0915707bd824c869177b503561e4987--9602d99672aa4dbdb75d58dd8f46f726 83556431f45f40379ddeeee2de4df8d4 X 9602d99672aa4dbdb75d58dd8f46f726--83556431f45f40379ddeeee2de4df8d4 83556431f45f40379ddeeee2de4df8d4--b226ed716cfc4549a6f2bfe8c98ac76b c3350076321e44258f3de64ae0debfdf 83556431f45f40379ddeeee2de4df8d4--c3350076321e44258f3de64ae0debfdf 4010c4ec80bc404883c198e57b1d3733 c3350076321e44258f3de64ae0debfdf--4010c4ec80bc404883c198e57b1d3733 3c39e5100be343f49e85ac1cb187cff3 4010c4ec80bc404883c198e57b1d3733--3c39e5100be343f49e85ac1cb187cff3 a3a4e6bd3fa547928aa9eb16044b218b X 3c39e5100be343f49e85ac1cb187cff3--a3a4e6bd3fa547928aa9eb16044b218b a3a4e6bd3fa547928aa9eb16044b218b--eceaa8068ea34a1f989b4ec82f1289b8 918d3bc1d2524d50bc292550da169d4c a3a4e6bd3fa547928aa9eb16044b218b--918d3bc1d2524d50bc292550da169d4c 03b91eff9e414a549e282e750b5356ea 918d3bc1d2524d50bc292550da169d4c--03b91eff9e414a549e282e750b5356ea c36691c59c27465aa5a26b30bb1f241f 03b91eff9e414a549e282e750b5356ea--c36691c59c27465aa5a26b30bb1f241f db4df827188d456b9f5fc7e1260e007b c36691c59c27465aa5a26b30bb1f241f--db4df827188d456b9f5fc7e1260e007b 59dc3141879948b18bd50285905493cf X db4df827188d456b9f5fc7e1260e007b--59dc3141879948b18bd50285905493cf 59dc3141879948b18bd50285905493cf--3d212e8242b34203af0aa71ee1f1293d dc7a71aa984c4264835edaeb04b70947 59dc3141879948b18bd50285905493cf--dc7a71aa984c4264835edaeb04b70947 a06c3c435055401fbcc350633bcb6017 dc7a71aa984c4264835edaeb04b70947--a06c3c435055401fbcc350633bcb6017 c5ee2388a1f14e9cab40e2d68b02b703 a06c3c435055401fbcc350633bcb6017--c5ee2388a1f14e9cab40e2d68b02b703 fb174d6d5c2e4307aa9a58f444c4ee38 c5ee2388a1f14e9cab40e2d68b02b703--fb174d6d5c2e4307aa9a58f444c4ee38 783a21aa88ea47ebbcb388df0388ede3 fb174d6d5c2e4307aa9a58f444c4ee38--783a21aa88ea47ebbcb388df0388ede3 c843019d2c114b89a49a80cfe2f3a82e X 783a21aa88ea47ebbcb388df0388ede3--c843019d2c114b89a49a80cfe2f3a82e c843019d2c114b89a49a80cfe2f3a82e--dcc5d3f9289b42c8825c499d458b25b7 ad37d2dc06254064814947b323c69429 c843019d2c114b89a49a80cfe2f3a82e--ad37d2dc06254064814947b323c69429 fb150ee962574fc4b0bdc3be4751c1bc ad37d2dc06254064814947b323c69429--fb150ee962574fc4b0bdc3be4751c1bc 84a3488a503643a58433fbf89d467f38 fb150ee962574fc4b0bdc3be4751c1bc--84a3488a503643a58433fbf89d467f38 81dbf58c13644038abed9b1e92a3ff3e 84a3488a503643a58433fbf89d467f38--81dbf58c13644038abed9b1e92a3ff3e 1ed5f01bae734f86b11ecfaa298b784e 81dbf58c13644038abed9b1e92a3ff3e--1ed5f01bae734f86b11ecfaa298b784e a78c0a7e3a16498398d7f0a5b55e8ee8 1ed5f01bae734f86b11ecfaa298b784e--a78c0a7e3a16498398d7f0a5b55e8ee8 7e7fd9660cf7487a8de69fe49db7f84d X a78c0a7e3a16498398d7f0a5b55e8ee8--7e7fd9660cf7487a8de69fe49db7f84d 7e7fd9660cf7487a8de69fe49db7f84d--9b1e41bb26a147fea59dbc5245cb091a 5d2fd79178e44145a323fa44b5bdf32d RZ(-1.0*g0) 7e7fd9660cf7487a8de69fe49db7f84d--5d2fd79178e44145a323fa44b5bdf32d 8be49092e2384d9aa2a49ff278ef3a6c X 5d2fd79178e44145a323fa44b5bdf32d--8be49092e2384d9aa2a49ff278ef3a6c 8be49092e2384d9aa2a49ff278ef3a6c--d45e4a6085ee40059b278fc720d4f4a7 c7ce152101ef4cf6bb9dea01908ecdd8 8be49092e2384d9aa2a49ff278ef3a6c--c7ce152101ef4cf6bb9dea01908ecdd8 1cdd2685983841f5b275901c732a0cc3 c7ce152101ef4cf6bb9dea01908ecdd8--1cdd2685983841f5b275901c732a0cc3 c6cb911ebd954501bbc7e2a77d484858 X 1cdd2685983841f5b275901c732a0cc3--c6cb911ebd954501bbc7e2a77d484858 c6cb911ebd954501bbc7e2a77d484858--e319ed85a39245f5b8ff43d19e96e2b5 8d649e192bd44559806c68e257eeb76f c6cb911ebd954501bbc7e2a77d484858--8d649e192bd44559806c68e257eeb76f 4711ff8f6b8b4ef697d7f148343947d7 8d649e192bd44559806c68e257eeb76f--4711ff8f6b8b4ef697d7f148343947d7 eb035df39b3347c4a54e084cebbb0571 4711ff8f6b8b4ef697d7f148343947d7--eb035df39b3347c4a54e084cebbb0571 1a193a9cb06e4e74b139360b755bfa7c X eb035df39b3347c4a54e084cebbb0571--1a193a9cb06e4e74b139360b755bfa7c 1a193a9cb06e4e74b139360b755bfa7c--77c5280287de4a17b0b894158ee1425d 641a891ca77a4d0bbd25a265d85b5f9b 1a193a9cb06e4e74b139360b755bfa7c--641a891ca77a4d0bbd25a265d85b5f9b 0b469eac2a3a44b7bc81686c135ca61e X 641a891ca77a4d0bbd25a265d85b5f9b--0b469eac2a3a44b7bc81686c135ca61e 0b469eac2a3a44b7bc81686c135ca61e--da47b85744fd43eb87ef28cbf68cb4c0 b825c1478fd549d2ae330fb0cf0c3d8d 0b469eac2a3a44b7bc81686c135ca61e--b825c1478fd549d2ae330fb0cf0c3d8d 7dd210b1c1c44cf290424980c70c4b97 b825c1478fd549d2ae330fb0cf0c3d8d--7dd210b1c1c44cf290424980c70c4b97 7390b07d7b194885bca8d6bc5e695ecd 7dd210b1c1c44cf290424980c70c4b97--7390b07d7b194885bca8d6bc5e695ecd 04c1235edb9e4937af47d75d1e72b705 X 7390b07d7b194885bca8d6bc5e695ecd--04c1235edb9e4937af47d75d1e72b705 04c1235edb9e4937af47d75d1e72b705--d7ac7e9a26934547abcb6f5e53534529 e191800aa93141e0a4b3ff13f047156e 04c1235edb9e4937af47d75d1e72b705--e191800aa93141e0a4b3ff13f047156e 2939a8adafd643a3916df163cfbfb067 e191800aa93141e0a4b3ff13f047156e--2939a8adafd643a3916df163cfbfb067 5206f2b5a29d4e29b6fe7839c95fd19a 2939a8adafd643a3916df163cfbfb067--5206f2b5a29d4e29b6fe7839c95fd19a 6d7719485b7244e4a6eb329f7400e0f3 5206f2b5a29d4e29b6fe7839c95fd19a--6d7719485b7244e4a6eb329f7400e0f3 eb7e60b1f60c408fb2115474562900eb 6d7719485b7244e4a6eb329f7400e0f3--eb7e60b1f60c408fb2115474562900eb 1d04d3732afd4ecab3da475b0700b5eb eb7e60b1f60c408fb2115474562900eb--1d04d3732afd4ecab3da475b0700b5eb 9be2f76a00bc4d4c86776692cba733ff 1d04d3732afd4ecab3da475b0700b5eb--9be2f76a00bc4d4c86776692cba733ff e3e883e354a849e8b4a55e5bd390d219 9be2f76a00bc4d4c86776692cba733ff--e3e883e354a849e8b4a55e5bd390d219 e181df8b2f6d4965be1f24f764a1aaf8 RX(b05) e3e883e354a849e8b4a55e5bd390d219--e181df8b2f6d4965be1f24f764a1aaf8 09220b851bba42e8962424d3edbf4130 e181df8b2f6d4965be1f24f764a1aaf8--09220b851bba42e8962424d3edbf4130 9d8480bb326c43ec84c59be3c75fee80 09220b851bba42e8962424d3edbf4130--9d8480bb326c43ec84c59be3c75fee80 49a42c4385574d0eae44616db331f5db 9d8480bb326c43ec84c59be3c75fee80--49a42c4385574d0eae44616db331f5db 65e72083611640329dab807e79674cdb 49a42c4385574d0eae44616db331f5db--65e72083611640329dab807e79674cdb 2d71bdfa84a54e9c8b967d20d5fef935 X 65e72083611640329dab807e79674cdb--2d71bdfa84a54e9c8b967d20d5fef935 2d71bdfa84a54e9c8b967d20d5fef935--1ae64be25c1447ddb5049ad83de50126 77a3c016506a44f086661ec579a75b74 2d71bdfa84a54e9c8b967d20d5fef935--77a3c016506a44f086661ec579a75b74 36774392280d4fbeb6e5cc8c04821133 77a3c016506a44f086661ec579a75b74--36774392280d4fbeb6e5cc8c04821133 852f93e5014e4e9f9e37005f6b4a24d1 36774392280d4fbeb6e5cc8c04821133--852f93e5014e4e9f9e37005f6b4a24d1 2ccfe7c2c2c9491eb8750e830fe30ab6 852f93e5014e4e9f9e37005f6b4a24d1--2ccfe7c2c2c9491eb8750e830fe30ab6 8a81b78afcdc45f49f3b7cfb015f23af 2ccfe7c2c2c9491eb8750e830fe30ab6--8a81b78afcdc45f49f3b7cfb015f23af c13d8c9204284b39b27e85dbdc602a02 X 8a81b78afcdc45f49f3b7cfb015f23af--c13d8c9204284b39b27e85dbdc602a02 c13d8c9204284b39b27e85dbdc602a02--de225a38e51145a5a7b645ea042d897f 7a952b53d2d24b97bf35410a617a0e10 c13d8c9204284b39b27e85dbdc602a02--7a952b53d2d24b97bf35410a617a0e10 fbd2470187904063a22ba1ad815aaf36 7a952b53d2d24b97bf35410a617a0e10--fbd2470187904063a22ba1ad815aaf36 53963e1d429140efbdc92d1c240f5529 fbd2470187904063a22ba1ad815aaf36--53963e1d429140efbdc92d1c240f5529 3fb6c40e2c9a4a2ca080265e9c342f5e 53963e1d429140efbdc92d1c240f5529--3fb6c40e2c9a4a2ca080265e9c342f5e e913257641ab48deb5af41a87edd21fa 3fb6c40e2c9a4a2ca080265e9c342f5e--e913257641ab48deb5af41a87edd21fa c7c433b072c14ed68485e3e98ddd239b e913257641ab48deb5af41a87edd21fa--c7c433b072c14ed68485e3e98ddd239b 9de02063cd4e4866a7c5a439a4676289 c7c433b072c14ed68485e3e98ddd239b--9de02063cd4e4866a7c5a439a4676289 dba9eb6c4ad441c482b80043ff711d0a 9de02063cd4e4866a7c5a439a4676289--dba9eb6c4ad441c482b80043ff711d0a 1abe00b62f58448488d5d3e2a7be3ecb dba9eb6c4ad441c482b80043ff711d0a--1abe00b62f58448488d5d3e2a7be3ecb b22ca1726e3a4371822864409ca533dd 1abe00b62f58448488d5d3e2a7be3ecb--b22ca1726e3a4371822864409ca533dd 2dffabc6342d4b9bb7b0222392b937b5 b22ca1726e3a4371822864409ca533dd--2dffabc6342d4b9bb7b0222392b937b5 ea4837c53cfa405e99b437a35570c978 2dffabc6342d4b9bb7b0222392b937b5--ea4837c53cfa405e99b437a35570c978 4591508fcd20493d897f3ebe45baa736 ea4837c53cfa405e99b437a35570c978--4591508fcd20493d897f3ebe45baa736 280a9341ae9a444482a6045f369d5ea8 4591508fcd20493d897f3ebe45baa736--280a9341ae9a444482a6045f369d5ea8 8fd7ed1c974f46f399ae8e3d39e0a2b5 280a9341ae9a444482a6045f369d5ea8--8fd7ed1c974f46f399ae8e3d39e0a2b5 7898c1c9ca064a809a6642ad9becc2af 8fd7ed1c974f46f399ae8e3d39e0a2b5--7898c1c9ca064a809a6642ad9becc2af 60c2c05803f2438bbdb828985f7045f4 7898c1c9ca064a809a6642ad9becc2af--60c2c05803f2438bbdb828985f7045f4 aa867a16455e4a94af6a50d814fa3cbd 60c2c05803f2438bbdb828985f7045f4--aa867a16455e4a94af6a50d814fa3cbd 96f233259bcc4a6bbb56d11b0af84004 aa867a16455e4a94af6a50d814fa3cbd--96f233259bcc4a6bbb56d11b0af84004 ab3784060b164838b29d37ad3afe79aa 96f233259bcc4a6bbb56d11b0af84004--ab3784060b164838b29d37ad3afe79aa b33cf2c46e0241e1a5829a22f6e918d0 X ab3784060b164838b29d37ad3afe79aa--b33cf2c46e0241e1a5829a22f6e918d0 b33cf2c46e0241e1a5829a22f6e918d0--b87a3bbaa2164007925759ed41228817 70e03d067fb94f02952ba4f051027f78 RZ(-1.0*g1) b33cf2c46e0241e1a5829a22f6e918d0--70e03d067fb94f02952ba4f051027f78 acd7f20ea25f45ca9317f63ac201617f X 70e03d067fb94f02952ba4f051027f78--acd7f20ea25f45ca9317f63ac201617f acd7f20ea25f45ca9317f63ac201617f--076ebae25f094b81b447ccf0e5204c78 1cf4146ff0334851be46ed7ec2b97115 acd7f20ea25f45ca9317f63ac201617f--1cf4146ff0334851be46ed7ec2b97115 bec190b885b24606bd467f402089b4f9 1cf4146ff0334851be46ed7ec2b97115--bec190b885b24606bd467f402089b4f9 278ac6d52c7442cdb1b0e632cd420837 bec190b885b24606bd467f402089b4f9--278ac6d52c7442cdb1b0e632cd420837 cf6c25f9a9954808bb63ba858e32b01f 278ac6d52c7442cdb1b0e632cd420837--cf6c25f9a9954808bb63ba858e32b01f bed051fcf67e4144a4f14b5181ded9f1 cf6c25f9a9954808bb63ba858e32b01f--bed051fcf67e4144a4f14b5181ded9f1 b4d3205738b3474f9f77e76eb2ca4779 bed051fcf67e4144a4f14b5181ded9f1--b4d3205738b3474f9f77e76eb2ca4779 806e45c3037c46d49170a239ed8551d6 b4d3205738b3474f9f77e76eb2ca4779--806e45c3037c46d49170a239ed8551d6 9deefe1b674146d7b817f1a1585375b9 806e45c3037c46d49170a239ed8551d6--9deefe1b674146d7b817f1a1585375b9 3f4c3700a0d14b21ab1d6abbcb365348 X 9deefe1b674146d7b817f1a1585375b9--3f4c3700a0d14b21ab1d6abbcb365348 3f4c3700a0d14b21ab1d6abbcb365348--4a33cea0640a4ec093a537434801b547 559847f87398406db7e579b643060e8e 3f4c3700a0d14b21ab1d6abbcb365348--559847f87398406db7e579b643060e8e 9b9d26e713e340eb9565d3ec127e6b44 559847f87398406db7e579b643060e8e--9b9d26e713e340eb9565d3ec127e6b44 3455117c33bc4f5a802cc89521390104 9b9d26e713e340eb9565d3ec127e6b44--3455117c33bc4f5a802cc89521390104 7e18e632228a4780bc391df7f5e514bc X 3455117c33bc4f5a802cc89521390104--7e18e632228a4780bc391df7f5e514bc 7e18e632228a4780bc391df7f5e514bc--9fff622ad547407298d773fb35d03bb5 a909c968f3044acb9135bf731351e90c 7e18e632228a4780bc391df7f5e514bc--a909c968f3044acb9135bf731351e90c 8653e6690d27442d9a8a58769665dbb4 a909c968f3044acb9135bf731351e90c--8653e6690d27442d9a8a58769665dbb4 9a4d66a81c93489f878974646234678b 8653e6690d27442d9a8a58769665dbb4--9a4d66a81c93489f878974646234678b 3405b9e7e55b40eca7add6cce7ba66a8 9a4d66a81c93489f878974646234678b--3405b9e7e55b40eca7add6cce7ba66a8 84f81bd2687a4a6a9475a26d5540bc78 3405b9e7e55b40eca7add6cce7ba66a8--84f81bd2687a4a6a9475a26d5540bc78 c68a42c61cbc43e0a9a1036913832919 84f81bd2687a4a6a9475a26d5540bc78--c68a42c61cbc43e0a9a1036913832919 6544a835968242729a84fbfbe89382db c68a42c61cbc43e0a9a1036913832919--6544a835968242729a84fbfbe89382db 6a7842f1b98d4c84bbbf42539859c601 6544a835968242729a84fbfbe89382db--6a7842f1b98d4c84bbbf42539859c601 82bd3902b643435ca5b623b12ac282ea X 6a7842f1b98d4c84bbbf42539859c601--82bd3902b643435ca5b623b12ac282ea 82bd3902b643435ca5b623b12ac282ea--abefcb686c0443e9b19828ac1a9f0a4f f0f8fb86ae1b470dbc54ed67596d3911 82bd3902b643435ca5b623b12ac282ea--f0f8fb86ae1b470dbc54ed67596d3911 d9013a67f76f4be982d04208adc9702e f0f8fb86ae1b470dbc54ed67596d3911--d9013a67f76f4be982d04208adc9702e 43b4fe9caa854ba593f330f357d75c0c d9013a67f76f4be982d04208adc9702e--43b4fe9caa854ba593f330f357d75c0c 36fb422c393a4b5eb23efd82b5c55047 43b4fe9caa854ba593f330f357d75c0c--36fb422c393a4b5eb23efd82b5c55047 a9fe2bae955b4e53bbf158ab7262cac8 36fb422c393a4b5eb23efd82b5c55047--a9fe2bae955b4e53bbf158ab7262cac8 2a713d2dc55047e6b94e4d721b6ac038 X a9fe2bae955b4e53bbf158ab7262cac8--2a713d2dc55047e6b94e4d721b6ac038 2a713d2dc55047e6b94e4d721b6ac038--5b008ffcea3d421ca5308be7eb680238 c1a4a4013dd24c6db2a8d41e47bf631d 2a713d2dc55047e6b94e4d721b6ac038--c1a4a4013dd24c6db2a8d41e47bf631d bd5d9f91a3cf48f781ace3ee60454681 c1a4a4013dd24c6db2a8d41e47bf631d--bd5d9f91a3cf48f781ace3ee60454681 a47f506a8d2e4943b61e650e39c73ab3 bd5d9f91a3cf48f781ace3ee60454681--a47f506a8d2e4943b61e650e39c73ab3 f509c96623744f329f00639a691051ea a47f506a8d2e4943b61e650e39c73ab3--f509c96623744f329f00639a691051ea 5517420715c0403ca432dc6f3009ebca f509c96623744f329f00639a691051ea--5517420715c0403ca432dc6f3009ebca f8e3ae6471ab4fe1aad1581d415fdc56 5517420715c0403ca432dc6f3009ebca--f8e3ae6471ab4fe1aad1581d415fdc56 b204af37d8dd41ea88091fea2bfaf4b6 f8e3ae6471ab4fe1aad1581d415fdc56--b204af37d8dd41ea88091fea2bfaf4b6 c4ad14b9e59c499b9ea6878b294555ab b204af37d8dd41ea88091fea2bfaf4b6--c4ad14b9e59c499b9ea6878b294555ab efa7effe81e0487ea1612d2e710976a4 c4ad14b9e59c499b9ea6878b294555ab--efa7effe81e0487ea1612d2e710976a4 552d8dd37c79497498cdeaf3322604bc efa7effe81e0487ea1612d2e710976a4--552d8dd37c79497498cdeaf3322604bc 00d7e0a7e9394cfbb7d27d99b79caa71 552d8dd37c79497498cdeaf3322604bc--00d7e0a7e9394cfbb7d27d99b79caa71 402a1022824947cd90a23bdba1674cab 00d7e0a7e9394cfbb7d27d99b79caa71--402a1022824947cd90a23bdba1674cab 65d47a6ea0af42de9cc6264d70532575 X 402a1022824947cd90a23bdba1674cab--65d47a6ea0af42de9cc6264d70532575 65d47a6ea0af42de9cc6264d70532575--b284d68873e34a6889be115a5847bf8a ee29371edafb44799ddbbb2bf65b9259 65d47a6ea0af42de9cc6264d70532575--ee29371edafb44799ddbbb2bf65b9259 247a064f44114d7d88c2c93216bd89ac ee29371edafb44799ddbbb2bf65b9259--247a064f44114d7d88c2c93216bd89ac 86af0a1192374def8143a1306a473b3e 247a064f44114d7d88c2c93216bd89ac--86af0a1192374def8143a1306a473b3e 7309c534eada407eb1dba59732fda498 X 86af0a1192374def8143a1306a473b3e--7309c534eada407eb1dba59732fda498 7309c534eada407eb1dba59732fda498--5a05a48dd16c4356854b16ca90fc6360 3bdd844f7e7c4b06bee4cff0a02289c3 7309c534eada407eb1dba59732fda498--3bdd844f7e7c4b06bee4cff0a02289c3 14c8ff3dea0a47ad864dc6e5030063dd 3bdd844f7e7c4b06bee4cff0a02289c3--14c8ff3dea0a47ad864dc6e5030063dd a61abc62f76f4c5091854c7193f3d809 14c8ff3dea0a47ad864dc6e5030063dd--a61abc62f76f4c5091854c7193f3d809 af9377b0754d4ef9b7556875cd5ef8dc a61abc62f76f4c5091854c7193f3d809--af9377b0754d4ef9b7556875cd5ef8dc 125fabb5e41846d487b0718ddb4a816e af9377b0754d4ef9b7556875cd5ef8dc--125fabb5e41846d487b0718ddb4a816e d33aeffb04274baeaba51bd5237c9b79 X 125fabb5e41846d487b0718ddb4a816e--d33aeffb04274baeaba51bd5237c9b79 d33aeffb04274baeaba51bd5237c9b79--24d25d4ef53b497599d27d6f4f5ccc37 7ecdf332f79d490e89b260f0bad4c2fc RZ(-1.0*g1) d33aeffb04274baeaba51bd5237c9b79--7ecdf332f79d490e89b260f0bad4c2fc 85e3bed1a8f447149cf8783a3cba5a37 X 7ecdf332f79d490e89b260f0bad4c2fc--85e3bed1a8f447149cf8783a3cba5a37 85e3bed1a8f447149cf8783a3cba5a37--bd644bad6c224e4ea994f5a457f3fdb5 7214a135db8c4f2fab1687876b31da9f 85e3bed1a8f447149cf8783a3cba5a37--7214a135db8c4f2fab1687876b31da9f 2fbfcec132b9481d95b53d321da2be96 7214a135db8c4f2fab1687876b31da9f--2fbfcec132b9481d95b53d321da2be96 f6111364e4c44f2385deb4d5608777ff 2fbfcec132b9481d95b53d321da2be96--f6111364e4c44f2385deb4d5608777ff cd691f2506ff4b4b9da9092343c3fcd2 f6111364e4c44f2385deb4d5608777ff--cd691f2506ff4b4b9da9092343c3fcd2 fe9b63d87d654192b5b62ead2b2fef33 X cd691f2506ff4b4b9da9092343c3fcd2--fe9b63d87d654192b5b62ead2b2fef33 fe9b63d87d654192b5b62ead2b2fef33--be21f8a7455840d0b393c0d46e440365 652117a84a464162bde9294cd55415c0 fe9b63d87d654192b5b62ead2b2fef33--652117a84a464162bde9294cd55415c0 f0464f6a77ba4df087f45d8d95faba63 652117a84a464162bde9294cd55415c0--f0464f6a77ba4df087f45d8d95faba63 21c6641dfad54a308aa4d582855d6052 f0464f6a77ba4df087f45d8d95faba63--21c6641dfad54a308aa4d582855d6052 02303c68dd1b4e3ba5b2fd5b97b9f1e7 X 21c6641dfad54a308aa4d582855d6052--02303c68dd1b4e3ba5b2fd5b97b9f1e7 02303c68dd1b4e3ba5b2fd5b97b9f1e7--a818d69df5774f72b2a8a1eb92f212f0 368807031fe842fe8f17149894bea204 02303c68dd1b4e3ba5b2fd5b97b9f1e7--368807031fe842fe8f17149894bea204 75b82981128c42a39cffc4c34fea5d49 368807031fe842fe8f17149894bea204--75b82981128c42a39cffc4c34fea5d49 1db973a303fc44f28508c157400c2a96 75b82981128c42a39cffc4c34fea5d49--1db973a303fc44f28508c157400c2a96 429e43910d2a46dc9452b3cd27440571 1db973a303fc44f28508c157400c2a96--429e43910d2a46dc9452b3cd27440571 7998d8ff36f74b2eb782755ebefb45f4 X 429e43910d2a46dc9452b3cd27440571--7998d8ff36f74b2eb782755ebefb45f4 7998d8ff36f74b2eb782755ebefb45f4--0c1cd2277ac5443d939301855785d45f 07dc9867288e4adf99a88934f71784cf 7998d8ff36f74b2eb782755ebefb45f4--07dc9867288e4adf99a88934f71784cf 9508051fa2404756a15ed7565a3e1ed8 07dc9867288e4adf99a88934f71784cf--9508051fa2404756a15ed7565a3e1ed8 2743b0336c41472989659e7c8e504653 9508051fa2404756a15ed7565a3e1ed8--2743b0336c41472989659e7c8e504653 e2493df063124a199714658fea082e2e 2743b0336c41472989659e7c8e504653--e2493df063124a199714658fea082e2e e0dd4197a2c24b94988ee8fef52937b7 e2493df063124a199714658fea082e2e--e0dd4197a2c24b94988ee8fef52937b7 72842aa2ff544f1fa94049ab6bc13bd1 X e0dd4197a2c24b94988ee8fef52937b7--72842aa2ff544f1fa94049ab6bc13bd1 72842aa2ff544f1fa94049ab6bc13bd1--9ff57b8921db457eaca71ef41c79f794 f860de2f548441569b4d362d1e84708f 72842aa2ff544f1fa94049ab6bc13bd1--f860de2f548441569b4d362d1e84708f d12d33e87beb498bac435e785974a314 f860de2f548441569b4d362d1e84708f--d12d33e87beb498bac435e785974a314 75792ad855624e9492525a77a60d0317 d12d33e87beb498bac435e785974a314--75792ad855624e9492525a77a60d0317 3d66c4d4b8cd41d18cb3cadeffa80444 75792ad855624e9492525a77a60d0317--3d66c4d4b8cd41d18cb3cadeffa80444 853c982732684beb9e964c8371b538a4 3d66c4d4b8cd41d18cb3cadeffa80444--853c982732684beb9e964c8371b538a4 f730e41e84ae4fd1acda2b68a785324b 853c982732684beb9e964c8371b538a4--f730e41e84ae4fd1acda2b68a785324b 76aa78b5bd664d8f98eb8be42758017b X f730e41e84ae4fd1acda2b68a785324b--76aa78b5bd664d8f98eb8be42758017b 76aa78b5bd664d8f98eb8be42758017b--c48b8c062ff341f18ef50443779f9b9f a58afeff18574a92920816f28a271301 RZ(-1.0*g1) 76aa78b5bd664d8f98eb8be42758017b--a58afeff18574a92920816f28a271301 eee50b6830614f5a8ffb988978f390e4 X a58afeff18574a92920816f28a271301--eee50b6830614f5a8ffb988978f390e4 eee50b6830614f5a8ffb988978f390e4--f8036b71ccfb42e6a3e1a0549ecdb09a 9c94d5f5abf34c16933f4969d10fbe40 eee50b6830614f5a8ffb988978f390e4--9c94d5f5abf34c16933f4969d10fbe40 b06fe2c363f84508aef734cb81184413 9c94d5f5abf34c16933f4969d10fbe40--b06fe2c363f84508aef734cb81184413 0c16adeb094d42f48519aa9c809a0436 X b06fe2c363f84508aef734cb81184413--0c16adeb094d42f48519aa9c809a0436 0c16adeb094d42f48519aa9c809a0436--44a507faf3c64ed295bf44c46facca64 e7880ee13d004f1687630ebf49c6a24b 0c16adeb094d42f48519aa9c809a0436--e7880ee13d004f1687630ebf49c6a24b 038e73071c9e406d97469dc0890c0981 e7880ee13d004f1687630ebf49c6a24b--038e73071c9e406d97469dc0890c0981 a33991a9463c499db7b365f21ed1347a 038e73071c9e406d97469dc0890c0981--a33991a9463c499db7b365f21ed1347a 0b549a0537624223aacdcfc9bcae8d3f X a33991a9463c499db7b365f21ed1347a--0b549a0537624223aacdcfc9bcae8d3f 0b549a0537624223aacdcfc9bcae8d3f--b91a813e21d14a5d856f7df8edf66798 1fe2eb5187784879a36adf6ee677c6a5 0b549a0537624223aacdcfc9bcae8d3f--1fe2eb5187784879a36adf6ee677c6a5 f33dc12122844ca4b75e4acd95389d1a X 1fe2eb5187784879a36adf6ee677c6a5--f33dc12122844ca4b75e4acd95389d1a f33dc12122844ca4b75e4acd95389d1a--e179a4d92eb34bb0b6e72491c6fa4143 c515c1d69d61496b9d4d7596ac351951 f33dc12122844ca4b75e4acd95389d1a--c515c1d69d61496b9d4d7596ac351951 0be14f0aa2234adaa1f377b117bd280c c515c1d69d61496b9d4d7596ac351951--0be14f0aa2234adaa1f377b117bd280c 7a3d2c2a76e449a48f4c31c02448e502 0be14f0aa2234adaa1f377b117bd280c--7a3d2c2a76e449a48f4c31c02448e502 8a789f851ad04ab0a3ead17ca3db7729 X 7a3d2c2a76e449a48f4c31c02448e502--8a789f851ad04ab0a3ead17ca3db7729 8a789f851ad04ab0a3ead17ca3db7729--93607f7871e24a6caa4e47641cf5696a 9df219d09850492394df2ec48f66abd5 8a789f851ad04ab0a3ead17ca3db7729--9df219d09850492394df2ec48f66abd5 53190763a4b24ff4b59aa2e7b7f737f6 9df219d09850492394df2ec48f66abd5--53190763a4b24ff4b59aa2e7b7f737f6 0180b2ba2faf40d4b2305e271ffc785f 53190763a4b24ff4b59aa2e7b7f737f6--0180b2ba2faf40d4b2305e271ffc785f f1b6b9d8cec94f5f89f67c2de938b94f 0180b2ba2faf40d4b2305e271ffc785f--f1b6b9d8cec94f5f89f67c2de938b94f 3dc1bf0ac5004442b6c69e50d20c0971 f1b6b9d8cec94f5f89f67c2de938b94f--3dc1bf0ac5004442b6c69e50d20c0971 c5bcd85852934957b009dd83b70b6322 3dc1bf0ac5004442b6c69e50d20c0971--c5bcd85852934957b009dd83b70b6322 322ec5d676524ed6ad4545dabeee9144 c5bcd85852934957b009dd83b70b6322--322ec5d676524ed6ad4545dabeee9144 2d263371cf224be5acc250893ac30a0f 322ec5d676524ed6ad4545dabeee9144--2d263371cf224be5acc250893ac30a0f f9be799be5a54b079f7862e8d595e9a3 RX(b15) 2d263371cf224be5acc250893ac30a0f--f9be799be5a54b079f7862e8d595e9a3 f9be799be5a54b079f7862e8d595e9a3--4dba3979d19741c1a72ad4fe2096e23c de88ae729fa642c3966ae705003561a7 63fe6396daae46ed91b2d06c381df2e9 b7a12f85467649199053ed039a694281--63fe6396daae46ed91b2d06c381df2e9 ceaedfeff90c420fbd8d3c513c7fe35e 7 f88604ab6c764f2ca2994172775d3dee 63fe6396daae46ed91b2d06c381df2e9--f88604ab6c764f2ca2994172775d3dee 92bfe1d01a4c4fcd9c89786c1d867ed1 f88604ab6c764f2ca2994172775d3dee--92bfe1d01a4c4fcd9c89786c1d867ed1 6aa677f7d67e4b5bbbda0839ab3f8442 92bfe1d01a4c4fcd9c89786c1d867ed1--6aa677f7d67e4b5bbbda0839ab3f8442 099a5bd622444e959dc97ed260dd0fd3 6aa677f7d67e4b5bbbda0839ab3f8442--099a5bd622444e959dc97ed260dd0fd3 05a1da246ebf4b85bde465b1ac168a85 X 099a5bd622444e959dc97ed260dd0fd3--05a1da246ebf4b85bde465b1ac168a85 05a1da246ebf4b85bde465b1ac168a85--da2a6d90b5b94e00841ff98d9d948e0e fe231e6049ef424e86a7061ce5f4d81e 05a1da246ebf4b85bde465b1ac168a85--fe231e6049ef424e86a7061ce5f4d81e d43f82ebe78846d786b6cda39d533243 fe231e6049ef424e86a7061ce5f4d81e--d43f82ebe78846d786b6cda39d533243 6c1a9fb3b2ae4e63b2b4f9a36ac1da49 d43f82ebe78846d786b6cda39d533243--6c1a9fb3b2ae4e63b2b4f9a36ac1da49 b70353f6ce88465391f6914f0be84220 X 6c1a9fb3b2ae4e63b2b4f9a36ac1da49--b70353f6ce88465391f6914f0be84220 b70353f6ce88465391f6914f0be84220--8af5d9c0ab9f4b13a52bb77d30e98db0 da577b31987b4c2297ec4ff3743628fa b70353f6ce88465391f6914f0be84220--da577b31987b4c2297ec4ff3743628fa 600b7ecf137f4a1aa976466f9c51bb4d da577b31987b4c2297ec4ff3743628fa--600b7ecf137f4a1aa976466f9c51bb4d 6019322c8ca543faa2666ac5ac84ece2 600b7ecf137f4a1aa976466f9c51bb4d--6019322c8ca543faa2666ac5ac84ece2 33127ae8048f43dea51e63363bfe07ab 6019322c8ca543faa2666ac5ac84ece2--33127ae8048f43dea51e63363bfe07ab c100172632534cfc9bdd780fef97fd59 33127ae8048f43dea51e63363bfe07ab--c100172632534cfc9bdd780fef97fd59 36b99dc5b1dc44178c629091c60eebef c100172632534cfc9bdd780fef97fd59--36b99dc5b1dc44178c629091c60eebef 9d32877d6cac456b91d1115de2646891 36b99dc5b1dc44178c629091c60eebef--9d32877d6cac456b91d1115de2646891 ac90a0cd7a16466db5baf79d5629ba31 9d32877d6cac456b91d1115de2646891--ac90a0cd7a16466db5baf79d5629ba31 d47a376a18544ff8857d8a1a01c56b69 ac90a0cd7a16466db5baf79d5629ba31--d47a376a18544ff8857d8a1a01c56b69 7cde215180124cc08a136a849d2748ec d47a376a18544ff8857d8a1a01c56b69--7cde215180124cc08a136a849d2748ec 415bb6da7086465c891cc1f0ed7579e6 7cde215180124cc08a136a849d2748ec--415bb6da7086465c891cc1f0ed7579e6 55206e6ab2cd48d5aeb6d4015be7081f 415bb6da7086465c891cc1f0ed7579e6--55206e6ab2cd48d5aeb6d4015be7081f 1cf46c5670284d3998dcbdc90954313a 55206e6ab2cd48d5aeb6d4015be7081f--1cf46c5670284d3998dcbdc90954313a f472e34b2e5f4b2581d5f7b839aa41bb 1cf46c5670284d3998dcbdc90954313a--f472e34b2e5f4b2581d5f7b839aa41bb 72aee5888f8f4bd0940d12c0d9f9f293 f472e34b2e5f4b2581d5f7b839aa41bb--72aee5888f8f4bd0940d12c0d9f9f293 f430549ad2c84bd18997aac92b1db18f 72aee5888f8f4bd0940d12c0d9f9f293--f430549ad2c84bd18997aac92b1db18f 5b0f9a71ccb44015842f542571745508 f430549ad2c84bd18997aac92b1db18f--5b0f9a71ccb44015842f542571745508 6c0d90ef67ff46528b37bbebed7b4be5 5b0f9a71ccb44015842f542571745508--6c0d90ef67ff46528b37bbebed7b4be5 4c6e579befcc4c4ba81c6a68abffe8b0 6c0d90ef67ff46528b37bbebed7b4be5--4c6e579befcc4c4ba81c6a68abffe8b0 f6d01759eac946fa8d0fc279a881aab8 4c6e579befcc4c4ba81c6a68abffe8b0--f6d01759eac946fa8d0fc279a881aab8 a8614f4bfa3342a299803f80ae52fad1 f6d01759eac946fa8d0fc279a881aab8--a8614f4bfa3342a299803f80ae52fad1 78607209a80f4f478e966667952d864b a8614f4bfa3342a299803f80ae52fad1--78607209a80f4f478e966667952d864b 9c2b4e2da26646ec86cd77f791eb285a 78607209a80f4f478e966667952d864b--9c2b4e2da26646ec86cd77f791eb285a d892fcd705164b48af874e0b28444074 9c2b4e2da26646ec86cd77f791eb285a--d892fcd705164b48af874e0b28444074 c016810e43a749d68e0257f67aa0d46a d892fcd705164b48af874e0b28444074--c016810e43a749d68e0257f67aa0d46a 27a66d4889674ccba924c39d790deb65 c016810e43a749d68e0257f67aa0d46a--27a66d4889674ccba924c39d790deb65 560603feae73446cb3ada8eed46fa6d3 27a66d4889674ccba924c39d790deb65--560603feae73446cb3ada8eed46fa6d3 fe0484da79494e73942d7f850a687018 560603feae73446cb3ada8eed46fa6d3--fe0484da79494e73942d7f850a687018 85379be8953d473197a61a7623628f07 fe0484da79494e73942d7f850a687018--85379be8953d473197a61a7623628f07 28a6ee67a852488bad29b9c4036cf25b 85379be8953d473197a61a7623628f07--28a6ee67a852488bad29b9c4036cf25b 8a2bc77d0bb646a7955753941266cf02 28a6ee67a852488bad29b9c4036cf25b--8a2bc77d0bb646a7955753941266cf02 81e4eec536474af9bb5a28495192d96d 8a2bc77d0bb646a7955753941266cf02--81e4eec536474af9bb5a28495192d96d 49a3c43601ad47b98cf5b978bdbb6fa2 81e4eec536474af9bb5a28495192d96d--49a3c43601ad47b98cf5b978bdbb6fa2 1c0c8256231f481cbe276cc8b2b86e7b X 49a3c43601ad47b98cf5b978bdbb6fa2--1c0c8256231f481cbe276cc8b2b86e7b 1c0c8256231f481cbe276cc8b2b86e7b--c3b17af6c056475db1df5b52be30251c 01e4e1c0c3094875a4e0f3c5e2f8eb05 RZ(-1.0*g0) 1c0c8256231f481cbe276cc8b2b86e7b--01e4e1c0c3094875a4e0f3c5e2f8eb05 232b706f894c47e4a02be8a2a5aec615 X 01e4e1c0c3094875a4e0f3c5e2f8eb05--232b706f894c47e4a02be8a2a5aec615 232b706f894c47e4a02be8a2a5aec615--2e26b50cd8f04737a1ddba005df74a83 809214cc4fa845d9abaafcfb3f8455cc 232b706f894c47e4a02be8a2a5aec615--809214cc4fa845d9abaafcfb3f8455cc 706df97ed91d4f32ae57d252a593acf9 809214cc4fa845d9abaafcfb3f8455cc--706df97ed91d4f32ae57d252a593acf9 ecbd3ad17f93464ca3d2e1ee8955ad81 706df97ed91d4f32ae57d252a593acf9--ecbd3ad17f93464ca3d2e1ee8955ad81 e70d9a0524ad4133b0103e12e0b64c29 ecbd3ad17f93464ca3d2e1ee8955ad81--e70d9a0524ad4133b0103e12e0b64c29 3162ee58a85445b7ab2d7293594639bf e70d9a0524ad4133b0103e12e0b64c29--3162ee58a85445b7ab2d7293594639bf 02ddc647bf284f80925d004293a01b24 3162ee58a85445b7ab2d7293594639bf--02ddc647bf284f80925d004293a01b24 5427337f6b97405f816cbb8189746c6e 02ddc647bf284f80925d004293a01b24--5427337f6b97405f816cbb8189746c6e b0f235a268234549a0655896d6eb5ca1 5427337f6b97405f816cbb8189746c6e--b0f235a268234549a0655896d6eb5ca1 b3fc5a2f66724881ba5e4bdeee8693d1 b0f235a268234549a0655896d6eb5ca1--b3fc5a2f66724881ba5e4bdeee8693d1 a668fda24fb342c4877ced23298a9957 b3fc5a2f66724881ba5e4bdeee8693d1--a668fda24fb342c4877ced23298a9957 998caf9589b7413394774e04dc25e13b X a668fda24fb342c4877ced23298a9957--998caf9589b7413394774e04dc25e13b 998caf9589b7413394774e04dc25e13b--06163d93e4a34e3da36e89adbea42af5 ae7ee05392bc4ddb803b55f9befdcf62 998caf9589b7413394774e04dc25e13b--ae7ee05392bc4ddb803b55f9befdcf62 fe89220b19804f45a7ede4067100b380 ae7ee05392bc4ddb803b55f9befdcf62--fe89220b19804f45a7ede4067100b380 bd8f17fc42c54d2a847c9677680198cd fe89220b19804f45a7ede4067100b380--bd8f17fc42c54d2a847c9677680198cd 0489bbdd346741fba2177307009e6a3c X bd8f17fc42c54d2a847c9677680198cd--0489bbdd346741fba2177307009e6a3c 0489bbdd346741fba2177307009e6a3c--72103c18b607440d92ebda7ff2aacf93 389d0a880f5f4e4ab5d9805b6c9ca6a0 0489bbdd346741fba2177307009e6a3c--389d0a880f5f4e4ab5d9805b6c9ca6a0 5f4fcade50294024ab47e069254408de 389d0a880f5f4e4ab5d9805b6c9ca6a0--5f4fcade50294024ab47e069254408de 2cc31c7c70b840fd854b0d07d657fed7 5f4fcade50294024ab47e069254408de--2cc31c7c70b840fd854b0d07d657fed7 9ca767285f51417aab85edef0af38ba7 2cc31c7c70b840fd854b0d07d657fed7--9ca767285f51417aab85edef0af38ba7 6e8ba861740c49c8a71fca9da2cb8be6 9ca767285f51417aab85edef0af38ba7--6e8ba861740c49c8a71fca9da2cb8be6 decb0e4ac6be4589afcafa45c506c6b1 6e8ba861740c49c8a71fca9da2cb8be6--decb0e4ac6be4589afcafa45c506c6b1 921e4692d19046db91c4b1ad84d9ed0a decb0e4ac6be4589afcafa45c506c6b1--921e4692d19046db91c4b1ad84d9ed0a a584bf855adc452683ce0006b7bc66c0 921e4692d19046db91c4b1ad84d9ed0a--a584bf855adc452683ce0006b7bc66c0 ca1f3fc627fe498fbe4383ae73eb1133 a584bf855adc452683ce0006b7bc66c0--ca1f3fc627fe498fbe4383ae73eb1133 7ce088af6f13449cb778323d0467a729 ca1f3fc627fe498fbe4383ae73eb1133--7ce088af6f13449cb778323d0467a729 b5d9b2056c3a41dcb04beb7dc40ba589 7ce088af6f13449cb778323d0467a729--b5d9b2056c3a41dcb04beb7dc40ba589 229cf419256d49a39cb8f4d49709f903 b5d9b2056c3a41dcb04beb7dc40ba589--229cf419256d49a39cb8f4d49709f903 1f16b8d6d084441dbd3cc9f17f7d351d 229cf419256d49a39cb8f4d49709f903--1f16b8d6d084441dbd3cc9f17f7d351d abc63ef9ef164307bdaebdd90ae7d9a4 1f16b8d6d084441dbd3cc9f17f7d351d--abc63ef9ef164307bdaebdd90ae7d9a4 80f195403f214b109bfc2504298af387 X abc63ef9ef164307bdaebdd90ae7d9a4--80f195403f214b109bfc2504298af387 80f195403f214b109bfc2504298af387--53c2b165c6a4465e89e4dd4639c3f363 c1935136bca84b2a89e5000374bc8357 RZ(-1.0*g0) 80f195403f214b109bfc2504298af387--c1935136bca84b2a89e5000374bc8357 cc9a7714c5804975b7aeeecd78c23940 X c1935136bca84b2a89e5000374bc8357--cc9a7714c5804975b7aeeecd78c23940 cc9a7714c5804975b7aeeecd78c23940--dbc3958bca984a9e98afab795231356d 9c09ff3ac5d149f1b0bdd7b5d8b5307b cc9a7714c5804975b7aeeecd78c23940--9c09ff3ac5d149f1b0bdd7b5d8b5307b d930be496c454ce1a2fe2686a8dcaa46 9c09ff3ac5d149f1b0bdd7b5d8b5307b--d930be496c454ce1a2fe2686a8dcaa46 8c3fa880f99848d7975a680a61c3da7e d930be496c454ce1a2fe2686a8dcaa46--8c3fa880f99848d7975a680a61c3da7e 7e2a41f116574bdda4cf9286e952616b 8c3fa880f99848d7975a680a61c3da7e--7e2a41f116574bdda4cf9286e952616b 9444dfc3b2654e5993b55aa2643b6aa3 7e2a41f116574bdda4cf9286e952616b--9444dfc3b2654e5993b55aa2643b6aa3 4df7ad42540b4e98b533042d7d3dcfd4 9444dfc3b2654e5993b55aa2643b6aa3--4df7ad42540b4e98b533042d7d3dcfd4 7a42e6171d8c4331bb98f92d89a25cc0 4df7ad42540b4e98b533042d7d3dcfd4--7a42e6171d8c4331bb98f92d89a25cc0 5aba96adf5044bb8b52ebf0a6d412b56 7a42e6171d8c4331bb98f92d89a25cc0--5aba96adf5044bb8b52ebf0a6d412b56 b829408bbcb2498f9835f8f57d64ceb1 5aba96adf5044bb8b52ebf0a6d412b56--b829408bbcb2498f9835f8f57d64ceb1 03af57c4fc434087b8c8f1638cc5a14f b829408bbcb2498f9835f8f57d64ceb1--03af57c4fc434087b8c8f1638cc5a14f 21c05b6f89454618be189002871f6b88 03af57c4fc434087b8c8f1638cc5a14f--21c05b6f89454618be189002871f6b88 c6c4bf1cbb4c46539fdb232d4f81f011 21c05b6f89454618be189002871f6b88--c6c4bf1cbb4c46539fdb232d4f81f011 3ce50e9706f043448f9e2d0919d60147 c6c4bf1cbb4c46539fdb232d4f81f011--3ce50e9706f043448f9e2d0919d60147 f09bab2c764248459dc136eaa396bf29 3ce50e9706f043448f9e2d0919d60147--f09bab2c764248459dc136eaa396bf29 bee0fcec49f141d2b68740475ffa12a8 X f09bab2c764248459dc136eaa396bf29--bee0fcec49f141d2b68740475ffa12a8 bee0fcec49f141d2b68740475ffa12a8--c3350076321e44258f3de64ae0debfdf 95e0d28c0808477b9611cea6eda1984e RZ(-1.0*g0) bee0fcec49f141d2b68740475ffa12a8--95e0d28c0808477b9611cea6eda1984e 8b77f3cad18d4b8193c8d1e31cfdcb8c X 95e0d28c0808477b9611cea6eda1984e--8b77f3cad18d4b8193c8d1e31cfdcb8c 8b77f3cad18d4b8193c8d1e31cfdcb8c--3c39e5100be343f49e85ac1cb187cff3 22f235052ad54452b6e9bfdaf93eba0d 8b77f3cad18d4b8193c8d1e31cfdcb8c--22f235052ad54452b6e9bfdaf93eba0d 217108cf81ea4cb3af08a2d34c38caf0 22f235052ad54452b6e9bfdaf93eba0d--217108cf81ea4cb3af08a2d34c38caf0 1017dec9d1374b5d842e997332cf458a 217108cf81ea4cb3af08a2d34c38caf0--1017dec9d1374b5d842e997332cf458a d9726d3f494048398e7e3471e06bdbff 1017dec9d1374b5d842e997332cf458a--d9726d3f494048398e7e3471e06bdbff d84abb41ed414bf88cdc9b6fcbffeccd d9726d3f494048398e7e3471e06bdbff--d84abb41ed414bf88cdc9b6fcbffeccd 476545628e7840818105f9b8215b8b1e d84abb41ed414bf88cdc9b6fcbffeccd--476545628e7840818105f9b8215b8b1e 809c3139f875406cb4f56a5875cb9c7d X 476545628e7840818105f9b8215b8b1e--809c3139f875406cb4f56a5875cb9c7d 809c3139f875406cb4f56a5875cb9c7d--dc7a71aa984c4264835edaeb04b70947 1beb9a2d6255491bb8cf9f8bd0881270 809c3139f875406cb4f56a5875cb9c7d--1beb9a2d6255491bb8cf9f8bd0881270 3938cf5c7d2544ac8704471335ccc3a0 1beb9a2d6255491bb8cf9f8bd0881270--3938cf5c7d2544ac8704471335ccc3a0 986f708ac71a4be0af55a9059d002b39 3938cf5c7d2544ac8704471335ccc3a0--986f708ac71a4be0af55a9059d002b39 4fb233808d59430f9037e0d39625c820 X 986f708ac71a4be0af55a9059d002b39--4fb233808d59430f9037e0d39625c820 4fb233808d59430f9037e0d39625c820--783a21aa88ea47ebbcb388df0388ede3 0e8713cd55164ab99e3d55f77ac05eca 4fb233808d59430f9037e0d39625c820--0e8713cd55164ab99e3d55f77ac05eca 7c6e344bfa7f4938bcb521e41f24fae2 0e8713cd55164ab99e3d55f77ac05eca--7c6e344bfa7f4938bcb521e41f24fae2 2d23eb66f00140d683305cd59749bd99 7c6e344bfa7f4938bcb521e41f24fae2--2d23eb66f00140d683305cd59749bd99 3009210208ce4561a9d55729d8de7983 2d23eb66f00140d683305cd59749bd99--3009210208ce4561a9d55729d8de7983 15a0c2e403414076b4f6f80f92960f1a 3009210208ce4561a9d55729d8de7983--15a0c2e403414076b4f6f80f92960f1a 1eb299435f824f7f92d132641dae7800 15a0c2e403414076b4f6f80f92960f1a--1eb299435f824f7f92d132641dae7800 ee674b698c094e9cba7dee3e80ea078d 1eb299435f824f7f92d132641dae7800--ee674b698c094e9cba7dee3e80ea078d b1586c9253394fc28aa1476589d60093 ee674b698c094e9cba7dee3e80ea078d--b1586c9253394fc28aa1476589d60093 2589357c11c643f4b84a04d72ddfab2b b1586c9253394fc28aa1476589d60093--2589357c11c643f4b84a04d72ddfab2b bb6d563c034146a785fcf4dc093ccc0a 2589357c11c643f4b84a04d72ddfab2b--bb6d563c034146a785fcf4dc093ccc0a e5627fd60ee441b19756208bbf511842 bb6d563c034146a785fcf4dc093ccc0a--e5627fd60ee441b19756208bbf511842 f4a774c1a55f4a0bb008322b73fd4358 e5627fd60ee441b19756208bbf511842--f4a774c1a55f4a0bb008322b73fd4358 3fc183c6a17b4fdcbfc56628dc9e17e7 f4a774c1a55f4a0bb008322b73fd4358--3fc183c6a17b4fdcbfc56628dc9e17e7 ecef1c8d06444f05803aff031eadf29b X 3fc183c6a17b4fdcbfc56628dc9e17e7--ecef1c8d06444f05803aff031eadf29b ecef1c8d06444f05803aff031eadf29b--8d649e192bd44559806c68e257eeb76f 3ff2ec5460544955b4e73f8056a1a143 RZ(-1.0*g0) ecef1c8d06444f05803aff031eadf29b--3ff2ec5460544955b4e73f8056a1a143 87462c2a661d4fcb840a4d3151cc7288 X 3ff2ec5460544955b4e73f8056a1a143--87462c2a661d4fcb840a4d3151cc7288 87462c2a661d4fcb840a4d3151cc7288--eb035df39b3347c4a54e084cebbb0571 1ae0d800ac484d1a90369c85c500d766 87462c2a661d4fcb840a4d3151cc7288--1ae0d800ac484d1a90369c85c500d766 0246ba46d9c54b2cab51fc0d4e59ff89 1ae0d800ac484d1a90369c85c500d766--0246ba46d9c54b2cab51fc0d4e59ff89 177f101a49874d93a866c1c6304d75ac 0246ba46d9c54b2cab51fc0d4e59ff89--177f101a49874d93a866c1c6304d75ac 694dd29be28849d5bc46be4d3c4b1265 X 177f101a49874d93a866c1c6304d75ac--694dd29be28849d5bc46be4d3c4b1265 694dd29be28849d5bc46be4d3c4b1265--b825c1478fd549d2ae330fb0cf0c3d8d a2202a1a8fc34fe88cede167c18163d3 RZ(-1.0*g0) 694dd29be28849d5bc46be4d3c4b1265--a2202a1a8fc34fe88cede167c18163d3 6bd554f845bb4ef7af89e4fbe08d2e91 X a2202a1a8fc34fe88cede167c18163d3--6bd554f845bb4ef7af89e4fbe08d2e91 6bd554f845bb4ef7af89e4fbe08d2e91--7390b07d7b194885bca8d6bc5e695ecd 39766d7edaf844e797648f2e5a4ad045 6bd554f845bb4ef7af89e4fbe08d2e91--39766d7edaf844e797648f2e5a4ad045 7bfa92cc71d74069ab116768ea662635 X 39766d7edaf844e797648f2e5a4ad045--7bfa92cc71d74069ab116768ea662635 7bfa92cc71d74069ab116768ea662635--e191800aa93141e0a4b3ff13f047156e de12e283cef34974804be6fc402d66c5 RZ(-1.0*g0) 7bfa92cc71d74069ab116768ea662635--de12e283cef34974804be6fc402d66c5 e62db1b595ed4ce5858d2148c185d494 X de12e283cef34974804be6fc402d66c5--e62db1b595ed4ce5858d2148c185d494 e62db1b595ed4ce5858d2148c185d494--5206f2b5a29d4e29b6fe7839c95fd19a 7a63cc5a577c46bca5868e62c539cacd X e62db1b595ed4ce5858d2148c185d494--7a63cc5a577c46bca5868e62c539cacd 7a63cc5a577c46bca5868e62c539cacd--6d7719485b7244e4a6eb329f7400e0f3 004f51f0255a47e8a81875e362f93ed4 7a63cc5a577c46bca5868e62c539cacd--004f51f0255a47e8a81875e362f93ed4 31ac55a60b1643b8b495f0c145b6d4ee 004f51f0255a47e8a81875e362f93ed4--31ac55a60b1643b8b495f0c145b6d4ee 7f3c9470aa064e1a9d471c197c86ae52 31ac55a60b1643b8b495f0c145b6d4ee--7f3c9470aa064e1a9d471c197c86ae52 52a8cd9861164f66ab3c93eaff53e4c8 X 7f3c9470aa064e1a9d471c197c86ae52--52a8cd9861164f66ab3c93eaff53e4c8 52a8cd9861164f66ab3c93eaff53e4c8--e3e883e354a849e8b4a55e5bd390d219 79e02ad8737b4e1b871676ced6ed9be7 RX(b06) 52a8cd9861164f66ab3c93eaff53e4c8--79e02ad8737b4e1b871676ced6ed9be7 1779f9da162944678a283c6b32d1b04c 79e02ad8737b4e1b871676ced6ed9be7--1779f9da162944678a283c6b32d1b04c 14a3ba39bddb46c887a7e274f5b0a4fa 1779f9da162944678a283c6b32d1b04c--14a3ba39bddb46c887a7e274f5b0a4fa a4ca94c2c8f24ac5a698633151eb34cc 14a3ba39bddb46c887a7e274f5b0a4fa--a4ca94c2c8f24ac5a698633151eb34cc 2f23544201b5459b9527a4cd36fea111 a4ca94c2c8f24ac5a698633151eb34cc--2f23544201b5459b9527a4cd36fea111 0227f1c66fe54a5a94b01b714dc1752f 2f23544201b5459b9527a4cd36fea111--0227f1c66fe54a5a94b01b714dc1752f 56f4851f7b4b42d389db97e8c46b7e86 X 0227f1c66fe54a5a94b01b714dc1752f--56f4851f7b4b42d389db97e8c46b7e86 56f4851f7b4b42d389db97e8c46b7e86--77a3c016506a44f086661ec579a75b74 1ce2ffb57d7045a5bb31e0b245eb7e7e 56f4851f7b4b42d389db97e8c46b7e86--1ce2ffb57d7045a5bb31e0b245eb7e7e 73efea8555984374b2a580e03fe88078 1ce2ffb57d7045a5bb31e0b245eb7e7e--73efea8555984374b2a580e03fe88078 5e86ac214af049adb2c557ebcc48cbdc 73efea8555984374b2a580e03fe88078--5e86ac214af049adb2c557ebcc48cbdc a52f164c1dce4eb9b3712c7bacab3b3c X 5e86ac214af049adb2c557ebcc48cbdc--a52f164c1dce4eb9b3712c7bacab3b3c a52f164c1dce4eb9b3712c7bacab3b3c--8a81b78afcdc45f49f3b7cfb015f23af a7b9ce2a4cf54920b8b94e0bd4519b97 a52f164c1dce4eb9b3712c7bacab3b3c--a7b9ce2a4cf54920b8b94e0bd4519b97 3a625a66ff1d48e9878d644fe4b5ae48 a7b9ce2a4cf54920b8b94e0bd4519b97--3a625a66ff1d48e9878d644fe4b5ae48 5587a66d72d041dab957b280355bfba7 3a625a66ff1d48e9878d644fe4b5ae48--5587a66d72d041dab957b280355bfba7 c6ee35e79638475faedeba1f08079723 5587a66d72d041dab957b280355bfba7--c6ee35e79638475faedeba1f08079723 fe92def7f9524af9a47121b000412f77 c6ee35e79638475faedeba1f08079723--fe92def7f9524af9a47121b000412f77 cda1c988082b49efbb52bd472dd7b870 fe92def7f9524af9a47121b000412f77--cda1c988082b49efbb52bd472dd7b870 032c529e04fc43a79b611aef4ecb934e cda1c988082b49efbb52bd472dd7b870--032c529e04fc43a79b611aef4ecb934e 0cf7d050506c44f0a89291059525a980 032c529e04fc43a79b611aef4ecb934e--0cf7d050506c44f0a89291059525a980 e53c307a9c2d4f879d7e333eeb698d35 0cf7d050506c44f0a89291059525a980--e53c307a9c2d4f879d7e333eeb698d35 9b19d5c104e4457ababd4ab065cf9f8d e53c307a9c2d4f879d7e333eeb698d35--9b19d5c104e4457ababd4ab065cf9f8d c9d6faf840f64235804bc9016e78a882 9b19d5c104e4457ababd4ab065cf9f8d--c9d6faf840f64235804bc9016e78a882 1180ead754f74980854623bd40368dc5 c9d6faf840f64235804bc9016e78a882--1180ead754f74980854623bd40368dc5 e726f608c0b04166ae88f2945e18bd2e 1180ead754f74980854623bd40368dc5--e726f608c0b04166ae88f2945e18bd2e 6f9cd4184bb04942b30c9119fa42285e e726f608c0b04166ae88f2945e18bd2e--6f9cd4184bb04942b30c9119fa42285e 6013177b342c46158f4332d1bea6195d 6f9cd4184bb04942b30c9119fa42285e--6013177b342c46158f4332d1bea6195d 553b517aabb4450ca038a3244d151d00 6013177b342c46158f4332d1bea6195d--553b517aabb4450ca038a3244d151d00 eed5b89119d749e28cfcbd51ebea08f7 553b517aabb4450ca038a3244d151d00--eed5b89119d749e28cfcbd51ebea08f7 976233e32a1b45f7b6e8b7edf7030b64 eed5b89119d749e28cfcbd51ebea08f7--976233e32a1b45f7b6e8b7edf7030b64 d4b1751fcbf947fa976d5dfb8ee8ad5d 976233e32a1b45f7b6e8b7edf7030b64--d4b1751fcbf947fa976d5dfb8ee8ad5d 60635592c5d149388ab52feb84b12de6 d4b1751fcbf947fa976d5dfb8ee8ad5d--60635592c5d149388ab52feb84b12de6 4f9ffe6254854b0c8dc75124a1182c54 60635592c5d149388ab52feb84b12de6--4f9ffe6254854b0c8dc75124a1182c54 a1ad470859f040daa27919ca9ec419c9 4f9ffe6254854b0c8dc75124a1182c54--a1ad470859f040daa27919ca9ec419c9 4add0054a1bf4373939ab30168a505d9 a1ad470859f040daa27919ca9ec419c9--4add0054a1bf4373939ab30168a505d9 e023f52aed9140fc8fe67c816bc277bb 4add0054a1bf4373939ab30168a505d9--e023f52aed9140fc8fe67c816bc277bb e9648b68334f499492a2d1c563565923 e023f52aed9140fc8fe67c816bc277bb--e9648b68334f499492a2d1c563565923 07e54cb8686b4ebd8f1e83456e4d5740 e9648b68334f499492a2d1c563565923--07e54cb8686b4ebd8f1e83456e4d5740 d6476587cfa14dbb84f94bf870d7e8d5 07e54cb8686b4ebd8f1e83456e4d5740--d6476587cfa14dbb84f94bf870d7e8d5 44976a1b877049b389a13a7dda5eacdf d6476587cfa14dbb84f94bf870d7e8d5--44976a1b877049b389a13a7dda5eacdf 18bed73a91ca4435964e8a13d7814497 44976a1b877049b389a13a7dda5eacdf--18bed73a91ca4435964e8a13d7814497 b86d98be405d4172933b86ba4ee3fd24 18bed73a91ca4435964e8a13d7814497--b86d98be405d4172933b86ba4ee3fd24 80b28ffc903e41859483f407c44ee862 b86d98be405d4172933b86ba4ee3fd24--80b28ffc903e41859483f407c44ee862 c54357484c3a4d0d9d5a5581519e3f8d 80b28ffc903e41859483f407c44ee862--c54357484c3a4d0d9d5a5581519e3f8d 5580ccd145454b93aa2f819be9c34599 c54357484c3a4d0d9d5a5581519e3f8d--5580ccd145454b93aa2f819be9c34599 aa113b9ff9094f96becf5dda539753fa X 5580ccd145454b93aa2f819be9c34599--aa113b9ff9094f96becf5dda539753fa aa113b9ff9094f96becf5dda539753fa--559847f87398406db7e579b643060e8e 53ff7cd7cb84441e8986fbb2f8e489f3 RZ(-1.0*g1) aa113b9ff9094f96becf5dda539753fa--53ff7cd7cb84441e8986fbb2f8e489f3 e7bbc23a198f4dcbbe92ff3933b48b3a X 53ff7cd7cb84441e8986fbb2f8e489f3--e7bbc23a198f4dcbbe92ff3933b48b3a e7bbc23a198f4dcbbe92ff3933b48b3a--3455117c33bc4f5a802cc89521390104 242f8c4252fd43d6a9a11a8062d171e8 e7bbc23a198f4dcbbe92ff3933b48b3a--242f8c4252fd43d6a9a11a8062d171e8 e1ddc8ed7dc642eb99ea1c5e609ce01a 242f8c4252fd43d6a9a11a8062d171e8--e1ddc8ed7dc642eb99ea1c5e609ce01a d17450bcffc84262b66df1de136cd1b0 e1ddc8ed7dc642eb99ea1c5e609ce01a--d17450bcffc84262b66df1de136cd1b0 e4ac41ad1a634bb59162b0c60879e3bd d17450bcffc84262b66df1de136cd1b0--e4ac41ad1a634bb59162b0c60879e3bd 8a40be2480ed42fe943facd67eb18841 e4ac41ad1a634bb59162b0c60879e3bd--8a40be2480ed42fe943facd67eb18841 6e5747ad4de64ce7a3ece7e5b4385fa3 8a40be2480ed42fe943facd67eb18841--6e5747ad4de64ce7a3ece7e5b4385fa3 0dcf1c36ccf845818d866064255bb6ee 6e5747ad4de64ce7a3ece7e5b4385fa3--0dcf1c36ccf845818d866064255bb6ee 8c2a2e0c7d6f4bb68a11682c364d0e6b 0dcf1c36ccf845818d866064255bb6ee--8c2a2e0c7d6f4bb68a11682c364d0e6b 04bea80640cf4e4a9c0b15737c0759a5 8c2a2e0c7d6f4bb68a11682c364d0e6b--04bea80640cf4e4a9c0b15737c0759a5 ef20db5961b84be281e237d7e0961bd3 04bea80640cf4e4a9c0b15737c0759a5--ef20db5961b84be281e237d7e0961bd3 d0f2f67ef3ef421aafd98354ef9550e6 X ef20db5961b84be281e237d7e0961bd3--d0f2f67ef3ef421aafd98354ef9550e6 d0f2f67ef3ef421aafd98354ef9550e6--f0f8fb86ae1b470dbc54ed67596d3911 2dc044d6b900416c95bf0ebf5af80e13 d0f2f67ef3ef421aafd98354ef9550e6--2dc044d6b900416c95bf0ebf5af80e13 b3e6a71afb5443dfa676cdb163a98aeb 2dc044d6b900416c95bf0ebf5af80e13--b3e6a71afb5443dfa676cdb163a98aeb 2dc4b3440ec347b1bf21efae91df256a b3e6a71afb5443dfa676cdb163a98aeb--2dc4b3440ec347b1bf21efae91df256a cd4c1add728f4ef8824747b765fd569f X 2dc4b3440ec347b1bf21efae91df256a--cd4c1add728f4ef8824747b765fd569f cd4c1add728f4ef8824747b765fd569f--a9fe2bae955b4e53bbf158ab7262cac8 ea8b36c7895c42d486cd60b50f9621b0 cd4c1add728f4ef8824747b765fd569f--ea8b36c7895c42d486cd60b50f9621b0 92ec12e8d21640ba903a2516f78cb556 ea8b36c7895c42d486cd60b50f9621b0--92ec12e8d21640ba903a2516f78cb556 45e46da33b2a4f328fb7f30a16036510 92ec12e8d21640ba903a2516f78cb556--45e46da33b2a4f328fb7f30a16036510 040c3764df78427888c6a6c83d46b587 45e46da33b2a4f328fb7f30a16036510--040c3764df78427888c6a6c83d46b587 ba3370c8f50345ba81b83160a0bb6fc6 040c3764df78427888c6a6c83d46b587--ba3370c8f50345ba81b83160a0bb6fc6 80771c03e4ff43c0b0f5ab69da6ce6fb ba3370c8f50345ba81b83160a0bb6fc6--80771c03e4ff43c0b0f5ab69da6ce6fb 6207e91283c543b181957d46d6991e54 80771c03e4ff43c0b0f5ab69da6ce6fb--6207e91283c543b181957d46d6991e54 48edb6407dab4060948c1cd812aa2b57 6207e91283c543b181957d46d6991e54--48edb6407dab4060948c1cd812aa2b57 f99f92ad3efb49f39b5e858dd44878e9 48edb6407dab4060948c1cd812aa2b57--f99f92ad3efb49f39b5e858dd44878e9 a7710e42c99945b29bd37af7bba51af3 f99f92ad3efb49f39b5e858dd44878e9--a7710e42c99945b29bd37af7bba51af3 85e575f003624312939ba59ea771ad81 a7710e42c99945b29bd37af7bba51af3--85e575f003624312939ba59ea771ad81 eccd424183ee45d5bcc3492a50e38a82 85e575f003624312939ba59ea771ad81--eccd424183ee45d5bcc3492a50e38a82 7fa068af2a1b4ca6ac20ff0f8b32c709 eccd424183ee45d5bcc3492a50e38a82--7fa068af2a1b4ca6ac20ff0f8b32c709 e9e39e9eda0f4adb8a9e2c336cbc38d4 7fa068af2a1b4ca6ac20ff0f8b32c709--e9e39e9eda0f4adb8a9e2c336cbc38d4 3da9c1c528bc4656a7a347a3af0b57bd X e9e39e9eda0f4adb8a9e2c336cbc38d4--3da9c1c528bc4656a7a347a3af0b57bd 3da9c1c528bc4656a7a347a3af0b57bd--ee29371edafb44799ddbbb2bf65b9259 23e933e76d9546f08ac97ab5524fd5e3 RZ(-1.0*g1) 3da9c1c528bc4656a7a347a3af0b57bd--23e933e76d9546f08ac97ab5524fd5e3 91301b87a1cb4f8585da36abc373e44d X 23e933e76d9546f08ac97ab5524fd5e3--91301b87a1cb4f8585da36abc373e44d 91301b87a1cb4f8585da36abc373e44d--86af0a1192374def8143a1306a473b3e ce4ede42fb4544fa9121106578e773f7 91301b87a1cb4f8585da36abc373e44d--ce4ede42fb4544fa9121106578e773f7 e395bca6af1848f68c49f08939c873a3 ce4ede42fb4544fa9121106578e773f7--e395bca6af1848f68c49f08939c873a3 7afe1e3add1b407a9fdc303f1410c356 e395bca6af1848f68c49f08939c873a3--7afe1e3add1b407a9fdc303f1410c356 be1d12978e304f76928e29b961697817 7afe1e3add1b407a9fdc303f1410c356--be1d12978e304f76928e29b961697817 6133d5934c854806bfab893b74f093ac be1d12978e304f76928e29b961697817--6133d5934c854806bfab893b74f093ac 7b733f31b4a44688ae452d2b3e452ee5 6133d5934c854806bfab893b74f093ac--7b733f31b4a44688ae452d2b3e452ee5 12392296ee6d4716bccb6de7008dc330 7b733f31b4a44688ae452d2b3e452ee5--12392296ee6d4716bccb6de7008dc330 9833a3161efa481bbf9bf5f18a465e87 12392296ee6d4716bccb6de7008dc330--9833a3161efa481bbf9bf5f18a465e87 860d4a48665b40b5a8f9a6dbc935b1f6 9833a3161efa481bbf9bf5f18a465e87--860d4a48665b40b5a8f9a6dbc935b1f6 030d61295ad6450397c57dfa75f1780a 860d4a48665b40b5a8f9a6dbc935b1f6--030d61295ad6450397c57dfa75f1780a acbb00ad81944e46905d6003b9668adb 030d61295ad6450397c57dfa75f1780a--acbb00ad81944e46905d6003b9668adb 808e3ebc46de431ebc42631ee04c7f41 acbb00ad81944e46905d6003b9668adb--808e3ebc46de431ebc42631ee04c7f41 61b58fc075d24e06811e650896bd0ac7 808e3ebc46de431ebc42631ee04c7f41--61b58fc075d24e06811e650896bd0ac7 6c38274b734246fbae5283f0c83cadc4 61b58fc075d24e06811e650896bd0ac7--6c38274b734246fbae5283f0c83cadc4 d536d6c483c2426385938e3d90612561 X 6c38274b734246fbae5283f0c83cadc4--d536d6c483c2426385938e3d90612561 d536d6c483c2426385938e3d90612561--652117a84a464162bde9294cd55415c0 5d53aaeda1f4405384a062ae60c3e0c2 RZ(-1.0*g1) d536d6c483c2426385938e3d90612561--5d53aaeda1f4405384a062ae60c3e0c2 465dff48e482486787978894ac323d01 X 5d53aaeda1f4405384a062ae60c3e0c2--465dff48e482486787978894ac323d01 465dff48e482486787978894ac323d01--21c6641dfad54a308aa4d582855d6052 61641e7c89e146c1bbe15e0a09a7fd8d 465dff48e482486787978894ac323d01--61641e7c89e146c1bbe15e0a09a7fd8d f9ebb99a0eac41fa9ee386e079e9870e 61641e7c89e146c1bbe15e0a09a7fd8d--f9ebb99a0eac41fa9ee386e079e9870e 159e6b0d62af48e39a578e75ef9c08ac f9ebb99a0eac41fa9ee386e079e9870e--159e6b0d62af48e39a578e75ef9c08ac a8f690b622074306b0f1608b1e8ad104 159e6b0d62af48e39a578e75ef9c08ac--a8f690b622074306b0f1608b1e8ad104 5ada44b489894b4a8bd37a00299a2a30 a8f690b622074306b0f1608b1e8ad104--5ada44b489894b4a8bd37a00299a2a30 7c655a597b754a39ba614f9519df9343 5ada44b489894b4a8bd37a00299a2a30--7c655a597b754a39ba614f9519df9343 466356d6fe5b498b94067283805fa1b9 X 7c655a597b754a39ba614f9519df9343--466356d6fe5b498b94067283805fa1b9 466356d6fe5b498b94067283805fa1b9--07dc9867288e4adf99a88934f71784cf f260466663c5468dab0b2e19594d003e 466356d6fe5b498b94067283805fa1b9--f260466663c5468dab0b2e19594d003e be34df7b45104bc1bf3782f3af2ec992 f260466663c5468dab0b2e19594d003e--be34df7b45104bc1bf3782f3af2ec992 d38fe972d2674afb9163c5d3a70651b7 be34df7b45104bc1bf3782f3af2ec992--d38fe972d2674afb9163c5d3a70651b7 1af77dda655944708b8f72f4e9d4ed30 X d38fe972d2674afb9163c5d3a70651b7--1af77dda655944708b8f72f4e9d4ed30 1af77dda655944708b8f72f4e9d4ed30--e0dd4197a2c24b94988ee8fef52937b7 5723800446b24815b6a717fcc578f980 1af77dda655944708b8f72f4e9d4ed30--5723800446b24815b6a717fcc578f980 b03185898d124328909e610e786b0831 5723800446b24815b6a717fcc578f980--b03185898d124328909e610e786b0831 6de9b7326e214c68a939292bb0cffcd5 b03185898d124328909e610e786b0831--6de9b7326e214c68a939292bb0cffcd5 b3779cce27214641aaba71f04a7c22b9 6de9b7326e214c68a939292bb0cffcd5--b3779cce27214641aaba71f04a7c22b9 94c7a4a25964471299f2ae5768ee5bde b3779cce27214641aaba71f04a7c22b9--94c7a4a25964471299f2ae5768ee5bde d9cd23977dc84418bddf1545a4861a8e 94c7a4a25964471299f2ae5768ee5bde--d9cd23977dc84418bddf1545a4861a8e 1cd1b06d955c4e889f4cd9176800f64f d9cd23977dc84418bddf1545a4861a8e--1cd1b06d955c4e889f4cd9176800f64f 115b71e6e5994dbab753624d31bb8e32 1cd1b06d955c4e889f4cd9176800f64f--115b71e6e5994dbab753624d31bb8e32 3671d8f3a7004be8913bf6c29dbd230a 115b71e6e5994dbab753624d31bb8e32--3671d8f3a7004be8913bf6c29dbd230a 8b137b98b8114b4785403a89c86e5408 3671d8f3a7004be8913bf6c29dbd230a--8b137b98b8114b4785403a89c86e5408 347670d47ad044aea207d324aef8d855 8b137b98b8114b4785403a89c86e5408--347670d47ad044aea207d324aef8d855 492367e01a0647a8a93a5ca8d8b55cd3 347670d47ad044aea207d324aef8d855--492367e01a0647a8a93a5ca8d8b55cd3 c8af0be6ac634dc5bbe81cd4cba0930f 492367e01a0647a8a93a5ca8d8b55cd3--c8af0be6ac634dc5bbe81cd4cba0930f f98fc7cfc17b415fa89a14d83d1894d9 X c8af0be6ac634dc5bbe81cd4cba0930f--f98fc7cfc17b415fa89a14d83d1894d9 f98fc7cfc17b415fa89a14d83d1894d9--e7880ee13d004f1687630ebf49c6a24b 231954456a284ccebb806a3eafdeaa95 RZ(-1.0*g1) f98fc7cfc17b415fa89a14d83d1894d9--231954456a284ccebb806a3eafdeaa95 e0062a4c2c544e86a9abb90102322f16 X 231954456a284ccebb806a3eafdeaa95--e0062a4c2c544e86a9abb90102322f16 e0062a4c2c544e86a9abb90102322f16--a33991a9463c499db7b365f21ed1347a f8cf58b48e76439fbab7a39bf2791585 e0062a4c2c544e86a9abb90102322f16--f8cf58b48e76439fbab7a39bf2791585 2700b320272044ed938033a53892ebab f8cf58b48e76439fbab7a39bf2791585--2700b320272044ed938033a53892ebab 741ad37b976a4436819c0f347b197612 2700b320272044ed938033a53892ebab--741ad37b976a4436819c0f347b197612 530b682cb0c54fc7bab1466e83d0203c X 741ad37b976a4436819c0f347b197612--530b682cb0c54fc7bab1466e83d0203c 530b682cb0c54fc7bab1466e83d0203c--c515c1d69d61496b9d4d7596ac351951 4b57c9d0e6174df2860f94e6f92b3ee7 RZ(-1.0*g1) 530b682cb0c54fc7bab1466e83d0203c--4b57c9d0e6174df2860f94e6f92b3ee7 ec5439bea905449682ca72166c8cdff6 X 4b57c9d0e6174df2860f94e6f92b3ee7--ec5439bea905449682ca72166c8cdff6 ec5439bea905449682ca72166c8cdff6--7a3d2c2a76e449a48f4c31c02448e502 bb73036a4b044ad7a083f8929a4c3d31 ec5439bea905449682ca72166c8cdff6--bb73036a4b044ad7a083f8929a4c3d31 723f78c262b94c1293c3fd61c919c205 X bb73036a4b044ad7a083f8929a4c3d31--723f78c262b94c1293c3fd61c919c205 723f78c262b94c1293c3fd61c919c205--9df219d09850492394df2ec48f66abd5 fa5003a9a87f45b7b55e118d3a03768a RZ(-1.0*g1) 723f78c262b94c1293c3fd61c919c205--fa5003a9a87f45b7b55e118d3a03768a 00f30c976e9c4707b6957aed18de7840 X fa5003a9a87f45b7b55e118d3a03768a--00f30c976e9c4707b6957aed18de7840 00f30c976e9c4707b6957aed18de7840--0180b2ba2faf40d4b2305e271ffc785f f7ddf168121a4258ba92c17b35653bef X 00f30c976e9c4707b6957aed18de7840--f7ddf168121a4258ba92c17b35653bef f7ddf168121a4258ba92c17b35653bef--f1b6b9d8cec94f5f89f67c2de938b94f bdf1b14ac2024d59ae914735b376db57 f7ddf168121a4258ba92c17b35653bef--bdf1b14ac2024d59ae914735b376db57 434d6d65f0eb4521b3fa290d70fda04b bdf1b14ac2024d59ae914735b376db57--434d6d65f0eb4521b3fa290d70fda04b 0c2ac4a91cb24998a840922c5622a9fa 434d6d65f0eb4521b3fa290d70fda04b--0c2ac4a91cb24998a840922c5622a9fa 9810d261958146b5bc868579a12504e7 X 0c2ac4a91cb24998a840922c5622a9fa--9810d261958146b5bc868579a12504e7 9810d261958146b5bc868579a12504e7--2d263371cf224be5acc250893ac30a0f 5f5fb4a1593348d08850ec40043f7c20 RX(b16) 9810d261958146b5bc868579a12504e7--5f5fb4a1593348d08850ec40043f7c20 5f5fb4a1593348d08850ec40043f7c20--de88ae729fa642c3966ae705003561a7 530b9ae95346424cafc6e0bbb0850b97 40452f7fa106424baecc09b7272f096d ceaedfeff90c420fbd8d3c513c7fe35e--40452f7fa106424baecc09b7272f096d 1ed2bc01ef4344e89424e4daa9e58ced 40452f7fa106424baecc09b7272f096d--1ed2bc01ef4344e89424e4daa9e58ced b431e441de3848c981fd70625a119338 1ed2bc01ef4344e89424e4daa9e58ced--b431e441de3848c981fd70625a119338 a8462ee7b40c4180a4f4062e103a36e5 b431e441de3848c981fd70625a119338--a8462ee7b40c4180a4f4062e103a36e5 c497d5c862aa46fcae5179ade3b31f2f a8462ee7b40c4180a4f4062e103a36e5--c497d5c862aa46fcae5179ade3b31f2f f2527af4833148d48c2777c91e7d484e c497d5c862aa46fcae5179ade3b31f2f--f2527af4833148d48c2777c91e7d484e 2413ec1d334a448a8d97d0b13f8f8066 X f2527af4833148d48c2777c91e7d484e--2413ec1d334a448a8d97d0b13f8f8066 2413ec1d334a448a8d97d0b13f8f8066--fe231e6049ef424e86a7061ce5f4d81e 6de111419c85492cb385010645244490 RZ(1.0*g0) 2413ec1d334a448a8d97d0b13f8f8066--6de111419c85492cb385010645244490 275f31e8d67049e281f56358f568532f X 6de111419c85492cb385010645244490--275f31e8d67049e281f56358f568532f 275f31e8d67049e281f56358f568532f--6c1a9fb3b2ae4e63b2b4f9a36ac1da49 4155615e7a814b6db4b770badb0f4341 275f31e8d67049e281f56358f568532f--4155615e7a814b6db4b770badb0f4341 bf100ddd980145cb891da51399de04a8 4155615e7a814b6db4b770badb0f4341--bf100ddd980145cb891da51399de04a8 c719b818dca548608fcc7f90566f5569 bf100ddd980145cb891da51399de04a8--c719b818dca548608fcc7f90566f5569 673e22f552a44cebada92ec667fefd2b c719b818dca548608fcc7f90566f5569--673e22f552a44cebada92ec667fefd2b 184e10212ccd4f858b12c8e76e35bce9 673e22f552a44cebada92ec667fefd2b--184e10212ccd4f858b12c8e76e35bce9 525b248965f746628afd77f9d96d5a9f 184e10212ccd4f858b12c8e76e35bce9--525b248965f746628afd77f9d96d5a9f cce504a037084b9da454fd011ad1cd71 525b248965f746628afd77f9d96d5a9f--cce504a037084b9da454fd011ad1cd71 16eea8075d9b4693930f6a7cd16fd974 cce504a037084b9da454fd011ad1cd71--16eea8075d9b4693930f6a7cd16fd974 2108a13341684806a065cf406ac6e1c2 16eea8075d9b4693930f6a7cd16fd974--2108a13341684806a065cf406ac6e1c2 57debcbe4cdc4db2bb61143a417e843f 2108a13341684806a065cf406ac6e1c2--57debcbe4cdc4db2bb61143a417e843f 9f9bcc426fb141cea463da0fb475a452 57debcbe4cdc4db2bb61143a417e843f--9f9bcc426fb141cea463da0fb475a452 e630d1543a244dc695ee452364f92907 9f9bcc426fb141cea463da0fb475a452--e630d1543a244dc695ee452364f92907 94377a93a1b14f59b8b578a58838cad2 e630d1543a244dc695ee452364f92907--94377a93a1b14f59b8b578a58838cad2 be7a75e07e3244db8a206b562dd6d392 94377a93a1b14f59b8b578a58838cad2--be7a75e07e3244db8a206b562dd6d392 d9dcec3ed0064cef904711ef930d1a9f be7a75e07e3244db8a206b562dd6d392--d9dcec3ed0064cef904711ef930d1a9f 24affaf18f604ee7af96d6bb8a9125be d9dcec3ed0064cef904711ef930d1a9f--24affaf18f604ee7af96d6bb8a9125be a42f2b98806a4d32b21d14fb5e827f31 24affaf18f604ee7af96d6bb8a9125be--a42f2b98806a4d32b21d14fb5e827f31 9bf2632ec01a40769ee50f8ddd9a357c a42f2b98806a4d32b21d14fb5e827f31--9bf2632ec01a40769ee50f8ddd9a357c 050c52bc612b480997f73f99153c5156 9bf2632ec01a40769ee50f8ddd9a357c--050c52bc612b480997f73f99153c5156 8c5c1c820e3f4e2e8bd6ef732bce0841 050c52bc612b480997f73f99153c5156--8c5c1c820e3f4e2e8bd6ef732bce0841 9a9ae3fe54af4d1fb724e7dbb73c52cc 8c5c1c820e3f4e2e8bd6ef732bce0841--9a9ae3fe54af4d1fb724e7dbb73c52cc 1f6dbdf57b0c45e9af23a68996782cdc 9a9ae3fe54af4d1fb724e7dbb73c52cc--1f6dbdf57b0c45e9af23a68996782cdc 1c4f75c7c9b646e3afe8e819bf933fe0 1f6dbdf57b0c45e9af23a68996782cdc--1c4f75c7c9b646e3afe8e819bf933fe0 535590fa06d54c9b881079c51c5272e5 1c4f75c7c9b646e3afe8e819bf933fe0--535590fa06d54c9b881079c51c5272e5 7848ca26fc5c47578973a029dfc9f6f0 535590fa06d54c9b881079c51c5272e5--7848ca26fc5c47578973a029dfc9f6f0 d5e43248f84c42008715fa900216bb06 7848ca26fc5c47578973a029dfc9f6f0--d5e43248f84c42008715fa900216bb06 4006e4aa4a1943d982e866ef1d52257c d5e43248f84c42008715fa900216bb06--4006e4aa4a1943d982e866ef1d52257c 48529f55c2d4453683ee28f982cd49fe 4006e4aa4a1943d982e866ef1d52257c--48529f55c2d4453683ee28f982cd49fe 33bb90ef1c4946278916d488354ad768 48529f55c2d4453683ee28f982cd49fe--33bb90ef1c4946278916d488354ad768 e97f35e94f6c47dea8d223e4d2e9774c 33bb90ef1c4946278916d488354ad768--e97f35e94f6c47dea8d223e4d2e9774c d45e2176887142a1b47d1116b1720a3d e97f35e94f6c47dea8d223e4d2e9774c--d45e2176887142a1b47d1116b1720a3d 4911e68b2981414caf6d61a8bdf0486c d45e2176887142a1b47d1116b1720a3d--4911e68b2981414caf6d61a8bdf0486c 6e7c5486b8ac4d849d9629475fe1c7fe 4911e68b2981414caf6d61a8bdf0486c--6e7c5486b8ac4d849d9629475fe1c7fe 0ea291523ab14210a90b84ff9d05ed35 6e7c5486b8ac4d849d9629475fe1c7fe--0ea291523ab14210a90b84ff9d05ed35 2340e0ddc5124eecafc08f7b3732cc11 0ea291523ab14210a90b84ff9d05ed35--2340e0ddc5124eecafc08f7b3732cc11 4bbb5e23d990494aab490d7d97d57b25 2340e0ddc5124eecafc08f7b3732cc11--4bbb5e23d990494aab490d7d97d57b25 06c8a4e947984b55853529293e45e6fa 4bbb5e23d990494aab490d7d97d57b25--06c8a4e947984b55853529293e45e6fa 74a83b16361b441c80b49e4331961db9 06c8a4e947984b55853529293e45e6fa--74a83b16361b441c80b49e4331961db9 d5b5c3140e2e4502b5d56ef9d7ac0c12 74a83b16361b441c80b49e4331961db9--d5b5c3140e2e4502b5d56ef9d7ac0c12 6f3b4c6f696f4ca29016e5a338f1655b d5b5c3140e2e4502b5d56ef9d7ac0c12--6f3b4c6f696f4ca29016e5a338f1655b 6f7011570be24f609872b4ed9d3d57f4 6f3b4c6f696f4ca29016e5a338f1655b--6f7011570be24f609872b4ed9d3d57f4 24e53ea4caed464196c4ac8f6f8f4d62 6f7011570be24f609872b4ed9d3d57f4--24e53ea4caed464196c4ac8f6f8f4d62 402947ee667145c7b6f1e83013c91005 24e53ea4caed464196c4ac8f6f8f4d62--402947ee667145c7b6f1e83013c91005 5995280e720d4f38a72582dc326b3758 402947ee667145c7b6f1e83013c91005--5995280e720d4f38a72582dc326b3758 fbe4995f82cf4b03ab1bf0d5a9bb8871 5995280e720d4f38a72582dc326b3758--fbe4995f82cf4b03ab1bf0d5a9bb8871 1ead7048558640819a5e456b6f9249f8 fbe4995f82cf4b03ab1bf0d5a9bb8871--1ead7048558640819a5e456b6f9249f8 ff81a2b8814a46fd8debccb761aca163 1ead7048558640819a5e456b6f9249f8--ff81a2b8814a46fd8debccb761aca163 f5a3d71857f94a92adf304ace14add0f ff81a2b8814a46fd8debccb761aca163--f5a3d71857f94a92adf304ace14add0f 35784d5fd4aa4ea693f3bb9b524b867d X f5a3d71857f94a92adf304ace14add0f--35784d5fd4aa4ea693f3bb9b524b867d 35784d5fd4aa4ea693f3bb9b524b867d--ae7ee05392bc4ddb803b55f9befdcf62 730aedd084fb4e6d80d5b1d5ba15f382 RZ(-1.0*g0) 35784d5fd4aa4ea693f3bb9b524b867d--730aedd084fb4e6d80d5b1d5ba15f382 20580fe57d284d14955349d4a0808aeb X 730aedd084fb4e6d80d5b1d5ba15f382--20580fe57d284d14955349d4a0808aeb 20580fe57d284d14955349d4a0808aeb--bd8f17fc42c54d2a847c9677680198cd f298194ce8dd460eaefbe5ceca392397 20580fe57d284d14955349d4a0808aeb--f298194ce8dd460eaefbe5ceca392397 d9dadb5f95c24dc0a957a66562214255 f298194ce8dd460eaefbe5ceca392397--d9dadb5f95c24dc0a957a66562214255 d2a20b3854874815ad2792cc5421c3b0 d9dadb5f95c24dc0a957a66562214255--d2a20b3854874815ad2792cc5421c3b0 a0078301ae00469486883ccc5360d3fd d2a20b3854874815ad2792cc5421c3b0--a0078301ae00469486883ccc5360d3fd fb2dc60eff18454ea9f551f432722e1d a0078301ae00469486883ccc5360d3fd--fb2dc60eff18454ea9f551f432722e1d 5894742bc23147a19ba91780e4162395 fb2dc60eff18454ea9f551f432722e1d--5894742bc23147a19ba91780e4162395 8a17ab9940804dc2a3220248435c53fc 5894742bc23147a19ba91780e4162395--8a17ab9940804dc2a3220248435c53fc e313ba4fe7b643cfbed357b4dca6a46d 8a17ab9940804dc2a3220248435c53fc--e313ba4fe7b643cfbed357b4dca6a46d 719480da5d27414e8fc236cd09353192 e313ba4fe7b643cfbed357b4dca6a46d--719480da5d27414e8fc236cd09353192 ccaa93439ab543e2ba710fe274b60fbc 719480da5d27414e8fc236cd09353192--ccaa93439ab543e2ba710fe274b60fbc ffb81288ed5d4fd397a246e706995682 ccaa93439ab543e2ba710fe274b60fbc--ffb81288ed5d4fd397a246e706995682 6ad656ba86fe4f62b59b0b23e7b68efa ffb81288ed5d4fd397a246e706995682--6ad656ba86fe4f62b59b0b23e7b68efa d565daa7222240b4b021a4936c5105f3 6ad656ba86fe4f62b59b0b23e7b68efa--d565daa7222240b4b021a4936c5105f3 f9636a065c814a2ea7de7cafe29a0c25 d565daa7222240b4b021a4936c5105f3--f9636a065c814a2ea7de7cafe29a0c25 08b3ac049bd34bfb8cf5821518529f32 f9636a065c814a2ea7de7cafe29a0c25--08b3ac049bd34bfb8cf5821518529f32 9bdb2102df584f149d68a3f421630514 08b3ac049bd34bfb8cf5821518529f32--9bdb2102df584f149d68a3f421630514 ec8178fc0886467fbe69980112ed880e 9bdb2102df584f149d68a3f421630514--ec8178fc0886467fbe69980112ed880e fac2250e72394539bd9a503783b7d30d ec8178fc0886467fbe69980112ed880e--fac2250e72394539bd9a503783b7d30d 22b7354fcbda4867a4aba9783a982b18 fac2250e72394539bd9a503783b7d30d--22b7354fcbda4867a4aba9783a982b18 cfd5409c7406418c9885ea38097062af 22b7354fcbda4867a4aba9783a982b18--cfd5409c7406418c9885ea38097062af 2e3aa3cc76604e209b84beb17aada2d8 cfd5409c7406418c9885ea38097062af--2e3aa3cc76604e209b84beb17aada2d8 f1af315326564d9a9252af039e091946 2e3aa3cc76604e209b84beb17aada2d8--f1af315326564d9a9252af039e091946 fb5df19f97524c30bd98ed78c9a8ffbd f1af315326564d9a9252af039e091946--fb5df19f97524c30bd98ed78c9a8ffbd 66ab671c11bb49288bd0eba9264c46eb fb5df19f97524c30bd98ed78c9a8ffbd--66ab671c11bb49288bd0eba9264c46eb 8fe5e5e97e5d45cf9a200d1dc4fb2b0b 66ab671c11bb49288bd0eba9264c46eb--8fe5e5e97e5d45cf9a200d1dc4fb2b0b 0ff61a5ba0014e008b8a8fe5370e7984 8fe5e5e97e5d45cf9a200d1dc4fb2b0b--0ff61a5ba0014e008b8a8fe5370e7984 821a16a75d534c3ea7166c306c481d93 0ff61a5ba0014e008b8a8fe5370e7984--821a16a75d534c3ea7166c306c481d93 db157c4e3c994c88a0a14f94e4731114 821a16a75d534c3ea7166c306c481d93--db157c4e3c994c88a0a14f94e4731114 3615f71dc4624e28b69e671ef69471ef db157c4e3c994c88a0a14f94e4731114--3615f71dc4624e28b69e671ef69471ef 00a07ba6e86f401d922063725de1f696 3615f71dc4624e28b69e671ef69471ef--00a07ba6e86f401d922063725de1f696 70c7b5751cb34077801c2f221057fe34 00a07ba6e86f401d922063725de1f696--70c7b5751cb34077801c2f221057fe34 f0d3ffb3f5ba4fd381e9fb51107b4e9e 70c7b5751cb34077801c2f221057fe34--f0d3ffb3f5ba4fd381e9fb51107b4e9e f9cf97fb648d42ff94362ea8122452db f0d3ffb3f5ba4fd381e9fb51107b4e9e--f9cf97fb648d42ff94362ea8122452db 352a1ac60fef42ea8527a55516719994 f9cf97fb648d42ff94362ea8122452db--352a1ac60fef42ea8527a55516719994 3921693363044bb18c4fc0e842352f19 352a1ac60fef42ea8527a55516719994--3921693363044bb18c4fc0e842352f19 c18f861aacc24aa2872c30464ddf18bc 3921693363044bb18c4fc0e842352f19--c18f861aacc24aa2872c30464ddf18bc d8f9c95c26ff4cd4956c848e832b6481 c18f861aacc24aa2872c30464ddf18bc--d8f9c95c26ff4cd4956c848e832b6481 5decc998d1c24188856b9f187db84c83 d8f9c95c26ff4cd4956c848e832b6481--5decc998d1c24188856b9f187db84c83 7c833634e10c4ac09242cedb601919c9 5decc998d1c24188856b9f187db84c83--7c833634e10c4ac09242cedb601919c9 26c761d33dd640979a3ca4d8ea0f8a48 7c833634e10c4ac09242cedb601919c9--26c761d33dd640979a3ca4d8ea0f8a48 ebfab84ac2f24398ad0115d2403dc595 26c761d33dd640979a3ca4d8ea0f8a48--ebfab84ac2f24398ad0115d2403dc595 e2a97071a6a0461e94d9585fe37b3545 ebfab84ac2f24398ad0115d2403dc595--e2a97071a6a0461e94d9585fe37b3545 b9b28892c7bb4cabb345550608a44b90 X e2a97071a6a0461e94d9585fe37b3545--b9b28892c7bb4cabb345550608a44b90 b9b28892c7bb4cabb345550608a44b90--1beb9a2d6255491bb8cf9f8bd0881270 783dad60e64c4e87b71f82906d2088b3 RZ(-1.0*g0) b9b28892c7bb4cabb345550608a44b90--783dad60e64c4e87b71f82906d2088b3 0db2515448874a1e81cb05a5c301a4a9 X 783dad60e64c4e87b71f82906d2088b3--0db2515448874a1e81cb05a5c301a4a9 0db2515448874a1e81cb05a5c301a4a9--986f708ac71a4be0af55a9059d002b39 2db3ccafc5b541f9891eb14462c63686 0db2515448874a1e81cb05a5c301a4a9--2db3ccafc5b541f9891eb14462c63686 fe6fffa0ccf9461d891d54547f61b762 2db3ccafc5b541f9891eb14462c63686--fe6fffa0ccf9461d891d54547f61b762 e150d48425284b528d06862353c07ed2 fe6fffa0ccf9461d891d54547f61b762--e150d48425284b528d06862353c07ed2 a0b41a9973c043b29373afb80f4c8799 e150d48425284b528d06862353c07ed2--a0b41a9973c043b29373afb80f4c8799 1bc890d3125c48ab9e00118837a6dbdd a0b41a9973c043b29373afb80f4c8799--1bc890d3125c48ab9e00118837a6dbdd 5a32063a2af0430c9b0cadbb517a3932 1bc890d3125c48ab9e00118837a6dbdd--5a32063a2af0430c9b0cadbb517a3932 baf07d108a374592a482fb49d88e7ea2 5a32063a2af0430c9b0cadbb517a3932--baf07d108a374592a482fb49d88e7ea2 82a48b8911854795b807476d8414f827 baf07d108a374592a482fb49d88e7ea2--82a48b8911854795b807476d8414f827 da83c1d8c32f4632b5dcace165472744 82a48b8911854795b807476d8414f827--da83c1d8c32f4632b5dcace165472744 9131205c46fc49088285516421106dc4 da83c1d8c32f4632b5dcace165472744--9131205c46fc49088285516421106dc4 a223e06415354a7c92f9c5c9ee4ccf6d 9131205c46fc49088285516421106dc4--a223e06415354a7c92f9c5c9ee4ccf6d e44805e38bcd4bcaaab57e14f6545f7a a223e06415354a7c92f9c5c9ee4ccf6d--e44805e38bcd4bcaaab57e14f6545f7a 21393fec6599467aa75495258b82b49e e44805e38bcd4bcaaab57e14f6545f7a--21393fec6599467aa75495258b82b49e 649fe0d83ba94afdbba98d1e74421385 21393fec6599467aa75495258b82b49e--649fe0d83ba94afdbba98d1e74421385 046204f6b6ce4643bf79e2be27fe0440 649fe0d83ba94afdbba98d1e74421385--046204f6b6ce4643bf79e2be27fe0440 8d777f54b1f748338f6c6ae98bb7f45c 046204f6b6ce4643bf79e2be27fe0440--8d777f54b1f748338f6c6ae98bb7f45c fac7c84eb55640c0b232bfc10066a63f 8d777f54b1f748338f6c6ae98bb7f45c--fac7c84eb55640c0b232bfc10066a63f 6eb4210084784d0cb042aac89772d20f fac7c84eb55640c0b232bfc10066a63f--6eb4210084784d0cb042aac89772d20f 9c62533d01184b8495767e61288d16a7 6eb4210084784d0cb042aac89772d20f--9c62533d01184b8495767e61288d16a7 dd384473dc59496baf4f7528b076df98 9c62533d01184b8495767e61288d16a7--dd384473dc59496baf4f7528b076df98 bae70644a801434b8e9e3a5c2ed0eabb dd384473dc59496baf4f7528b076df98--bae70644a801434b8e9e3a5c2ed0eabb 5cb9d0182c3646c49fc7ba241b91f8f5 bae70644a801434b8e9e3a5c2ed0eabb--5cb9d0182c3646c49fc7ba241b91f8f5 2f5d16b30eb74c62a25bc362120e06e9 5cb9d0182c3646c49fc7ba241b91f8f5--2f5d16b30eb74c62a25bc362120e06e9 4c13c3409f944d90a3784337f37486c5 2f5d16b30eb74c62a25bc362120e06e9--4c13c3409f944d90a3784337f37486c5 daa5e50bdeea438b96c6502b4b01d19b 4c13c3409f944d90a3784337f37486c5--daa5e50bdeea438b96c6502b4b01d19b ef5c372a51ba446f94c08ae375baa61d daa5e50bdeea438b96c6502b4b01d19b--ef5c372a51ba446f94c08ae375baa61d 5f51f6ca4eb844409fda37875f9617b9 ef5c372a51ba446f94c08ae375baa61d--5f51f6ca4eb844409fda37875f9617b9 6637e9211cd8433e9a86c6223964e7e2 5f51f6ca4eb844409fda37875f9617b9--6637e9211cd8433e9a86c6223964e7e2 670e59dd50194bdc8e14791dd2f0b399 X 6637e9211cd8433e9a86c6223964e7e2--670e59dd50194bdc8e14791dd2f0b399 670e59dd50194bdc8e14791dd2f0b399--004f51f0255a47e8a81875e362f93ed4 639977af7dd342b29ed7cc25c16c28c6 RZ(-1.0*g0) 670e59dd50194bdc8e14791dd2f0b399--639977af7dd342b29ed7cc25c16c28c6 0ca0a6339beb430ca5420c56d85d939b X 639977af7dd342b29ed7cc25c16c28c6--0ca0a6339beb430ca5420c56d85d939b 0ca0a6339beb430ca5420c56d85d939b--7f3c9470aa064e1a9d471c197c86ae52 e349fd62de984b5babc50eb607a4d1be 0ca0a6339beb430ca5420c56d85d939b--e349fd62de984b5babc50eb607a4d1be b7febbefaf4248398d7e60a579edc515 RX(b07) e349fd62de984b5babc50eb607a4d1be--b7febbefaf4248398d7e60a579edc515 b9561ca8b0e543d3acb68d9e369cf382 b7febbefaf4248398d7e60a579edc515--b9561ca8b0e543d3acb68d9e369cf382 af82c0ef1ebd474eba8ed4263e49eaae b9561ca8b0e543d3acb68d9e369cf382--af82c0ef1ebd474eba8ed4263e49eaae ff1de2a38648413f95e53329615d9e50 af82c0ef1ebd474eba8ed4263e49eaae--ff1de2a38648413f95e53329615d9e50 4b3e2cff6274473aa9fb1596def7ac5a ff1de2a38648413f95e53329615d9e50--4b3e2cff6274473aa9fb1596def7ac5a bfb02ed0363f425584362f5f98c56373 4b3e2cff6274473aa9fb1596def7ac5a--bfb02ed0363f425584362f5f98c56373 9fe8c7f659cd451bb4561db1c4c20774 bfb02ed0363f425584362f5f98c56373--9fe8c7f659cd451bb4561db1c4c20774 45acb1c37ea343c3bbe84b3a7d365795 X 9fe8c7f659cd451bb4561db1c4c20774--45acb1c37ea343c3bbe84b3a7d365795 45acb1c37ea343c3bbe84b3a7d365795--1ce2ffb57d7045a5bb31e0b245eb7e7e bc6c3c673145417186507db3ec94754e RZ(1.0*g1) 45acb1c37ea343c3bbe84b3a7d365795--bc6c3c673145417186507db3ec94754e f7fbf5abf8cf48be98a2eb0f5c3c8723 X bc6c3c673145417186507db3ec94754e--f7fbf5abf8cf48be98a2eb0f5c3c8723 f7fbf5abf8cf48be98a2eb0f5c3c8723--5e86ac214af049adb2c557ebcc48cbdc d2b712107d3d4a369cb2b943eec5276b f7fbf5abf8cf48be98a2eb0f5c3c8723--d2b712107d3d4a369cb2b943eec5276b af6d28ed16d041a6b7afe5566e91bc26 d2b712107d3d4a369cb2b943eec5276b--af6d28ed16d041a6b7afe5566e91bc26 c3dab5f04a104fb790c6e75cf4d85a5e af6d28ed16d041a6b7afe5566e91bc26--c3dab5f04a104fb790c6e75cf4d85a5e 9e2ab1e2a93044aabd94053058ab832c c3dab5f04a104fb790c6e75cf4d85a5e--9e2ab1e2a93044aabd94053058ab832c 6bf50da3d2f342e090a54e0a0944e651 9e2ab1e2a93044aabd94053058ab832c--6bf50da3d2f342e090a54e0a0944e651 cf5d4fa11d4941468074abd156d1b9fd 6bf50da3d2f342e090a54e0a0944e651--cf5d4fa11d4941468074abd156d1b9fd c95231053efd4e89a33b2d0f7b758f7d cf5d4fa11d4941468074abd156d1b9fd--c95231053efd4e89a33b2d0f7b758f7d 1c0cc779f3ad4f2992f6d99424956c24 c95231053efd4e89a33b2d0f7b758f7d--1c0cc779f3ad4f2992f6d99424956c24 dfce57e5df7147a0a2696bb4d80c5b4d 1c0cc779f3ad4f2992f6d99424956c24--dfce57e5df7147a0a2696bb4d80c5b4d 6161c849faf8401098ac3d8f843125f1 dfce57e5df7147a0a2696bb4d80c5b4d--6161c849faf8401098ac3d8f843125f1 d68246f6b32040078f2886d8278c4106 6161c849faf8401098ac3d8f843125f1--d68246f6b32040078f2886d8278c4106 088b839dd30b47caa65dff230fe6180e d68246f6b32040078f2886d8278c4106--088b839dd30b47caa65dff230fe6180e 50ce681b037c48bdab2881797033cd14 088b839dd30b47caa65dff230fe6180e--50ce681b037c48bdab2881797033cd14 d45960407f6149ceb74dc3d5d93ba736 50ce681b037c48bdab2881797033cd14--d45960407f6149ceb74dc3d5d93ba736 d21ccaa8c98b478a8ee52f698bcee427 d45960407f6149ceb74dc3d5d93ba736--d21ccaa8c98b478a8ee52f698bcee427 6960616a5f034d1db7b8cc7d2e803ca4 d21ccaa8c98b478a8ee52f698bcee427--6960616a5f034d1db7b8cc7d2e803ca4 f1b725597f5f4017aee03242c21d5b94 6960616a5f034d1db7b8cc7d2e803ca4--f1b725597f5f4017aee03242c21d5b94 0203bf023f5a48b4ae0bc4ec767161ae f1b725597f5f4017aee03242c21d5b94--0203bf023f5a48b4ae0bc4ec767161ae 89a439ba48204e159c1f75070afcf78e 0203bf023f5a48b4ae0bc4ec767161ae--89a439ba48204e159c1f75070afcf78e 11a0734634ca4a4589339fed28871ead 89a439ba48204e159c1f75070afcf78e--11a0734634ca4a4589339fed28871ead 9740cb79ffdf4622823db03e729d6f62 11a0734634ca4a4589339fed28871ead--9740cb79ffdf4622823db03e729d6f62 5cc6f3d84f9d47b8a9d7530703b1a4bf 9740cb79ffdf4622823db03e729d6f62--5cc6f3d84f9d47b8a9d7530703b1a4bf 753f34b0425243f897feda97608a5f08 5cc6f3d84f9d47b8a9d7530703b1a4bf--753f34b0425243f897feda97608a5f08 86584397c6934b82b2152e199a9833fc 753f34b0425243f897feda97608a5f08--86584397c6934b82b2152e199a9833fc ebc085f8ca364b6a8d9fa2f9f285607f 86584397c6934b82b2152e199a9833fc--ebc085f8ca364b6a8d9fa2f9f285607f 42303591053f4913948800415b1f0809 ebc085f8ca364b6a8d9fa2f9f285607f--42303591053f4913948800415b1f0809 84c41ee930034c88a8812d8822b33d10 42303591053f4913948800415b1f0809--84c41ee930034c88a8812d8822b33d10 b6202533afab410b887bac56490360b5 84c41ee930034c88a8812d8822b33d10--b6202533afab410b887bac56490360b5 ff5288199b7b4d179cbb8a97c734ce5f b6202533afab410b887bac56490360b5--ff5288199b7b4d179cbb8a97c734ce5f c520c14e58db4ae79e8b565ca22b902e ff5288199b7b4d179cbb8a97c734ce5f--c520c14e58db4ae79e8b565ca22b902e 0551ead32436457a941c786c1805f812 c520c14e58db4ae79e8b565ca22b902e--0551ead32436457a941c786c1805f812 e84208fd1e524073a975281417c24905 0551ead32436457a941c786c1805f812--e84208fd1e524073a975281417c24905 19ade16f335042fe826f445245280b9d e84208fd1e524073a975281417c24905--19ade16f335042fe826f445245280b9d e20c000432a24c7289d1b2c3ccfb9fcb 19ade16f335042fe826f445245280b9d--e20c000432a24c7289d1b2c3ccfb9fcb 9966f2beaef44a25b2882d947fc5a93e e20c000432a24c7289d1b2c3ccfb9fcb--9966f2beaef44a25b2882d947fc5a93e bc19257239e24ba890d3be78edf998d7 9966f2beaef44a25b2882d947fc5a93e--bc19257239e24ba890d3be78edf998d7 07f690550ecf4f76ba17b2b2fe0c50f8 bc19257239e24ba890d3be78edf998d7--07f690550ecf4f76ba17b2b2fe0c50f8 fe5f3a0c462f49eb9b96a82567a357de 07f690550ecf4f76ba17b2b2fe0c50f8--fe5f3a0c462f49eb9b96a82567a357de c7a71afcee4f4b22ac7515437fe58fc8 fe5f3a0c462f49eb9b96a82567a357de--c7a71afcee4f4b22ac7515437fe58fc8 6a040bf326bf4fadbe1631521f6a17a8 c7a71afcee4f4b22ac7515437fe58fc8--6a040bf326bf4fadbe1631521f6a17a8 0670ec8fec464082bd6c79b85910f1db 6a040bf326bf4fadbe1631521f6a17a8--0670ec8fec464082bd6c79b85910f1db d95a9dae644f4ad49313ce7e61e962b6 0670ec8fec464082bd6c79b85910f1db--d95a9dae644f4ad49313ce7e61e962b6 3d183d6cfb6f449b9b82d7bf252a8085 d95a9dae644f4ad49313ce7e61e962b6--3d183d6cfb6f449b9b82d7bf252a8085 bf2054edfbaa47f79155549f86dc92c0 3d183d6cfb6f449b9b82d7bf252a8085--bf2054edfbaa47f79155549f86dc92c0 963133dcbdc9442fa187282e3fa11496 bf2054edfbaa47f79155549f86dc92c0--963133dcbdc9442fa187282e3fa11496 28a2fd3f07ed44878c0736cb3feaf770 963133dcbdc9442fa187282e3fa11496--28a2fd3f07ed44878c0736cb3feaf770 1120e53270b84f42b8998e2d7e5bf2ba 28a2fd3f07ed44878c0736cb3feaf770--1120e53270b84f42b8998e2d7e5bf2ba 828176ed050441be8f319a2c65f26166 1120e53270b84f42b8998e2d7e5bf2ba--828176ed050441be8f319a2c65f26166 f639bd79534241a388ac038d566c62b8 X 828176ed050441be8f319a2c65f26166--f639bd79534241a388ac038d566c62b8 f639bd79534241a388ac038d566c62b8--2dc044d6b900416c95bf0ebf5af80e13 b62d0075d08b43698caaba6752f7c8ea RZ(-1.0*g1) f639bd79534241a388ac038d566c62b8--b62d0075d08b43698caaba6752f7c8ea fd626190f8424064b7867568f8650e10 X b62d0075d08b43698caaba6752f7c8ea--fd626190f8424064b7867568f8650e10 fd626190f8424064b7867568f8650e10--2dc4b3440ec347b1bf21efae91df256a b3da431146a24df9b645e4dfba893fc2 fd626190f8424064b7867568f8650e10--b3da431146a24df9b645e4dfba893fc2 8c034f12e285442fab03760700664a48 b3da431146a24df9b645e4dfba893fc2--8c034f12e285442fab03760700664a48 c1698883b7de47bfac1a26711a3306be 8c034f12e285442fab03760700664a48--c1698883b7de47bfac1a26711a3306be bd322609d40f46d19282cf5e953a68cc c1698883b7de47bfac1a26711a3306be--bd322609d40f46d19282cf5e953a68cc 99e50e498de348b1a66062828fd34d58 bd322609d40f46d19282cf5e953a68cc--99e50e498de348b1a66062828fd34d58 b82109de32d44ee5bfebce9a6921724d 99e50e498de348b1a66062828fd34d58--b82109de32d44ee5bfebce9a6921724d c949eaac2469466eb467af1097153ddf b82109de32d44ee5bfebce9a6921724d--c949eaac2469466eb467af1097153ddf 6d28db05939642009133af460671d556 c949eaac2469466eb467af1097153ddf--6d28db05939642009133af460671d556 5f8ad29579a54c5b812abad81d893350 6d28db05939642009133af460671d556--5f8ad29579a54c5b812abad81d893350 b15c370d845040ca88e258316b48f331 5f8ad29579a54c5b812abad81d893350--b15c370d845040ca88e258316b48f331 a003451ad055465094e8f383ba7e48b6 b15c370d845040ca88e258316b48f331--a003451ad055465094e8f383ba7e48b6 586e5f6b25624fc18c2fb23ed86a1205 a003451ad055465094e8f383ba7e48b6--586e5f6b25624fc18c2fb23ed86a1205 e5b23006947a4d3abcc15080233ab2e2 586e5f6b25624fc18c2fb23ed86a1205--e5b23006947a4d3abcc15080233ab2e2 6f4135d83e4846c2811ed1c76f0f5a29 e5b23006947a4d3abcc15080233ab2e2--6f4135d83e4846c2811ed1c76f0f5a29 0dd56e2d07cb4ede86898159e7264239 6f4135d83e4846c2811ed1c76f0f5a29--0dd56e2d07cb4ede86898159e7264239 60c6e596e17c421980e4e9cbc16955f2 0dd56e2d07cb4ede86898159e7264239--60c6e596e17c421980e4e9cbc16955f2 444819d87e5747d9bf8548b844cbc114 60c6e596e17c421980e4e9cbc16955f2--444819d87e5747d9bf8548b844cbc114 3796fd1c749045f9bdd12045d9b175cf 444819d87e5747d9bf8548b844cbc114--3796fd1c749045f9bdd12045d9b175cf 493995031241478487518569c0f4e060 3796fd1c749045f9bdd12045d9b175cf--493995031241478487518569c0f4e060 2ad1c83572bc45809456453c6315be23 493995031241478487518569c0f4e060--2ad1c83572bc45809456453c6315be23 d66459d2489a4501bcae88c7d0c3c18c 2ad1c83572bc45809456453c6315be23--d66459d2489a4501bcae88c7d0c3c18c b4ff129e6e814b91b1ce556ad61f42fe d66459d2489a4501bcae88c7d0c3c18c--b4ff129e6e814b91b1ce556ad61f42fe f701511e65024b128398344c3fff7557 b4ff129e6e814b91b1ce556ad61f42fe--f701511e65024b128398344c3fff7557 bc2717e5095f4c6abac7170f2d169680 f701511e65024b128398344c3fff7557--bc2717e5095f4c6abac7170f2d169680 e6366b31a99349caa6ec981ee5442dbc bc2717e5095f4c6abac7170f2d169680--e6366b31a99349caa6ec981ee5442dbc 2f105b01b9d440d0beee7a82fb1d49db e6366b31a99349caa6ec981ee5442dbc--2f105b01b9d440d0beee7a82fb1d49db aee86dae277d4581a9be576ded15b4ab 2f105b01b9d440d0beee7a82fb1d49db--aee86dae277d4581a9be576ded15b4ab b71ddc7a059349078f77f26a0089a647 aee86dae277d4581a9be576ded15b4ab--b71ddc7a059349078f77f26a0089a647 f20da63c5d354d7788fc2df78da323ac b71ddc7a059349078f77f26a0089a647--f20da63c5d354d7788fc2df78da323ac 93902eb6411e43d39565fe34b55bdb88 f20da63c5d354d7788fc2df78da323ac--93902eb6411e43d39565fe34b55bdb88 f3fcd27f4eb845b2987b29892310a62d 93902eb6411e43d39565fe34b55bdb88--f3fcd27f4eb845b2987b29892310a62d 7e5125f84f794ddb9aeec5a8a3dc63d8 f3fcd27f4eb845b2987b29892310a62d--7e5125f84f794ddb9aeec5a8a3dc63d8 02577a4a4c574f93b88b2bd69cba6051 7e5125f84f794ddb9aeec5a8a3dc63d8--02577a4a4c574f93b88b2bd69cba6051 abade7a1bb284563803d2ba1c7d6df37 02577a4a4c574f93b88b2bd69cba6051--abade7a1bb284563803d2ba1c7d6df37 c08573c3e2454abcb0b205e29e79c85e abade7a1bb284563803d2ba1c7d6df37--c08573c3e2454abcb0b205e29e79c85e 3ba3457c0bfc477899a515e0311d0931 c08573c3e2454abcb0b205e29e79c85e--3ba3457c0bfc477899a515e0311d0931 34050c21df414948a6dbb7b397e5f57f 3ba3457c0bfc477899a515e0311d0931--34050c21df414948a6dbb7b397e5f57f 5225e11c2a114e53b9fdddc710be5f4c 34050c21df414948a6dbb7b397e5f57f--5225e11c2a114e53b9fdddc710be5f4c 21a1540383d946c3be7a963f034033b3 5225e11c2a114e53b9fdddc710be5f4c--21a1540383d946c3be7a963f034033b3 af6cb653d6fa474488b8fe179682c9cc 21a1540383d946c3be7a963f034033b3--af6cb653d6fa474488b8fe179682c9cc d6ff98a7feeb45eeb115e92ac278e822 af6cb653d6fa474488b8fe179682c9cc--d6ff98a7feeb45eeb115e92ac278e822 90c7bac0507840998ac73312464796b9 d6ff98a7feeb45eeb115e92ac278e822--90c7bac0507840998ac73312464796b9 fbec73ffa7474bfd92b1d3940477278e X 90c7bac0507840998ac73312464796b9--fbec73ffa7474bfd92b1d3940477278e fbec73ffa7474bfd92b1d3940477278e--f260466663c5468dab0b2e19594d003e 1881a8399f194a7c98a0b55690990f05 RZ(-1.0*g1) fbec73ffa7474bfd92b1d3940477278e--1881a8399f194a7c98a0b55690990f05 fb48da699d6b4094b41bf73d40ea95bb X 1881a8399f194a7c98a0b55690990f05--fb48da699d6b4094b41bf73d40ea95bb fb48da699d6b4094b41bf73d40ea95bb--d38fe972d2674afb9163c5d3a70651b7 3d9a0ade4c514a3fb5703ad152f50fb3 fb48da699d6b4094b41bf73d40ea95bb--3d9a0ade4c514a3fb5703ad152f50fb3 baaf0d9285c64f5684f4b91b15ddc00a 3d9a0ade4c514a3fb5703ad152f50fb3--baaf0d9285c64f5684f4b91b15ddc00a e834d1ee0d6b4646a4cd04ddc462ef4d baaf0d9285c64f5684f4b91b15ddc00a--e834d1ee0d6b4646a4cd04ddc462ef4d 3e345d1f4e634a6fa682336a3cdc4ad3 e834d1ee0d6b4646a4cd04ddc462ef4d--3e345d1f4e634a6fa682336a3cdc4ad3 13ab8caca0854cef917d534a93658d77 3e345d1f4e634a6fa682336a3cdc4ad3--13ab8caca0854cef917d534a93658d77 a4f8143993524f85b8c83140ffff6ebb 13ab8caca0854cef917d534a93658d77--a4f8143993524f85b8c83140ffff6ebb 4c4e88a4615142f88a0108c74cc82dd3 a4f8143993524f85b8c83140ffff6ebb--4c4e88a4615142f88a0108c74cc82dd3 23c31bcc40204e22b4354988ce57c3ff 4c4e88a4615142f88a0108c74cc82dd3--23c31bcc40204e22b4354988ce57c3ff 576e471ee17c43f499b6e396392b9b29 23c31bcc40204e22b4354988ce57c3ff--576e471ee17c43f499b6e396392b9b29 cee5d6367231474eabfd3a6560479ee1 576e471ee17c43f499b6e396392b9b29--cee5d6367231474eabfd3a6560479ee1 5ac56208775447f2ab1042d42b86123f cee5d6367231474eabfd3a6560479ee1--5ac56208775447f2ab1042d42b86123f fb0dd64401fa445fb855cb586ccf5a03 5ac56208775447f2ab1042d42b86123f--fb0dd64401fa445fb855cb586ccf5a03 0aa97c2233cb4365ae8c6c203b309acc fb0dd64401fa445fb855cb586ccf5a03--0aa97c2233cb4365ae8c6c203b309acc e134f1e4e1734357b23fff908173c33d 0aa97c2233cb4365ae8c6c203b309acc--e134f1e4e1734357b23fff908173c33d 6844e5dd9cac4ae5928856bb27f0bc1e e134f1e4e1734357b23fff908173c33d--6844e5dd9cac4ae5928856bb27f0bc1e d7a55e44e5054c689941e9e1a1649eee 6844e5dd9cac4ae5928856bb27f0bc1e--d7a55e44e5054c689941e9e1a1649eee af2ae06eb244413daf3a719f39083978 d7a55e44e5054c689941e9e1a1649eee--af2ae06eb244413daf3a719f39083978 944b773626004e0d848ac1b23f89d876 af2ae06eb244413daf3a719f39083978--944b773626004e0d848ac1b23f89d876 9038163f12504da3be89e16193210990 944b773626004e0d848ac1b23f89d876--9038163f12504da3be89e16193210990 9f28a53891b64c6095c12d0a0e9dcccf 9038163f12504da3be89e16193210990--9f28a53891b64c6095c12d0a0e9dcccf e3d0d9be8ea24fbfbe9538fc88b2935c 9f28a53891b64c6095c12d0a0e9dcccf--e3d0d9be8ea24fbfbe9538fc88b2935c 98e338ee05324b49977db72fa429aabf e3d0d9be8ea24fbfbe9538fc88b2935c--98e338ee05324b49977db72fa429aabf 7070a0274e404075bd879c56a346037f 98e338ee05324b49977db72fa429aabf--7070a0274e404075bd879c56a346037f f786a00a68cc459b8caf822d5b81d168 7070a0274e404075bd879c56a346037f--f786a00a68cc459b8caf822d5b81d168 489de73cc9544a0eaec086d694860c41 f786a00a68cc459b8caf822d5b81d168--489de73cc9544a0eaec086d694860c41 048706c603f74cf2a57bf1b0c8a4d27b 489de73cc9544a0eaec086d694860c41--048706c603f74cf2a57bf1b0c8a4d27b a0d315cbcb454a1fbede871c579351aa 048706c603f74cf2a57bf1b0c8a4d27b--a0d315cbcb454a1fbede871c579351aa 98deee00de9945d89c63faf024c9971e a0d315cbcb454a1fbede871c579351aa--98deee00de9945d89c63faf024c9971e 9c3459823491404e8f00757d405d9584 X 98deee00de9945d89c63faf024c9971e--9c3459823491404e8f00757d405d9584 9c3459823491404e8f00757d405d9584--bdf1b14ac2024d59ae914735b376db57 b659c43811084a45be7d0c251d75eacb RZ(-1.0*g1) 9c3459823491404e8f00757d405d9584--b659c43811084a45be7d0c251d75eacb e8d80506d21449dfad67c4e4b17b0dc2 X b659c43811084a45be7d0c251d75eacb--e8d80506d21449dfad67c4e4b17b0dc2 e8d80506d21449dfad67c4e4b17b0dc2--0c2ac4a91cb24998a840922c5622a9fa 9ce92ad8e1394e5c88a416ab78c5067a e8d80506d21449dfad67c4e4b17b0dc2--9ce92ad8e1394e5c88a416ab78c5067a 2bb87fa571194026b9cc37dbf1aa9bf6 RX(b17) 9ce92ad8e1394e5c88a416ab78c5067a--2bb87fa571194026b9cc37dbf1aa9bf6 2bb87fa571194026b9cc37dbf1aa9bf6--530b9ae95346424cafc6e0bbb0850b97"},{"location":"qml/qaoa/#train-the-qaoa-circuit-to-solve-maxcut","title":"Train the QAOA circuit to solve MaxCut","text":"<p>Given the QAOA circuit above, one can construct the associated Qadence <code>QuantumModel</code> and train it using standard gradient based optimization.</p> <p>The loss function to be minimized reads:</p> \\[\\mathcal{L} = \\sum_{i,j}^{N_{\\mathcal{E}}} \\frac{1}{2} \\left(1 - \\langle \\psi | \\sigma_i^z \\sigma_j^z | \\psi \\rangle \\right)\\] <p>where \\(\\psi(\\beta, \\gamma)\\) is the wavefunction obtained by propagating the QAQA quantum circuit and the sum runs over the edges of the graph \\(N_{\\mathcal{E}}\\).</p> <pre><code>import torch\nfrom qadence import QuantumModel\ntorch.manual_seed(seed)\ndef loss_function(_model: QuantumModel):\nexpval_ops = _model.expectation().squeeze()\n# this corresponds to the MaxCut cost by definition\n# with negative sign in front to perform maximization\nexpval = 0.0\nfor val in expval_ops:\nexpval += 0.5 * (1 - val)\nreturn -1.0 * expval\n# initialize the parameters to random values\nmodel = QuantumModel(circuit, observable=zz_ops)\nmodel.reset_vparams(torch.rand(model.num_vparams))\ninitial_loss = loss_function(model)\nprint(f\"Initial loss: {initial_loss}\")\n# train the model\nn_epochs = 100\nlr = 1.0\noptimizer = torch.optim.Adagrad(model.parameters(), lr=lr)\nfor i in range(n_epochs):\noptimizer.zero_grad()\nloss = loss_function(model)\nloss.backward()\noptimizer.step()\nif (i+1) % (n_epochs // 10) == 0:\nprint(f\"MaxCut cost at iteration {i+1}: {-loss.item()}\")\n</code></pre> <pre><code>Initial loss: -4.38955442031002\nMaxCut cost at iteration 10: 9.658988088514588\nMaxCut cost at iteration 20: 10.762991648279277\nMaxCut cost at iteration 30: 11.961444446000959\nMaxCut cost at iteration 40: 11.993905787396514\nMaxCut cost at iteration 50: 11.992625120460398\nMaxCut cost at iteration 60: 11.9988982051771\nMaxCut cost at iteration 70: 11.999889411237847\nMaxCut cost at iteration 80: 11.999989015909835\nMaxCut cost at iteration 90: 11.999998856968327\nMaxCut cost at iteration 100: 11.999999871294946\n</code></pre> <p>Qadence offers some convenience functions to implement this training loop with advanced logging and metrics track features. You can refer to this tutorial for more details.</p>"},{"location":"qml/qaoa/#results","title":"Results","text":"<p>Given the trained quantum model, one needs to sample the resulting quantum state to recover the bitstring with the highest probability which corresponds to the maximum cut of the graph.</p> <pre><code>samples = model.sample(n_shots=100)[0]\nmost_frequent = max(samples, key=samples.get)\nprint(f\"Most frequently sampled bitstring corresponding to the maximum cut: {most_frequent}\")\n# let's now draw the cut obtained with the QAOA procedure\ncolors = []\nlabels = {}\nfor node, b in zip(graph.nodes(), most_frequent):\ncolors.append(\"green\") if int(b) == 0 else colors.append(\"red\")\nlabels[node] = \"A\" if int(b) == 0 else \"B\"\nnx.draw_networkx(graph, node_color=colors, with_labels=True, labels=labels)\n</code></pre>   Most frequently sampled bitstring corresponding to the maximum cut: 11001100  2023-11-27T12:00:58.282621 image/svg+xml Matplotlib v3.7.4, https://matplotlib.org/"},{"location":"qml/qaoa/#references","title":"References","text":"<ol> <li> <p>Farhi et al. - A Quantum Approximate Optimization Algorithm\u00a0\u21a9</p> </li> </ol>"},{"location":"qml/qcl/","title":"Quantum circuit learning","text":"<p>This tutorial shows how to apply <code>qadence</code> for solving a basic quantum machine learning application: fitting a simple function with the quantum circuit learning<sup>1</sup> (QCL) algorithm.</p> <p>QCL is a supervised quantum machine learning algorithm that uses a parametrized quantum neural network to learn the behavior of an arbitrary mathematical function using a set of function values as training data. This tutorial shows how to fit the \\(\\sin(x)\\) function in the \\([-1, 1]\\) domain.</p> <p>In the following, train and test data are defined.</p> <pre><code>import torch\nfrom torch.utils.data import random_split\n# make sure all tensors are kept on the same device\n# only available from PyTorch 2.0\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ntorch.set_default_device(device)\ndef qcl_training_data(\ndomain: tuple = (0, 2*torch.pi), n_points: int = 200\n) -&gt; tuple[torch.Tensor, torch.Tensor]:\nstart, end = domain\nx_rand, _ = torch.sort(torch.DoubleTensor(n_points).uniform_(start, end))\ny_rand = torch.sin(x_rand)\nreturn x_rand, y_rand\nx, y = qcl_training_data()\n# random train/test split of the dataset\ntrain_subset, test_subset = random_split(x, [0.75, 0.25])\ntrain_ind = sorted(train_subset.indices)\ntest_ind = sorted(test_subset.indices)\nx_train, y_train = x[train_ind], y[train_ind]\nx_test, y_test = x[test_ind], y[test_ind]\n</code></pre>"},{"location":"qml/qcl/#train-the-qcl-model","title":"Train the QCL model","text":"<p>Qadence provides the <code>QNN</code> convenience constructor to build a quantum neural network. The <code>QNN</code> class needs a circuit and a list of observables; the number of feature parameters in the input circuit determines the number of input features (i.e. the dimensionality of the classical data given as input) whereas the number of observables determines the number of outputs of the quantum neural network.</p> <p>Total qubit magnetization is used as observable:</p> \\[ \\hat{O} = \\sum_i^N \\hat{\\sigma}_i^z \\] <p>In the following the observable, quantum circuit and corresponding QNN model are constructed.</p> <pre><code>import qadence as qd\nn_qubits = 4\n# create a simple feature map to encode the input data\nfeature_param = qd.FeatureParameter(\"phi\")\nfeature_map = qd.kron(qd.RX(i, feature_param) for i in range(n_qubits))\nfeature_map = qd.tag(feature_map, \"feature_map\")\n# create a digital-analog variational ansatz using Qadence convenience constructors\nansatz = qd.hea(n_qubits, depth=n_qubits)\nansatz = qd.tag(ansatz, \"ansatz\")\n# total qubit magnetization observable\nobservable = qd.hamiltonian_factory(n_qubits, detuning=qd.Z)\ncircuit = qd.QuantumCircuit(n_qubits, feature_map, ansatz)\nmodel = qd.QNN(circuit, [observable])\nexpval = model(values=torch.rand(10))\n</code></pre> <pre><code>tensor([[0.2025],\n[0.1315],\n[0.2424],\n[0.1552],\n[0.1592],\n[0.2063],\n[0.1899],\n[0.2208],\n[0.2472],\n[0.1580]], grad_fn=&lt;CatBackward0&gt;)\n</code></pre> <p>The QCL algorithm uses the output of the quantum neural network as a tunable universal function approximator. Standard PyTorch code is used for training the QNN using a mean-square error loss, Adam optimizer. Training is performend on the GPU if available:</p> <pre><code>n_epochs = 100\nlr = 0.25\ninput_values = {\"phi\": x_train}\nmse_loss = torch.nn.MSELoss()  # standard PyTorch loss function\noptimizer = torch.optim.Adam(model.parameters(), lr=lr)  # standard PyTorch Adam optimizer\nprint(f\"Initial loss: {mse_loss(model(values=x_train), y_train)}\")\ny_pred_initial = model(values=x_test)\nfor i in range(n_epochs):\noptimizer.zero_grad()\n# given a `n_batch` number of input points and a `n_observables`\n# number of input observables to measure, the QNN returns\n# an output of the following shape: [n_batch x n_observables]\n# given that there is only one observable, a squeeze is applied to get\n# a 1-dimensional tensor\nloss = mse_loss(model(values=x_train).squeeze(), y_train)\nloss.backward()\noptimizer.step()\nif (i+1) % 20 == 0:\nprint(f\"Epoch {i+1} - Loss: {loss.item()}\")\nassert loss.item() &lt; 1e-3\n</code></pre> <pre><code>Initial loss: 0.6533070454755132\nEpoch 20 - Loss: 0.00675673293288311\nEpoch 40 - Loss: 0.0013178262682414614\nEpoch 60 - Loss: 0.00024411275385790839\nEpoch 80 - Loss: 1.8109270091471018e-05\nEpoch 100 - Loss: 3.344354751243779e-06\n</code></pre> <p>Qadence offers some convenience functions to implement this training loop with advanced logging and metrics track features. You can refer to this tutorial for more details.</p> <p>The quantum model is now trained on the training data points. To determine the quality of the results, one can check to see how well it fits the function on the test set.</p> <pre><code>import matplotlib.pyplot as plt\ny_pred = model({\"phi\": x_test})\n# convert all the results to numpy arrays for plotting\nx_train_np = x_train.cpu().detach().numpy().flatten()\ny_train_np = y_train.cpu().detach().numpy().flatten()\nx_test_np = x_test.cpu().detach().numpy().flatten()\ny_test_np = y_test.cpu().detach().numpy().flatten()\ny_pred_initial_np = y_pred_initial.cpu().detach().numpy().flatten()\ny_pred_np = y_pred.cpu().detach().numpy().flatten()\nfig, _ = plt.subplots()\nplt.scatter(x_test_np, y_test_np, label=\"Test points\", marker=\"o\", color=\"orange\")\nplt.plot(x_test_np, y_pred_initial_np, label=\"Initial prediction\", color=\"green\", alpha=0.5)\nplt.plot(x_test_np, y_pred_np, label=\"Final prediction\")\nplt.legend()\n</code></pre> 2023-11-27T12:01:02.612173 image/svg+xml Matplotlib v3.7.4, https://matplotlib.org/"},{"location":"qml/qcl/#references","title":"References","text":"<ol> <li> <p>Mitarai et al., Quantum Circuit Learning \u21a9</p> </li> </ol>"},{"location":"qml/qml_constructors/","title":"Quantum machine learning constructors","text":"<p>Besides the arbitrary Hamiltonian constructors, Qadence also provides a complete set of program constructors useful for digital-analog quantum machine learning programs.</p>"},{"location":"qml/qml_constructors/#feature-maps","title":"Feature maps","text":"<p>The <code>feature_map</code> function can easily create several types of data-encoding blocks. The two main types of feature maps use a Fourier basis or a Chebyshev basis.</p> <pre><code>from qadence import feature_map, BasisSet, chain\nfrom qadence.draw import display\nn_qubits = 3\nfourier_fm = feature_map(n_qubits, fm_type=BasisSet.FOURIER)\nchebyshev_fm = feature_map(n_qubits, fm_type=BasisSet.CHEBYSHEV)\nblock = chain(fourier_fm, chebyshev_fm)\n</code></pre> %3 cluster_6b2d7ea5287c406da21be87ce2fcf2d0 Constant Chebyshev FM cluster_4d3c24894d8b4233b0b0946c959d1074 Constant Fourier FM 541c12d1b6494bdc9a589d9346af51b5 0 ff1e34582ba145b9b90c87130a2aba2b RX(phi) 541c12d1b6494bdc9a589d9346af51b5--ff1e34582ba145b9b90c87130a2aba2b a6548984472d4138811ca61490557d37 1 fd9b61142cf94dbbb5c3f1806db188f3 RX(acos(phi)) ff1e34582ba145b9b90c87130a2aba2b--fd9b61142cf94dbbb5c3f1806db188f3 e4e49733ccaa409cb3f9dcbb7273209b fd9b61142cf94dbbb5c3f1806db188f3--e4e49733ccaa409cb3f9dcbb7273209b 9ec1f71badc24e36a199a5325b6889fc 952082e644db41b9807d246321e91e3e RX(phi) a6548984472d4138811ca61490557d37--952082e644db41b9807d246321e91e3e bb910b04aeb54c21847d42232a786b4a 2 d767c498f18b46c5a98301078820e62a RX(acos(phi)) 952082e644db41b9807d246321e91e3e--d767c498f18b46c5a98301078820e62a d767c498f18b46c5a98301078820e62a--9ec1f71badc24e36a199a5325b6889fc f956a93a4b014ef588ad1f6e2c68a5e8 52b8408bf3314a7d9314aed7a5439b3c RX(phi) bb910b04aeb54c21847d42232a786b4a--52b8408bf3314a7d9314aed7a5439b3c 11987af1df464dbf933486bf7e3306af RX(acos(phi)) 52b8408bf3314a7d9314aed7a5439b3c--11987af1df464dbf933486bf7e3306af 11987af1df464dbf933486bf7e3306af--f956a93a4b014ef588ad1f6e2c68a5e8 <p>A custom encoding function can also be passed with <code>sympy</code></p> <pre><code>from sympy import asin, Function\nn_qubits = 3\n# Using a pre-defined sympy Function\ncustom_fm_0 = feature_map(n_qubits, fm_type=asin)\n# Creating a custom sub-class of Function\nclass custom_func(Function):\n@classmethod\ndef eval(cls, x):\nreturn asin(x) + x**2\ncustom_fm_1 = feature_map(n_qubits, fm_type=custom_func)\nblock = chain(custom_fm_0, custom_fm_1)\n</code></pre> %3 cluster_57e92c12e00d4289831c8a0d73d0e1c6 Constant custom_func FM cluster_ec11fd91593d43d2afaaeeed1a9597cf Constant asin FM 2346d6a4227c46e989d612917d278b96 0 4c81194eb53748b9982792d247400ba1 RX(asin(phi)) 2346d6a4227c46e989d612917d278b96--4c81194eb53748b9982792d247400ba1 ece50af8c9f446a384ee8d4617b0f784 1 cd20b72736e648618970695a00b19134 RX(phi**2 + asin(phi)) 4c81194eb53748b9982792d247400ba1--cd20b72736e648618970695a00b19134 ce69c76e83724bdbabecd8f6064c2fb4 cd20b72736e648618970695a00b19134--ce69c76e83724bdbabecd8f6064c2fb4 f5b476fc658b474ea3f590c842bacd41 1a03fc64704a42959c81ce1e7150a082 RX(asin(phi)) ece50af8c9f446a384ee8d4617b0f784--1a03fc64704a42959c81ce1e7150a082 f11a7b2bc8e04029bbc4f4220e7d2722 2 ba91b9da1bbd41969f5b9f1968e16ba3 RX(phi**2 + asin(phi)) 1a03fc64704a42959c81ce1e7150a082--ba91b9da1bbd41969f5b9f1968e16ba3 ba91b9da1bbd41969f5b9f1968e16ba3--f5b476fc658b474ea3f590c842bacd41 32d344801673471db0f8385664b2ef57 987162e0d3644abb9946a4f896b597b3 RX(asin(phi)) f11a7b2bc8e04029bbc4f4220e7d2722--987162e0d3644abb9946a4f896b597b3 60e4ea8a14f14e8bb9cab17ff499b3f0 RX(phi**2 + asin(phi)) 987162e0d3644abb9946a4f896b597b3--60e4ea8a14f14e8bb9cab17ff499b3f0 60e4ea8a14f14e8bb9cab17ff499b3f0--32d344801673471db0f8385664b2ef57 <p>Furthermore, the <code>reupload_scaling</code> argument can be used to change the scaling applied to each qubit in the support of the feature map. The default scalings can be chosen from the <code>ReuploadScaling</code> enumeration.</p> <pre><code>from qadence import ReuploadScaling\nfrom qadence.draw import display\nn_qubits = 5\n# Default constant value\nfm_constant = feature_map(n_qubits, fm_type=BasisSet.FOURIER, reupload_scaling=ReuploadScaling.CONSTANT)\n# Linearly increasing scaling\nfm_tower = feature_map(n_qubits, fm_type=BasisSet.FOURIER, reupload_scaling=ReuploadScaling.TOWER)\n# Exponentially increasing scaling\nfm_exp = feature_map(n_qubits, fm_type=BasisSet.FOURIER, reupload_scaling=ReuploadScaling.EXP)\nblock = chain(fm_constant, fm_tower, fm_exp)\n</code></pre> %3 cluster_a5bea7ab7fac41308a99584a363d6608 Exponential Fourier FM cluster_8fbc9fccd3a945258a112ed85dac5b33 Constant Fourier FM cluster_fc208efd36b84fe99cfe2d2f36a9927e Tower Fourier FM 8379ed94f31c48d4ae9415f9d46c984f 0 a2ffa6d0e738497a848c9b081581be89 RX(phi) 8379ed94f31c48d4ae9415f9d46c984f--a2ffa6d0e738497a848c9b081581be89 c4d0d71ecb324aed9771e3b45939e6ef 1 b031735d2e47489d9c787ee1bbb46f8f RX(1.0*phi) a2ffa6d0e738497a848c9b081581be89--b031735d2e47489d9c787ee1bbb46f8f 2cfcc02a9bf147dc9f38e87f17f2950b RX(1.0*phi) b031735d2e47489d9c787ee1bbb46f8f--2cfcc02a9bf147dc9f38e87f17f2950b d650ced309264a2c96e8feccd4d73a43 2cfcc02a9bf147dc9f38e87f17f2950b--d650ced309264a2c96e8feccd4d73a43 6e01bc237cff40af96049e90c6e060b0 590e74d5645a407ba2243e7fe152fb0c RX(phi) c4d0d71ecb324aed9771e3b45939e6ef--590e74d5645a407ba2243e7fe152fb0c 60532c48d38a46039502695f100bf69d 2 b995cae34a1b48099e5d0195271e16cd RX(2.0*phi) 590e74d5645a407ba2243e7fe152fb0c--b995cae34a1b48099e5d0195271e16cd 4cba462958cd409cb50487378be0210d RX(2.0*phi) b995cae34a1b48099e5d0195271e16cd--4cba462958cd409cb50487378be0210d 4cba462958cd409cb50487378be0210d--6e01bc237cff40af96049e90c6e060b0 0d5e0059b4c1434d88a01bdddb9e07de d37ef2e515334700bb724b8d631b3288 RX(phi) 60532c48d38a46039502695f100bf69d--d37ef2e515334700bb724b8d631b3288 3fbc90cf1cd042669ddca237ea93ab0e 3 d6aced04fae6419e983c44876e9f38f4 RX(3.0*phi) d37ef2e515334700bb724b8d631b3288--d6aced04fae6419e983c44876e9f38f4 529ae8373ef54fc0ae418f317567a239 RX(4.0*phi) d6aced04fae6419e983c44876e9f38f4--529ae8373ef54fc0ae418f317567a239 529ae8373ef54fc0ae418f317567a239--0d5e0059b4c1434d88a01bdddb9e07de a17fce821e8f4514b5698a0332a43b54 7b4eb2d53b60473cb8cebeb96a7defef RX(phi) 3fbc90cf1cd042669ddca237ea93ab0e--7b4eb2d53b60473cb8cebeb96a7defef ff5fb13f0ee5405bb58a9cf1564562a1 4 7d3eff74d98a4c11b26e639b595103ca RX(4.0*phi) 7b4eb2d53b60473cb8cebeb96a7defef--7d3eff74d98a4c11b26e639b595103ca baa4bc2ed70c4b47a29be5116f75c8a6 RX(8.0*phi) 7d3eff74d98a4c11b26e639b595103ca--baa4bc2ed70c4b47a29be5116f75c8a6 baa4bc2ed70c4b47a29be5116f75c8a6--a17fce821e8f4514b5698a0332a43b54 c3a168725d2b4785aa5d980f59878c3f 740ab88dc09142f0a7b42423e18fee7e RX(phi) ff5fb13f0ee5405bb58a9cf1564562a1--740ab88dc09142f0a7b42423e18fee7e 87d5789df1c24bb3ac5aa8bc8a0d60ce RX(5.0*phi) 740ab88dc09142f0a7b42423e18fee7e--87d5789df1c24bb3ac5aa8bc8a0d60ce 0b18994a5cee4bc9837a4582e24d8e1b RX(16.0*phi) 87d5789df1c24bb3ac5aa8bc8a0d60ce--0b18994a5cee4bc9837a4582e24d8e1b 0b18994a5cee4bc9837a4582e24d8e1b--c3a168725d2b4785aa5d980f59878c3f <p>A custom scaling can also be defined with a function with an <code>int</code> input and <code>int</code> or <code>float</code> output.</p> <pre><code>n_qubits = 5\ndef custom_scaling(i: int) -&gt; int | float:\n\"\"\"Sqrt(i+1)\"\"\"\nreturn (i+1) ** (0.5)\n# Custom scaling function\nfm_custom = feature_map(n_qubits, fm_type=BasisSet.CHEBYSHEV, reupload_scaling=custom_scaling)\n</code></pre> %3 9ed15fa622bd4e5eb6899bfd12e69134 0 47212a6c51784e7689a0bb7118e7b17e RX(1.0*acos(phi)) 9ed15fa622bd4e5eb6899bfd12e69134--47212a6c51784e7689a0bb7118e7b17e 9c030cc139b64930997fa5d29fe9dd35 1 5ee3e36f4e544140bee541ae246a669c 47212a6c51784e7689a0bb7118e7b17e--5ee3e36f4e544140bee541ae246a669c 42312209a4f145dfba73495296e922c5 c682822227014bf18d0ab58618639ccc RX(1.414*acos(phi)) 9c030cc139b64930997fa5d29fe9dd35--c682822227014bf18d0ab58618639ccc 1770d6adfa3445a193b6fd97b4216f2b 2 c682822227014bf18d0ab58618639ccc--42312209a4f145dfba73495296e922c5 de90cb9d74154bc392e2fecce8ec609d f39e1ab53b344bcb840e5d7f5d53323e RX(1.732*acos(phi)) 1770d6adfa3445a193b6fd97b4216f2b--f39e1ab53b344bcb840e5d7f5d53323e 0fab2c1f9fda45e491fdab69e2056a49 3 f39e1ab53b344bcb840e5d7f5d53323e--de90cb9d74154bc392e2fecce8ec609d 41f424daee1d4ca4b5394d194995903f 68c8e9c3a6004e168e558e9f9607f30d RX(2.0*acos(phi)) 0fab2c1f9fda45e491fdab69e2056a49--68c8e9c3a6004e168e558e9f9607f30d 80f98736770a4ff181ce8d7cc6fbf24d 4 68c8e9c3a6004e168e558e9f9607f30d--41f424daee1d4ca4b5394d194995903f 00dae89046a94d4dbc4bfdf6fdecb852 d6f95a8c9ef44369bc0d2ac54f94ada7 RX(2.236*acos(phi)) 80f98736770a4ff181ce8d7cc6fbf24d--d6f95a8c9ef44369bc0d2ac54f94ada7 d6f95a8c9ef44369bc0d2ac54f94ada7--00dae89046a94d4dbc4bfdf6fdecb852 <p>A full description of the remaining arguments can be found in the <code>feature_map</code> API reference. We provide an example below.</p> <pre><code>from qadence import RY\nn_qubits = 5\n# Custom scaling function\nfm_full = feature_map(\nn_qubits = n_qubits,\nsupport = tuple(reversed(range(n_qubits))), # Reverse the qubit support to run the scaling from bottom to top\nparam = \"x\", # Change the name of the parameter\nop = RY, # Change the rotation gate between RX, RY, RZ or PHASE\nfm_type = BasisSet.CHEBYSHEV,\nreupload_scaling = ReuploadScaling.EXP,\nfeature_range = (-1.0, 2.0), # Range from which the input data comes from\ntarget_range = (1.0, 3.0), # Range the encoder assumes as the natural range\nmultiplier = 5.0 # Extra multiplier, which can also be a Parameter\n)\n</code></pre> %3 779b4d8693ce404db557ecd1814a660a 0 0670af6c10324e8ab4c7183843efce9b RY(80.0*acos(0.667*x + 1.667)) 779b4d8693ce404db557ecd1814a660a--0670af6c10324e8ab4c7183843efce9b aa34e6383c9d4ff4a4a45e2759406d9e 1 e3c50c58c97b488b93431c22187c767b 0670af6c10324e8ab4c7183843efce9b--e3c50c58c97b488b93431c22187c767b fe6df05577434589a0c2fe1b21bd473a b998ffa598c145c2b72a5e3648d64657 RY(40.0*acos(0.667*x + 1.667)) aa34e6383c9d4ff4a4a45e2759406d9e--b998ffa598c145c2b72a5e3648d64657 fd9afff5075a416a9ba6c3e856635f38 2 b998ffa598c145c2b72a5e3648d64657--fe6df05577434589a0c2fe1b21bd473a 00ef00eb0ad540d898b898024c86ed4b 7aabd8fc84e2426d8feff3c4ed934a84 RY(20.0*acos(0.667*x + 1.667)) fd9afff5075a416a9ba6c3e856635f38--7aabd8fc84e2426d8feff3c4ed934a84 727e3806572148e9b46503fe2441e58a 3 7aabd8fc84e2426d8feff3c4ed934a84--00ef00eb0ad540d898b898024c86ed4b ee009ed3b88546e49fbe65e25693ebcc db83423f94744c8db2ac548d602445a1 RY(10.0*acos(0.667*x + 1.667)) 727e3806572148e9b46503fe2441e58a--db83423f94744c8db2ac548d602445a1 cc40eba98a254f519a512e6706be9b93 4 db83423f94744c8db2ac548d602445a1--ee009ed3b88546e49fbe65e25693ebcc d81f3c79112d4f699e682c39c3071579 e1081f9d792449238bba499fecb9cf40 RY(5.0*acos(0.667*x + 1.667)) cc40eba98a254f519a512e6706be9b93--e1081f9d792449238bba499fecb9cf40 e1081f9d792449238bba499fecb9cf40--d81f3c79112d4f699e682c39c3071579"},{"location":"qml/qml_constructors/#hardware-efficient-ansatz","title":"Hardware-efficient ansatz","text":"<p>Ansatze blocks for quantum machine-learning are typically built following the Hardware-Efficient Ansatz formalism (HEA). Both fully digital and digital-analog HEAs can easily be built with the <code>hea</code> function. By default, the digital version is returned:</p> <pre><code>from qadence import hea\nfrom qadence.draw import display\nn_qubits = 3\ndepth = 2\nansatz = hea(n_qubits, depth)\n</code></pre> %3 879fe87f08aa430aacdaca4b6591cf81 0 0800d70493144fd98bbbdba7661757d4 RX(theta\u2080) 879fe87f08aa430aacdaca4b6591cf81--0800d70493144fd98bbbdba7661757d4 e64e6af1e16f45e2b21258b3b36d84ea 1 645702d28a024a5786bd5e14e60bb9e6 RY(theta\u2083) 0800d70493144fd98bbbdba7661757d4--645702d28a024a5786bd5e14e60bb9e6 8feea4a3c5eb45d7a547d88f12ea428c RX(theta\u2086) 645702d28a024a5786bd5e14e60bb9e6--8feea4a3c5eb45d7a547d88f12ea428c 9120652d055b40e392804622636f3ed2 8feea4a3c5eb45d7a547d88f12ea428c--9120652d055b40e392804622636f3ed2 37689c634c1a4154963c0d9b9c1f3048 9120652d055b40e392804622636f3ed2--37689c634c1a4154963c0d9b9c1f3048 0e2f040c1d24492194329fe334b972d1 RX(theta\u2089) 37689c634c1a4154963c0d9b9c1f3048--0e2f040c1d24492194329fe334b972d1 621302c62c364af8835751549e616376 RY(theta\u2081\u2082) 0e2f040c1d24492194329fe334b972d1--621302c62c364af8835751549e616376 d7a37a0458bf4effac50206f28548274 RX(theta\u2081\u2085) 621302c62c364af8835751549e616376--d7a37a0458bf4effac50206f28548274 50224908454041d4acdc328ffc4b8013 d7a37a0458bf4effac50206f28548274--50224908454041d4acdc328ffc4b8013 b1e277a8a5ca44769caa06287f8dc1ac 50224908454041d4acdc328ffc4b8013--b1e277a8a5ca44769caa06287f8dc1ac 344c3d43d2094d17915e06ab83e8f825 b1e277a8a5ca44769caa06287f8dc1ac--344c3d43d2094d17915e06ab83e8f825 6c37f787a619492aade6620735ffffa0 e01d9ca9968649d5b0fc56760ac4a240 RX(theta\u2081) e64e6af1e16f45e2b21258b3b36d84ea--e01d9ca9968649d5b0fc56760ac4a240 3dba7381694f4e059f4ed0ab765d9cc5 2 c810885d0b8b48b19e5eab3f840a42c3 RY(theta\u2084) e01d9ca9968649d5b0fc56760ac4a240--c810885d0b8b48b19e5eab3f840a42c3 226015a5c7e84f07bc2e57548b0e105f RX(theta\u2087) c810885d0b8b48b19e5eab3f840a42c3--226015a5c7e84f07bc2e57548b0e105f af0ec7b01b7f414ca751c7bb12f26d4d X 226015a5c7e84f07bc2e57548b0e105f--af0ec7b01b7f414ca751c7bb12f26d4d af0ec7b01b7f414ca751c7bb12f26d4d--9120652d055b40e392804622636f3ed2 2bbeb31f238740c78ca88625053eb6f5 af0ec7b01b7f414ca751c7bb12f26d4d--2bbeb31f238740c78ca88625053eb6f5 20de4400e43546f8975b6c2380bca3ca RX(theta\u2081\u2080) 2bbeb31f238740c78ca88625053eb6f5--20de4400e43546f8975b6c2380bca3ca 84c9e1a6901a40e6bb5fe43fbf0a8ba0 RY(theta\u2081\u2083) 20de4400e43546f8975b6c2380bca3ca--84c9e1a6901a40e6bb5fe43fbf0a8ba0 b4a709109a76449986dfc726f38efb15 RX(theta\u2081\u2086) 84c9e1a6901a40e6bb5fe43fbf0a8ba0--b4a709109a76449986dfc726f38efb15 56cb5ae71b844832af050158dc8805d2 X b4a709109a76449986dfc726f38efb15--56cb5ae71b844832af050158dc8805d2 56cb5ae71b844832af050158dc8805d2--50224908454041d4acdc328ffc4b8013 75c98daa48fa49c39eb690a3643156a8 56cb5ae71b844832af050158dc8805d2--75c98daa48fa49c39eb690a3643156a8 75c98daa48fa49c39eb690a3643156a8--6c37f787a619492aade6620735ffffa0 c942afe910ab4bacb8c656686bb02c49 fd8820a82ad94544913c21a6a805a276 RX(theta\u2082) 3dba7381694f4e059f4ed0ab765d9cc5--fd8820a82ad94544913c21a6a805a276 418a898e1c064631ab3d15e229c60ac9 RY(theta\u2085) fd8820a82ad94544913c21a6a805a276--418a898e1c064631ab3d15e229c60ac9 e953754b6fa743a486cb785a2591e439 RX(theta\u2088) 418a898e1c064631ab3d15e229c60ac9--e953754b6fa743a486cb785a2591e439 508c5d3ef17b4109a3e4319aff988d2b e953754b6fa743a486cb785a2591e439--508c5d3ef17b4109a3e4319aff988d2b 7d2a67d4de354727b552d2744bd14f6b X 508c5d3ef17b4109a3e4319aff988d2b--7d2a67d4de354727b552d2744bd14f6b 7d2a67d4de354727b552d2744bd14f6b--2bbeb31f238740c78ca88625053eb6f5 ac049eb37fd14e85a5765818e593a954 RX(theta\u2081\u2081) 7d2a67d4de354727b552d2744bd14f6b--ac049eb37fd14e85a5765818e593a954 257458dbd3bb4e43924057c559929b5d RY(theta\u2081\u2084) ac049eb37fd14e85a5765818e593a954--257458dbd3bb4e43924057c559929b5d e713b85e17844565b59e90b708577dc8 RX(theta\u2081\u2087) 257458dbd3bb4e43924057c559929b5d--e713b85e17844565b59e90b708577dc8 8cf3ac258b4740c5bb55e8a565aa44e9 e713b85e17844565b59e90b708577dc8--8cf3ac258b4740c5bb55e8a565aa44e9 c5b6f7ea7b424a42a3d47542d00f02af X 8cf3ac258b4740c5bb55e8a565aa44e9--c5b6f7ea7b424a42a3d47542d00f02af c5b6f7ea7b424a42a3d47542d00f02af--75c98daa48fa49c39eb690a3643156a8 c5b6f7ea7b424a42a3d47542d00f02af--c942afe910ab4bacb8c656686bb02c49 <p>As seen above, the rotation layers are automatically parameterized, and the prefix <code>\"theta\"</code> can be changed with the <code>param_prefix</code> argument.</p> <p>Furthermore, both the single-qubit rotations and the two-qubit entangler can be customized with the <code>operations</code> and <code>entangler</code> argument. The operations can be passed as a list of single-qubit rotations, while the entangler should be either <code>CNOT</code>, <code>CZ</code>, <code>CRX</code>, <code>CRY</code>, <code>CRZ</code> or <code>CPHASE</code>.</p> <pre><code>from qadence import RX, RY, CPHASE\nansatz = hea(\nn_qubits=n_qubits,\ndepth=depth,\nparam_prefix=\"phi\",\noperations=[RX, RY, RX],\nentangler=CPHASE\n)\n</code></pre> %3 f4553a58079f45829a44a431f15ed484 0 ac9172bf6146431b989ccf08a8d6a7a3 RX(phi\u2080) f4553a58079f45829a44a431f15ed484--ac9172bf6146431b989ccf08a8d6a7a3 e53acba97e514b73a75687c9edfcd333 1 1a4cde9882194e26b4efbcf17fbb9330 RY(phi\u2083) ac9172bf6146431b989ccf08a8d6a7a3--1a4cde9882194e26b4efbcf17fbb9330 e7a0629011144a7a81fba4e113d5cc33 RX(phi\u2086) 1a4cde9882194e26b4efbcf17fbb9330--e7a0629011144a7a81fba4e113d5cc33 27d86c2d041a418793d728a34f34ee5a e7a0629011144a7a81fba4e113d5cc33--27d86c2d041a418793d728a34f34ee5a ecb7c2d1af4d4a59a2fb780373d31238 27d86c2d041a418793d728a34f34ee5a--ecb7c2d1af4d4a59a2fb780373d31238 5a6d14283d664ff39d8f89eff7ff8cb0 RX(phi\u2089) ecb7c2d1af4d4a59a2fb780373d31238--5a6d14283d664ff39d8f89eff7ff8cb0 cacc0eec9d3e491c885455b2c05cf253 RY(phi\u2081\u2082) 5a6d14283d664ff39d8f89eff7ff8cb0--cacc0eec9d3e491c885455b2c05cf253 ff4c0819cc7943eca9a5bb98764423a2 RX(phi\u2081\u2085) cacc0eec9d3e491c885455b2c05cf253--ff4c0819cc7943eca9a5bb98764423a2 2017ac25850b49bf841a0590f5c8d44b ff4c0819cc7943eca9a5bb98764423a2--2017ac25850b49bf841a0590f5c8d44b fb146dedd53c41088644de2e45d8cbf0 2017ac25850b49bf841a0590f5c8d44b--fb146dedd53c41088644de2e45d8cbf0 3ccb04d3fe8746df8624289d8c4885df fb146dedd53c41088644de2e45d8cbf0--3ccb04d3fe8746df8624289d8c4885df 4379643cf9924b4b8b21a50f8950b76f fb84ac49bcf9489d84bb8ee6432b0aee RX(phi\u2081) e53acba97e514b73a75687c9edfcd333--fb84ac49bcf9489d84bb8ee6432b0aee 81b5b72c52424389b276080ef83caba6 2 00206bfaa91043448233e662502cf01f RY(phi\u2084) fb84ac49bcf9489d84bb8ee6432b0aee--00206bfaa91043448233e662502cf01f 8d3ead7e977d47eaa8a6e55a62ef86ef RX(phi\u2087) 00206bfaa91043448233e662502cf01f--8d3ead7e977d47eaa8a6e55a62ef86ef 32968203f8e943fc83c92542c6520937 PHASE(phi_ent\u2080) 8d3ead7e977d47eaa8a6e55a62ef86ef--32968203f8e943fc83c92542c6520937 32968203f8e943fc83c92542c6520937--27d86c2d041a418793d728a34f34ee5a 3ad0b69acb1a447e96f1d65ff1693da7 32968203f8e943fc83c92542c6520937--3ad0b69acb1a447e96f1d65ff1693da7 fc2f8a7489b943e585db98c7c6c2a836 RX(phi\u2081\u2080) 3ad0b69acb1a447e96f1d65ff1693da7--fc2f8a7489b943e585db98c7c6c2a836 770235e357ff45f5bc19799e07d50838 RY(phi\u2081\u2083) fc2f8a7489b943e585db98c7c6c2a836--770235e357ff45f5bc19799e07d50838 d17a8c3078284f5d97fe6615d0cd3059 RX(phi\u2081\u2086) 770235e357ff45f5bc19799e07d50838--d17a8c3078284f5d97fe6615d0cd3059 413ae32e339142ec8a9e1419b28adb98 PHASE(phi_ent\u2082) d17a8c3078284f5d97fe6615d0cd3059--413ae32e339142ec8a9e1419b28adb98 413ae32e339142ec8a9e1419b28adb98--2017ac25850b49bf841a0590f5c8d44b 453750ebe4584b1e8a4d3bc058bd6422 413ae32e339142ec8a9e1419b28adb98--453750ebe4584b1e8a4d3bc058bd6422 453750ebe4584b1e8a4d3bc058bd6422--4379643cf9924b4b8b21a50f8950b76f 02e10071c8044c41b6a8243579f7de0b fe83e99ae96640b89ae3dc833531e83f RX(phi\u2082) 81b5b72c52424389b276080ef83caba6--fe83e99ae96640b89ae3dc833531e83f 48a045b83aae4e158c11b007a2462884 RY(phi\u2085) fe83e99ae96640b89ae3dc833531e83f--48a045b83aae4e158c11b007a2462884 36217a43e6504709ba6d24d845c034e7 RX(phi\u2088) 48a045b83aae4e158c11b007a2462884--36217a43e6504709ba6d24d845c034e7 4c09e3b9ee344f3e819f17d69e92a0aa 36217a43e6504709ba6d24d845c034e7--4c09e3b9ee344f3e819f17d69e92a0aa 13c166bb7a11419786189c4f4fa39cbe PHASE(phi_ent\u2081) 4c09e3b9ee344f3e819f17d69e92a0aa--13c166bb7a11419786189c4f4fa39cbe 13c166bb7a11419786189c4f4fa39cbe--3ad0b69acb1a447e96f1d65ff1693da7 2b35ca18ee5d4e00ad6009439c42cfad RX(phi\u2081\u2081) 13c166bb7a11419786189c4f4fa39cbe--2b35ca18ee5d4e00ad6009439c42cfad ad135be4d9c548a9ba4f1cb85616c159 RY(phi\u2081\u2084) 2b35ca18ee5d4e00ad6009439c42cfad--ad135be4d9c548a9ba4f1cb85616c159 9869cd5422bd437f9ef2b74d8f46f39c RX(phi\u2081\u2087) ad135be4d9c548a9ba4f1cb85616c159--9869cd5422bd437f9ef2b74d8f46f39c 44e37fa39a94495cbd28c6cfc5535dd8 9869cd5422bd437f9ef2b74d8f46f39c--44e37fa39a94495cbd28c6cfc5535dd8 dd72e3ed47b44f4289dd0c631d885a37 PHASE(phi_ent\u2083) 44e37fa39a94495cbd28c6cfc5535dd8--dd72e3ed47b44f4289dd0c631d885a37 dd72e3ed47b44f4289dd0c631d885a37--453750ebe4584b1e8a4d3bc058bd6422 dd72e3ed47b44f4289dd0c631d885a37--02e10071c8044c41b6a8243579f7de0b <p>Having a truly hardware-efficient ansatz means that the entangling operation can be chosen according to each device's native interactions. Besides digital operations, in Qadence it is also possible to build digital-analog HEAs with the entanglement produced by the natural evolution of a set of interacting qubits, as natively implemented in neutral atom devices. As with other digital-analog functions, this can be controlled with the <code>strategy</code> argument which can be chosen from the <code>Strategy</code> enum type. Currently, only <code>Strategy.DIGITAL</code> and <code>Strategy.SDAQC</code> are available. By default, calling <code>strategy = Strategy.SDAQC</code> will use a global entangling Hamiltonian with Ising-like \\(NN\\) interactions and constant interaction strength,</p> <pre><code>from qadence import Strategy\nansatz = hea(\nn_qubits,\ndepth=depth,\nstrategy=Strategy.SDAQC\n)\n</code></pre> %3 cluster_e5b8d18418194583a1086912a2119602 cluster_2904af808e7f493ca1107ebc83bbf3d5 e6e9d1c4736644fb985adfc09a152414 0 1309160f0ac544af8a2fde6251fbd65e RX(theta\u2080) e6e9d1c4736644fb985adfc09a152414--1309160f0ac544af8a2fde6251fbd65e 60296843ce5741d096be808719aecd5a 1 7dfa39d486ed4f8594c7bc7d6ef6070b RY(theta\u2083) 1309160f0ac544af8a2fde6251fbd65e--7dfa39d486ed4f8594c7bc7d6ef6070b 3db935650f664584bb7db145163240c5 RX(theta\u2086) 7dfa39d486ed4f8594c7bc7d6ef6070b--3db935650f664584bb7db145163240c5 0362792132b64eaf81d42ebe54db5e2f HamEvo 3db935650f664584bb7db145163240c5--0362792132b64eaf81d42ebe54db5e2f 304ff17eedfc407d8ce1ce35ead75506 RX(theta\u2089) 0362792132b64eaf81d42ebe54db5e2f--304ff17eedfc407d8ce1ce35ead75506 4d4140acdc1a48d598a67387676e7954 RY(theta\u2081\u2082) 304ff17eedfc407d8ce1ce35ead75506--4d4140acdc1a48d598a67387676e7954 729bac9de8d54b6b9b88c6b32fe58f0f RX(theta\u2081\u2085) 4d4140acdc1a48d598a67387676e7954--729bac9de8d54b6b9b88c6b32fe58f0f 163322f62c594888ba62dfece0536a4e HamEvo 729bac9de8d54b6b9b88c6b32fe58f0f--163322f62c594888ba62dfece0536a4e 7d5c28c11a45499db80128a8a4a87337 163322f62c594888ba62dfece0536a4e--7d5c28c11a45499db80128a8a4a87337 bd8b67bae2a94562ba59d433924df6d9 39a95c21923f4d3fa03391422c6e3d89 RX(theta\u2081) 60296843ce5741d096be808719aecd5a--39a95c21923f4d3fa03391422c6e3d89 a6e1ef1fe5cd462795bd44077dd7bbb4 2 dc87a85961d34466ba440ff2e7c4884b RY(theta\u2084) 39a95c21923f4d3fa03391422c6e3d89--dc87a85961d34466ba440ff2e7c4884b ae108e5c96b24dbb9e343e73a8b9c7df RX(theta\u2087) dc87a85961d34466ba440ff2e7c4884b--ae108e5c96b24dbb9e343e73a8b9c7df 2dedab57109f49ee98b630192835ce39 t = theta_t\u2080 ae108e5c96b24dbb9e343e73a8b9c7df--2dedab57109f49ee98b630192835ce39 90b5514d78f149c291f8b8c0aece4441 RX(theta\u2081\u2080) 2dedab57109f49ee98b630192835ce39--90b5514d78f149c291f8b8c0aece4441 d18ebc2e2e374471a3c138bdc63fcc61 RY(theta\u2081\u2083) 90b5514d78f149c291f8b8c0aece4441--d18ebc2e2e374471a3c138bdc63fcc61 a10be39ce06e4c949655f874d3807fef RX(theta\u2081\u2086) d18ebc2e2e374471a3c138bdc63fcc61--a10be39ce06e4c949655f874d3807fef 63a09bacf0824d0fbeffbff27c5dc62d t = theta_t\u2081 a10be39ce06e4c949655f874d3807fef--63a09bacf0824d0fbeffbff27c5dc62d 63a09bacf0824d0fbeffbff27c5dc62d--bd8b67bae2a94562ba59d433924df6d9 fc1d2f64ff9d4be18122a92ac09a8301 9894f26bca8940d480109166499ef171 RX(theta\u2082) a6e1ef1fe5cd462795bd44077dd7bbb4--9894f26bca8940d480109166499ef171 3bcf5a45d072455fb3b19781502e857e RY(theta\u2085) 9894f26bca8940d480109166499ef171--3bcf5a45d072455fb3b19781502e857e f25595d1a920416a93e31de5c2bf7e73 RX(theta\u2088) 3bcf5a45d072455fb3b19781502e857e--f25595d1a920416a93e31de5c2bf7e73 7ea14133327641c1b8e55941af64faa7 f25595d1a920416a93e31de5c2bf7e73--7ea14133327641c1b8e55941af64faa7 a9b4e98fc6fb47a19a193ac8ccad0029 RX(theta\u2081\u2081) 7ea14133327641c1b8e55941af64faa7--a9b4e98fc6fb47a19a193ac8ccad0029 7e94b3b0fd114e8d953f2429cf00bf35 RY(theta\u2081\u2084) a9b4e98fc6fb47a19a193ac8ccad0029--7e94b3b0fd114e8d953f2429cf00bf35 bc4d1d9f53e6433e89926fe7f39bf844 RX(theta\u2081\u2087) 7e94b3b0fd114e8d953f2429cf00bf35--bc4d1d9f53e6433e89926fe7f39bf844 a35a884f7c3f4c489ee376d0c44543f3 bc4d1d9f53e6433e89926fe7f39bf844--a35a884f7c3f4c489ee376d0c44543f3 a35a884f7c3f4c489ee376d0c44543f3--fc1d2f64ff9d4be18122a92ac09a8301 <p>Note that, by default, only the time-parameter is automatically parameterized when building a digital-analog HEA. However, as described in the Hamiltonians tutorial, arbitrary interaction Hamiltonians can be easily built with the <code>hamiltonian_factory</code> function, with both customized or fully parameterized interactions, and these can be directly passed as the <code>entangler</code> for a customizable digital-analog HEA.</p> <pre><code>from qadence import hamiltonian_factory, Interaction, N, Register, hea\n# Build a parameterized neutral-atom Hamiltonian following a honeycomb_lattice:\nregister = Register.honeycomb_lattice(1, 1)\nentangler = hamiltonian_factory(\nregister,\ninteraction=Interaction.NN,\ndetuning=N,\ninteraction_strength=\"e\",\ndetuning_strength=\"n\"\n)\n# Build a fully parameterized Digital-Analog HEA:\nn_qubits = register.n_qubits\ndepth = 2\nansatz = hea(\nn_qubits=register.n_qubits,\ndepth=depth,\noperations=[RX, RY, RX],\nentangler=entangler,\nstrategy=Strategy.SDAQC\n)\n</code></pre> %3 cluster_70de25f067f148e18202cdb53460487e cluster_ac38c793cc9c4427a4363ba919a38233 f69076b9fa3141d8a29bca34be3feddb 0 414702b89c30443d987ab0f7976f5f6c RX(theta\u2080) f69076b9fa3141d8a29bca34be3feddb--414702b89c30443d987ab0f7976f5f6c 8030523c5ce84d36a9bba9419917948b 1 235d9d61cb014b65a764a1423853097e RY(theta\u2086) 414702b89c30443d987ab0f7976f5f6c--235d9d61cb014b65a764a1423853097e 87e205f238f748099be28198b98153c7 RX(theta\u2081\u2082) 235d9d61cb014b65a764a1423853097e--87e205f238f748099be28198b98153c7 2b04a48d8989424ba9216d5c5b277ec6 87e205f238f748099be28198b98153c7--2b04a48d8989424ba9216d5c5b277ec6 555d97bca8674401809647e08449e78a RX(theta\u2081\u2088) 2b04a48d8989424ba9216d5c5b277ec6--555d97bca8674401809647e08449e78a 981c725ec2dc4ba88a6838eeac9fe468 RY(theta\u2082\u2084) 555d97bca8674401809647e08449e78a--981c725ec2dc4ba88a6838eeac9fe468 dd9c671ef0e740688b6dbb8456454222 RX(theta\u2083\u2080) 981c725ec2dc4ba88a6838eeac9fe468--dd9c671ef0e740688b6dbb8456454222 c745463e3fc74535a75ad5fee1fa823a dd9c671ef0e740688b6dbb8456454222--c745463e3fc74535a75ad5fee1fa823a d113a969d1f1495c85546d344363be79 c745463e3fc74535a75ad5fee1fa823a--d113a969d1f1495c85546d344363be79 0e59c5abf57b4ad9b44934a3e174205a 36cd327e765844318d1888d578f0c452 RX(theta\u2081) 8030523c5ce84d36a9bba9419917948b--36cd327e765844318d1888d578f0c452 97214d612644424991a564c246ea9a1d 2 8c9ca4a1a8f2414cb0d803b5e8fd33e9 RY(theta\u2087) 36cd327e765844318d1888d578f0c452--8c9ca4a1a8f2414cb0d803b5e8fd33e9 ea20a16a7ddb42509294ba7f284bd720 RX(theta\u2081\u2083) 8c9ca4a1a8f2414cb0d803b5e8fd33e9--ea20a16a7ddb42509294ba7f284bd720 f0fd0144a09e47049b41ca9688323add ea20a16a7ddb42509294ba7f284bd720--f0fd0144a09e47049b41ca9688323add 1f63102a9a7c4c40a767edf70cc6d1ad RX(theta\u2081\u2089) f0fd0144a09e47049b41ca9688323add--1f63102a9a7c4c40a767edf70cc6d1ad 0bc472fb3f4a4c1bb89802a83a63ad3a RY(theta\u2082\u2085) 1f63102a9a7c4c40a767edf70cc6d1ad--0bc472fb3f4a4c1bb89802a83a63ad3a 521643c1e26d4ba5b13a6cb469a7fc17 RX(theta\u2083\u2081) 0bc472fb3f4a4c1bb89802a83a63ad3a--521643c1e26d4ba5b13a6cb469a7fc17 060a20046096467992bf534fcc643f38 521643c1e26d4ba5b13a6cb469a7fc17--060a20046096467992bf534fcc643f38 060a20046096467992bf534fcc643f38--0e59c5abf57b4ad9b44934a3e174205a e7641fe6c1154bbdbc8961abeae2feee 8ff9079c1e8a4c83ad30b4482ff8ad36 RX(theta\u2082) 97214d612644424991a564c246ea9a1d--8ff9079c1e8a4c83ad30b4482ff8ad36 28258f447e5d4b9f9257e40954e22b9a 3 917ceae1fb8041c7b6e4da8f5ee5b949 RY(theta\u2088) 8ff9079c1e8a4c83ad30b4482ff8ad36--917ceae1fb8041c7b6e4da8f5ee5b949 eb5fe901246a463aa47ec0847eb7d0aa RX(theta\u2081\u2084) 917ceae1fb8041c7b6e4da8f5ee5b949--eb5fe901246a463aa47ec0847eb7d0aa 4462bc00a9de47f39e81a02cac303c47 HamEvo eb5fe901246a463aa47ec0847eb7d0aa--4462bc00a9de47f39e81a02cac303c47 925a7ef8efcd4a2293d74e01072383d0 RX(theta\u2082\u2080) 4462bc00a9de47f39e81a02cac303c47--925a7ef8efcd4a2293d74e01072383d0 99a559805aac4aff85a4020b0f21e0ff RY(theta\u2082\u2086) 925a7ef8efcd4a2293d74e01072383d0--99a559805aac4aff85a4020b0f21e0ff 61d00070ac6c4a5f994085e20d709a90 RX(theta\u2083\u2082) 99a559805aac4aff85a4020b0f21e0ff--61d00070ac6c4a5f994085e20d709a90 aa0db7c948774aaa93763f3b3eab950e HamEvo 61d00070ac6c4a5f994085e20d709a90--aa0db7c948774aaa93763f3b3eab950e aa0db7c948774aaa93763f3b3eab950e--e7641fe6c1154bbdbc8961abeae2feee 37b3e26ec99e4a948ad8e3ea62d3173b 51f92c9439da4afca7e30d6ac3bb07d2 RX(theta\u2083) 28258f447e5d4b9f9257e40954e22b9a--51f92c9439da4afca7e30d6ac3bb07d2 38b28f86478f48eab8a424e7e6148df3 4 81a8cb702d914403a72fc517a601fd5a RY(theta\u2089) 51f92c9439da4afca7e30d6ac3bb07d2--81a8cb702d914403a72fc517a601fd5a df8bc479d3334f57b5d54763bfb269c8 RX(theta\u2081\u2085) 81a8cb702d914403a72fc517a601fd5a--df8bc479d3334f57b5d54763bfb269c8 eed69c6794eb409ba53abe508bb08720 t = theta_t\u2080 df8bc479d3334f57b5d54763bfb269c8--eed69c6794eb409ba53abe508bb08720 44603ee9a2204c5ebb524e19caf4bd00 RX(theta\u2082\u2081) eed69c6794eb409ba53abe508bb08720--44603ee9a2204c5ebb524e19caf4bd00 ac341846fb3b41a7a626336a5849db33 RY(theta\u2082\u2087) 44603ee9a2204c5ebb524e19caf4bd00--ac341846fb3b41a7a626336a5849db33 97882eba91e14954b095dfff5298b99f RX(theta\u2083\u2083) ac341846fb3b41a7a626336a5849db33--97882eba91e14954b095dfff5298b99f 6fa36b43c6874409a36e4cb51f3e4595 t = theta_t\u2081 97882eba91e14954b095dfff5298b99f--6fa36b43c6874409a36e4cb51f3e4595 6fa36b43c6874409a36e4cb51f3e4595--37b3e26ec99e4a948ad8e3ea62d3173b fb3ec63b46e54af7b6ab738df2c4d5f7 ac1615997b254c7a8f0eab952e6fb1af RX(theta\u2084) 38b28f86478f48eab8a424e7e6148df3--ac1615997b254c7a8f0eab952e6fb1af cf09f63536bf4b4d84d2174cb9fa5e39 5 a6204cf6a651496fa70e04b7fa235f12 RY(theta\u2081\u2080) ac1615997b254c7a8f0eab952e6fb1af--a6204cf6a651496fa70e04b7fa235f12 83b263c3d87e456a99f77a753981c0d1 RX(theta\u2081\u2086) a6204cf6a651496fa70e04b7fa235f12--83b263c3d87e456a99f77a753981c0d1 e087cfe96ce94644a87534142d55323c 83b263c3d87e456a99f77a753981c0d1--e087cfe96ce94644a87534142d55323c 3c64427d7d3a404296c660081a918300 RX(theta\u2082\u2082) e087cfe96ce94644a87534142d55323c--3c64427d7d3a404296c660081a918300 53021248681d418193caac6016fcaa13 RY(theta\u2082\u2088) 3c64427d7d3a404296c660081a918300--53021248681d418193caac6016fcaa13 24efdefb96544c86b37202bae43f4ef2 RX(theta\u2083\u2084) 53021248681d418193caac6016fcaa13--24efdefb96544c86b37202bae43f4ef2 766a4b0d41b845759e3f0a508711f960 24efdefb96544c86b37202bae43f4ef2--766a4b0d41b845759e3f0a508711f960 766a4b0d41b845759e3f0a508711f960--fb3ec63b46e54af7b6ab738df2c4d5f7 629782e00c8c4943b9d4b43da14c2171 bb928e8440ae4f859aeeb2e44cdcd687 RX(theta\u2085) cf09f63536bf4b4d84d2174cb9fa5e39--bb928e8440ae4f859aeeb2e44cdcd687 fb5dc6b6b35a4b3ba1aaa560611ba533 RY(theta\u2081\u2081) bb928e8440ae4f859aeeb2e44cdcd687--fb5dc6b6b35a4b3ba1aaa560611ba533 2498018e9eda422c93aa7f7fd5abdd01 RX(theta\u2081\u2087) fb5dc6b6b35a4b3ba1aaa560611ba533--2498018e9eda422c93aa7f7fd5abdd01 8ccd13b3933c45eb8e67f100abeeeccc 2498018e9eda422c93aa7f7fd5abdd01--8ccd13b3933c45eb8e67f100abeeeccc f1d35d309eab40e8a1a7ca5c2db9a288 RX(theta\u2082\u2083) 8ccd13b3933c45eb8e67f100abeeeccc--f1d35d309eab40e8a1a7ca5c2db9a288 805e129d758648f2836ab24ca35096b0 RY(theta\u2082\u2089) f1d35d309eab40e8a1a7ca5c2db9a288--805e129d758648f2836ab24ca35096b0 f78d0310828344e3bebcde97f7a0a7b1 RX(theta\u2083\u2085) 805e129d758648f2836ab24ca35096b0--f78d0310828344e3bebcde97f7a0a7b1 c1b0e1bce0fa47f7a525fa88c4c30271 f78d0310828344e3bebcde97f7a0a7b1--c1b0e1bce0fa47f7a525fa88c4c30271 c1b0e1bce0fa47f7a525fa88c4c30271--629782e00c8c4943b9d4b43da14c2171"},{"location":"qml/qml_constructors/#identity-initialized-ansatz","title":"Identity-initialized ansatz","text":"<p>It is widely known that parametrized quantum circuits are characterized by barren plateaus, where the gradient becomes exponentially small in the number of qubits. Here we include one of many techniques that have been proposed in recent years to mitigate this effect and facilitate <code>QNN</code>s training: Grant et al. showed that initializing the weights of a <code>QNN</code> so that each block of the circuit evaluates to identity reduces the effect of barren plateaus in the initial stage of training. In a similar fashion to <code>hea</code>, such circuit can be created via calling the associated function, <code>identity_initialized_ansatz</code>:</p> <pre><code>from qadence.constructors import identity_initialized_ansatz\nfrom qadence.draw import display\nn_qubits = 3\ndepth = 2\nansatz = identity_initialized_ansatz(n_qubits, depth)\n</code></pre> %3 cluster_2f569ec9be2b48339131afd3aaabc141 BPMA-1 cluster_11e0a982164d4348acee0bf775f1ec42 BPMA-0 d3fe20798fbe46879285b551fb43e0ff 0 b9ca59ee74014fc0bf5f34022992640e RX(alpha\u2080\u2080) d3fe20798fbe46879285b551fb43e0ff--b9ca59ee74014fc0bf5f34022992640e f073748baf8546c99b2e35536763d0cd 1 15e7374b72e944748303de813ca34c2f RY(alpha\u2080\u2083) b9ca59ee74014fc0bf5f34022992640e--15e7374b72e944748303de813ca34c2f 114cb13514db4a2b90bde148a7c7e1f1 15e7374b72e944748303de813ca34c2f--114cb13514db4a2b90bde148a7c7e1f1 a2443af61eb24e22afadf1cffc6f56b3 114cb13514db4a2b90bde148a7c7e1f1--a2443af61eb24e22afadf1cffc6f56b3 6c00c62418c64e349234283a324e977c RX(gamma\u2080\u2080) a2443af61eb24e22afadf1cffc6f56b3--6c00c62418c64e349234283a324e977c b70ec7ceb3bf4c48b3217ec0d156b0db 6c00c62418c64e349234283a324e977c--b70ec7ceb3bf4c48b3217ec0d156b0db 862b889da70345ff8206fcebe95f5b87 b70ec7ceb3bf4c48b3217ec0d156b0db--862b889da70345ff8206fcebe95f5b87 8dc54564096c4a70879273de1027b58e RY(beta\u2080\u2083) 862b889da70345ff8206fcebe95f5b87--8dc54564096c4a70879273de1027b58e 2c25f134b80845b3bd84ed4688d0593d RX(beta\u2080\u2080) 8dc54564096c4a70879273de1027b58e--2c25f134b80845b3bd84ed4688d0593d 1fd8e983e47045e090c4b794c6d034d5 RX(alpha\u2081\u2080) 2c25f134b80845b3bd84ed4688d0593d--1fd8e983e47045e090c4b794c6d034d5 81a62a9fc19c44e6b7ed8cb74bc24ffe RY(alpha\u2081\u2083) 1fd8e983e47045e090c4b794c6d034d5--81a62a9fc19c44e6b7ed8cb74bc24ffe f345303139754e5aa6192ff7edc8c20f 81a62a9fc19c44e6b7ed8cb74bc24ffe--f345303139754e5aa6192ff7edc8c20f 85293017cd9f430791cf38bdfbd7549e f345303139754e5aa6192ff7edc8c20f--85293017cd9f430791cf38bdfbd7549e 54709188ed5f4314a11941133de3213d RX(gamma\u2081\u2080) 85293017cd9f430791cf38bdfbd7549e--54709188ed5f4314a11941133de3213d 60fd777074a14ec6964553e645e77ba2 54709188ed5f4314a11941133de3213d--60fd777074a14ec6964553e645e77ba2 1ba300ce6405434888960ac066acbc77 60fd777074a14ec6964553e645e77ba2--1ba300ce6405434888960ac066acbc77 193f7299b2614963990f89fc722ababf RY(beta\u2081\u2083) 1ba300ce6405434888960ac066acbc77--193f7299b2614963990f89fc722ababf 29d0b78d6b4d41cabb8e99f10cd00021 RX(beta\u2081\u2080) 193f7299b2614963990f89fc722ababf--29d0b78d6b4d41cabb8e99f10cd00021 f683c812d570451b897173e01fa88312 29d0b78d6b4d41cabb8e99f10cd00021--f683c812d570451b897173e01fa88312 0fb07bc9410d4dc89d5b7a57627ecda7 4c520eace77d4ece9c337d399fe31574 RX(alpha\u2080\u2081) f073748baf8546c99b2e35536763d0cd--4c520eace77d4ece9c337d399fe31574 93104046eded4ca08db909a993aa4366 2 3ace8a9de3f44abb98a92ef32841c641 RY(alpha\u2080\u2084) 4c520eace77d4ece9c337d399fe31574--3ace8a9de3f44abb98a92ef32841c641 b244d834f1704db5b9fbaad657b21484 X 3ace8a9de3f44abb98a92ef32841c641--b244d834f1704db5b9fbaad657b21484 b244d834f1704db5b9fbaad657b21484--114cb13514db4a2b90bde148a7c7e1f1 d985690df99e45f08d0974f4f487517a b244d834f1704db5b9fbaad657b21484--d985690df99e45f08d0974f4f487517a 79faaf7509ae48c3ad35db8ed9b582dc RX(gamma\u2080\u2081) d985690df99e45f08d0974f4f487517a--79faaf7509ae48c3ad35db8ed9b582dc 9808cd367e8c42db9dee52c49bf117a4 79faaf7509ae48c3ad35db8ed9b582dc--9808cd367e8c42db9dee52c49bf117a4 a61c591054a14d4f88e2dda94ce19737 X 9808cd367e8c42db9dee52c49bf117a4--a61c591054a14d4f88e2dda94ce19737 a61c591054a14d4f88e2dda94ce19737--862b889da70345ff8206fcebe95f5b87 d8f92553a11d47348006d599e018c559 RY(beta\u2080\u2084) a61c591054a14d4f88e2dda94ce19737--d8f92553a11d47348006d599e018c559 42ebd72429c046fbb9ef17ab891ff4a2 RX(beta\u2080\u2081) d8f92553a11d47348006d599e018c559--42ebd72429c046fbb9ef17ab891ff4a2 4545af0635d740cbab200efa5ab57d85 RX(alpha\u2081\u2081) 42ebd72429c046fbb9ef17ab891ff4a2--4545af0635d740cbab200efa5ab57d85 3cbe2761b3b6477aba7e30522bd26545 RY(alpha\u2081\u2084) 4545af0635d740cbab200efa5ab57d85--3cbe2761b3b6477aba7e30522bd26545 a86979b3b483467bbed9b26c0442d7b9 X 3cbe2761b3b6477aba7e30522bd26545--a86979b3b483467bbed9b26c0442d7b9 a86979b3b483467bbed9b26c0442d7b9--f345303139754e5aa6192ff7edc8c20f 9ed1f0b668ee4ebd97fa6954abbd56b2 a86979b3b483467bbed9b26c0442d7b9--9ed1f0b668ee4ebd97fa6954abbd56b2 34653e484ac041dc97ffeac8ff239d76 RX(gamma\u2081\u2081) 9ed1f0b668ee4ebd97fa6954abbd56b2--34653e484ac041dc97ffeac8ff239d76 e459a3e950f045459c143d94109a0f4e 34653e484ac041dc97ffeac8ff239d76--e459a3e950f045459c143d94109a0f4e fc75af14d67e424bae8853d51315b4a2 X e459a3e950f045459c143d94109a0f4e--fc75af14d67e424bae8853d51315b4a2 fc75af14d67e424bae8853d51315b4a2--1ba300ce6405434888960ac066acbc77 e5154c3a3ab348d5a27d915acc9f67fc RY(beta\u2081\u2084) fc75af14d67e424bae8853d51315b4a2--e5154c3a3ab348d5a27d915acc9f67fc d26e1f1d2b9a45d0a68b1c1becf19295 RX(beta\u2081\u2081) e5154c3a3ab348d5a27d915acc9f67fc--d26e1f1d2b9a45d0a68b1c1becf19295 d26e1f1d2b9a45d0a68b1c1becf19295--0fb07bc9410d4dc89d5b7a57627ecda7 baf8c8abd9924eaeb94468ccd5c60a54 21a90f47320f4e7d89ff272a55d960f7 RX(alpha\u2080\u2082) 93104046eded4ca08db909a993aa4366--21a90f47320f4e7d89ff272a55d960f7 1ede056ab3a94088a36b4d5e0d5fe16c RY(alpha\u2080\u2085) 21a90f47320f4e7d89ff272a55d960f7--1ede056ab3a94088a36b4d5e0d5fe16c e1f2430057804c70a34eae0d61226a9e 1ede056ab3a94088a36b4d5e0d5fe16c--e1f2430057804c70a34eae0d61226a9e 985e23e5bea8488cb42f1a32fb030489 X e1f2430057804c70a34eae0d61226a9e--985e23e5bea8488cb42f1a32fb030489 985e23e5bea8488cb42f1a32fb030489--d985690df99e45f08d0974f4f487517a dcf45a64f6f04d2c8845b6f0b9183877 RX(gamma\u2080\u2082) 985e23e5bea8488cb42f1a32fb030489--dcf45a64f6f04d2c8845b6f0b9183877 71c6844dd4aa4a799d0ec4ada0ec8562 X dcf45a64f6f04d2c8845b6f0b9183877--71c6844dd4aa4a799d0ec4ada0ec8562 71c6844dd4aa4a799d0ec4ada0ec8562--9808cd367e8c42db9dee52c49bf117a4 41546b1607d04ae7b6b99c3066e34c76 71c6844dd4aa4a799d0ec4ada0ec8562--41546b1607d04ae7b6b99c3066e34c76 63beddcb335648bc85c928f813c58eb3 RY(beta\u2080\u2085) 41546b1607d04ae7b6b99c3066e34c76--63beddcb335648bc85c928f813c58eb3 8b205d4663b74da2ba4a6c856c57e602 RX(beta\u2080\u2082) 63beddcb335648bc85c928f813c58eb3--8b205d4663b74da2ba4a6c856c57e602 ae64891ba9c847a383cbd78d46dcc4d4 RX(alpha\u2081\u2082) 8b205d4663b74da2ba4a6c856c57e602--ae64891ba9c847a383cbd78d46dcc4d4 c93d2c8006074852b4fab1a38ff42b30 RY(alpha\u2081\u2085) ae64891ba9c847a383cbd78d46dcc4d4--c93d2c8006074852b4fab1a38ff42b30 b1362bb1b17b4abb9bf61f9ff631d532 c93d2c8006074852b4fab1a38ff42b30--b1362bb1b17b4abb9bf61f9ff631d532 e7583034930b4d23a14cd5b10f6e6d5c X b1362bb1b17b4abb9bf61f9ff631d532--e7583034930b4d23a14cd5b10f6e6d5c e7583034930b4d23a14cd5b10f6e6d5c--9ed1f0b668ee4ebd97fa6954abbd56b2 762e760cb9d34f899dac895d4f1cd58b RX(gamma\u2081\u2082) e7583034930b4d23a14cd5b10f6e6d5c--762e760cb9d34f899dac895d4f1cd58b 1db7ef49dcef4cf99e4062f97c428dcf X 762e760cb9d34f899dac895d4f1cd58b--1db7ef49dcef4cf99e4062f97c428dcf 1db7ef49dcef4cf99e4062f97c428dcf--e459a3e950f045459c143d94109a0f4e 7179f0357dc94fa08ceaf3efffde86c8 1db7ef49dcef4cf99e4062f97c428dcf--7179f0357dc94fa08ceaf3efffde86c8 2225eadbf7d647c99c5cf0ba7edf38b4 RY(beta\u2081\u2085) 7179f0357dc94fa08ceaf3efffde86c8--2225eadbf7d647c99c5cf0ba7edf38b4 969314f958a3496fad044cae702a6ece RX(beta\u2081\u2082) 2225eadbf7d647c99c5cf0ba7edf38b4--969314f958a3496fad044cae702a6ece 969314f958a3496fad044cae702a6ece--baf8c8abd9924eaeb94468ccd5c60a54"},{"location":"realistic_sims/","title":"Realistic simulations","text":"<p>This section describes how to perform realistic simulations in Qadence.</p>"},{"location":"realistic_sims/measurements/","title":"Measurement protocols","text":"<p>This section introduces the various measurement protocols.</p>"},{"location":"realistic_sims/mitigation/","title":"Error mitigation","text":"<p>This section introduces mitigation protocols.</p>"},{"location":"realistic_sims/noise/","title":"Simulated errors","text":"<p>Running programs on NISQ devices often leads to partially useful results due to the presence of noise. In order to perform realistic simulations, a number of noise models are supported in Qadence and corresponding error mitigation techniques whenever possible.</p>"},{"location":"realistic_sims/noise/#readout-errors","title":"Readout errors","text":"<p>State Preparation and Measurement (SPAM) in the hardware is a major source of noise in the execution of quantum programs. Qadence offers to simulate readout errors with the <code>Noise</code> protocol to corrupt the output samples of a simulation, through execution via a <code>QuantumModel</code>:</p> <pre><code>from qadence import QuantumModel, QuantumCircuit, kron, H, Z\nfrom qadence import hamiltonian_factory\nfrom qadence.noise import Noise\n# Simple circuit and observable construction.\nblock = kron(H(0), Z(1))\ncircuit = QuantumCircuit(2, block)\nobservable = hamiltonian_factory(circuit.n_qubits, detuning=Z)\n# Construct a quantum model.\nmodel = QuantumModel(circuit=circuit, observable=observable)\n# Define a noise model to use.\nnoise = Noise(protocol=Noise.READOUT)\n# Run noiseless and noisy simulations.\nnoiseless_samples = model.sample(n_shots=100)\nnoisy_samples = model.sample(noise=noise, n_shots=100)\n</code></pre> <pre><code>noiseless = [Counter({'00': 50, '10': 50})]\nnoisy = [Counter({'00': 46, '10': 42, '01': 6, '11': 6})]\n</code></pre> <p>It is possible to pass options to the noise model. In the previous example, a noise matrix is implicitly computed from a uniform distribution. The <code>option</code> dictionary argument accepts the following options:</p> <ul> <li><code>seed</code>: defaulted to <code>None</code>, for reproducibility purposes</li> <li><code>error_probability</code>: defaulted to 0.1, a bit flip probability</li> <li><code>noise_distribution</code>: defaulted to <code>WhiteNoise.UNIFORM</code>, for non-uniform noise distributions</li> <li><code>noise_matrix</code>: defaulted to <code>None</code>, if the noise matrix is known from third-party experiments, i.e. hardware calibration.</li> </ul> <p>Noisy simulations go hand-in-hand with measurement protocols discussed in the previous section, to assess the impact of noise on expectation values. In this case, both measurement and noise protocols have to be defined appropriately. Please note that a noise protocol without a measurement protocol will be ignored for expectation values computations.</p> <pre><code>from qadence.measurements import Measurements\n# Define a noise model with options.\noptions = {\"error_probability\": 0.01}\nnoise = Noise(protocol=Noise.READOUT, options=options)\n# Define a tomographical measurement protocol with options.\noptions = {\"n_shots\": 10000}\nmeasurement = Measurements(protocol=Measurements.TOMOGRAPHY, options=options)\n# Run noiseless and noisy simulations.\nnoiseless_exp = model.expectation(measurement=measurement)\nnoisy_exp = model.expectation(measurement=measurement, noise=noise)\n</code></pre> <pre><code>noiseless = tensor([[1.0026]], grad_fn=&lt;TransposeBackward0&gt;)\nnoisy = tensor([[0.9704]], grad_fn=&lt;TransposeBackward0&gt;)\n</code></pre>"},{"location":"tutorials/backends/","title":"Backends","text":"<p>Backends allow execution of Qadence abstract quantum circuits. They could be chosen from a variety of simulators, emulators and hardware and can enable circuit differentiability. The primary way to interact and configure a backend is via the high-level API <code>QuantumModel</code>.</p> <p>Not all backends are equivalent</p> <p>Not all backends support the same set of operations, especially while executing analog blocks. Qadence will throw descriptive errors in such cases.</p>"},{"location":"tutorials/backends/#execution-backends","title":"Execution backends","text":"<p>PyQTorch: An efficient, large-scale simulator designed for quantum machine learning, seamlessly integrated with the popular PyTorch deep learning framework for automatic differentiability. It also offers analog computing for time-independent pulses. See <code>PyQTorchBackend</code>.</p> <p>Pulser: A Python library for pulse-level/analog control of neutral atom devices. Execution via QuTiP. See <code>PulserBackend</code>.</p> <p>Braket: A Python SDK for interacting with quantum devices on Amazon Braket. Currently, only the devices with the digital interface of Amazon Braket are supported and execution is performed using the local simulator. Execution on remote simulators and quantum processing units will be available soon. See <code>BraketBackend</code></p> <p>More: Proprietary Qadence extensions provide more high-performance backends based on tensor networks or differentiation engines. For more enquiries, please contact: <code>info@pasqal.com</code>.</p>"},{"location":"tutorials/backends/#differentiation-backend","title":"Differentiation backend","text":"<p>The <code>DifferentiableBackend</code> class enables different differentiation modes for the given backend. This can be chosen from two types:</p> <ul> <li>Automatic differentiation (AD): available for PyTorch based backends (PyQTorch).</li> <li>Parameter Shift Rules (PSR): available for all backends. See this section for more information on differentiability and PSR.</li> </ul> <p>In practice, only a <code>diff_mode</code> should be provided in the <code>QuantumModel</code>. Please note that <code>diff_mode</code> defaults to <code>None</code>:</p> <pre><code>import sympy\nimport torch\nfrom qadence import Parameter, RX, RZ, Z, CNOT, QuantumCircuit, QuantumModel, chain, BackendName, DiffMode\nx = Parameter(\"x\", trainable=False)\ny = Parameter(\"y\", trainable=False)\nfm = chain(\nRX(0, 3 * x),\nRX(0, x),\nRZ(1, sympy.exp(y)),\nRX(0, 3.14),\nRZ(1, \"theta\")\n)\nansatz = CNOT(0, 1)\nblock = chain(fm, ansatz)\ncircuit = QuantumCircuit(2, block)\nobservable = Z(0)\n# DiffMode.GPSR is available for any backend.\n# DiffMode.AD is only available for natively differentiable backends.\nmodel = QuantumModel(circuit, observable, backend=BackendName.PYQTORCH, diff_mode=DiffMode.GPSR)\n# Get some values for the feature parameters.\nvalues = {\"x\": (x := torch.tensor([0.5], requires_grad=True)), \"y\": torch.tensor([0.1])}\n# Compute expectation.\nexp = model.expectation(values)\n# Differentiate the expectation wrt x.\ndexp_dx = torch.autograd.grad(exp, x, torch.ones_like(exp))\n</code></pre> <pre><code>dexp_dx = (tensor([3.6398]),)\n</code></pre>"},{"location":"tutorials/backends/#low-level-backend_factory-interface","title":"Low-level <code>backend_factory</code> interface","text":"<p>Every backend in Qadence inherits from the abstract <code>Backend</code> class: <code>Backend</code> and implement the following methods:</p> <ul> <li><code>run</code>: propagate the initial state according to the quantum circuit and return the final wavefunction object.</li> <li><code>sample</code>: sample from a circuit.</li> <li><code>expectation</code>: computes the expectation of a circuit given an observable.</li> <li><code>convert</code>: convert the abstract <code>QuantumCircuit</code> object to its backend-native representation including a backend specific parameter embedding function.</li> </ul> <p>Backends are purely functional objects which take as input the values for the circuit parameters and return the desired output from a call to a method. In order to use a backend directly, embedded parameters must be supplied as they are returned by the backend specific embedding function.</p> <p>Here is a simple demonstration of the use of the Braket backend to execute a circuit in non-differentiable mode:</p> <pre><code>from qadence import QuantumCircuit, FeatureParameter, RX, RZ, CNOT, hea, chain\n# Construct a feature map.\nx = FeatureParameter(\"x\")\nz = FeatureParameter(\"y\")\nfm = chain(RX(0, 3 * x), RZ(1, z), CNOT(0, 1))\n# Construct a circuit with an hardware-efficient ansatz.\ncircuit = QuantumCircuit(3, fm, hea(3,1))\n</code></pre> <p>The abstract <code>QuantumCircuit</code> can now be converted to its native representation via the Braket backend.</p> <pre><code>from qadence import backend_factory\n# Use only Braket in non-differentiable mode:\nbackend = backend_factory(\"braket\")\n# The `Converted` object\n# (contains a `ConvertedCircuit` with the original and native representation)\nconv = backend.convert(circuit)\n</code></pre> <pre><code>conv.circuit.original = ChainBlock(0,1,2)\n\u251c\u2500\u2500 ChainBlock(0,1)\n\u2502   \u251c\u2500\u2500 RX(0) [params: ['3*x']]\n\u2502   \u251c\u2500\u2500 RZ(1) [params: ['y']]\n\u2502   \u2514\u2500\u2500 CNOT(0, 1)\n\u2514\u2500\u2500 ChainBlock(0,1,2) [tag: HEA]\n\u251c\u2500\u2500 ChainBlock(0,1,2)\n\u2502   \u251c\u2500\u2500 KronBlock(0,1,2)\n\u2502   \u2502   \u251c\u2500\u2500 RX(0) [params: ['theta_0']]\n\u2502   \u2502   \u251c\u2500\u2500 RX(1) [params: ['theta_1']]\n\u2502   \u2502   \u2514\u2500\u2500 RX(2) [params: ['theta_2']]\n\u2502   \u251c\u2500\u2500 KronBlock(0,1,2)\n\u2502   \u2502   \u251c\u2500\u2500 RY(0) [params: ['theta_3']]\n\u2502   \u2502   \u251c\u2500\u2500 RY(1) [params: ['theta_4']]\n\u2502   \u2502   \u2514\u2500\u2500 RY(2) [params: ['theta_5']]\n\u2502   \u2514\u2500\u2500 KronBlock(0,1,2)\n\u2502       \u251c\u2500\u2500 RX(0) [params: ['theta_6']]\n\u2502       \u251c\u2500\u2500 RX(1) [params: ['theta_7']]\n\u2502       \u2514\u2500\u2500 RX(2) [params: ['theta_8']]\n\u2514\u2500\u2500 ChainBlock(0,1,2)\n\u251c\u2500\u2500 KronBlock(0,1)\n\u2502   \u2514\u2500\u2500 CNOT(0, 1)\n\u2514\u2500\u2500 KronBlock(1,2)\n\u2514\u2500\u2500 CNOT(1, 2)\nconv.circuit.native = Circuit('instructions': [Instruction('operator': Rx('angle': 14660c79-70e3-4f2c-b4c2-eb12f285d5cb, 'qubit_count': 1), 'target': QubitSet([Qubit(0)]), 'control': QubitSet([]), 'control_state': (), 'power': 1), Instruction('operator': Rz('angle': 9c6595cb-026d-4887-91ee-39677e92aca4, 'qubit_count': 1), 'target': QubitSet([Qubit(1)]), 'control': QubitSet([]), 'control_state': (), 'power': 1), Instruction('operator': CNot('qubit_count': 2), 'target': QubitSet([Qubit(0), Qubit(1)]), 'control': QubitSet([]), 'control_state': (), 'power': 1), Instruction('operator': Rx('angle': d11d3c63-cd61-473f-b057-23462992e192, 'qubit_count': 1), 'target': QubitSet([Qubit(0)]), 'control': QubitSet([]), 'control_state': (), 'power': 1), Instruction('operator': Rx('angle': b13710f7-5abf-48bf-8069-c0f4387338b6, 'qubit_count': 1), 'target': QubitSet([Qubit(1)]), 'control': QubitSet([]), 'control_state': (), 'power': 1), Instruction('operator': Rx('angle': dbbcf7a9-717c-4d44-8107-b46f55e5ded9, 'qubit_count': 1), 'target': QubitSet([Qubit(2)]), 'control': QubitSet([]), 'control_state': (), 'power': 1), Instruction('operator': Ry('angle': 1fb669e8-2a58-4e60-8f04-d8bc48ed7311, 'qubit_count': 1), 'target': QubitSet([Qubit(0)]), 'control': QubitSet([]), 'control_state': (), 'power': 1), Instruction('operator': Ry('angle': 3324ae38-49d3-4e37-9c1f-410904ec28bf, 'qubit_count': 1), 'target': QubitSet([Qubit(1)]), 'control': QubitSet([]), 'control_state': (), 'power': 1), Instruction('operator': Ry('angle': 15820850-6d3e-4571-8e8e-412fb98fc1c7, 'qubit_count': 1), 'target': QubitSet([Qubit(2)]), 'control': QubitSet([]), 'control_state': (), 'power': 1), Instruction('operator': Rx('angle': b3d3bf74-46ab-4920-9f94-59a8b6845dc7, 'qubit_count': 1), 'target': QubitSet([Qubit(0)]), 'control': QubitSet([]), 'control_state': (), 'power': 1), Instruction('operator': Rx('angle': 1a50df9c-aea3-49e3-8171-0c2478df3b4c, 'qubit_count': 1), 'target': QubitSet([Qubit(1)]), 'control': QubitSet([]), 'control_state': (), 'power': 1), Instruction('operator': Rx('angle': 95a88eaa-2fbe-4423-a8ff-f6a81c6c8201, 'qubit_count': 1), 'target': QubitSet([Qubit(2)]), 'control': QubitSet([]), 'control_state': (), 'power': 1), Instruction('operator': CNot('qubit_count': 2), 'target': QubitSet([Qubit(0), Qubit(1)]), 'control': QubitSet([]), 'control_state': (), 'power': 1), Instruction('operator': CNot('qubit_count': 2), 'target': QubitSet([Qubit(1), Qubit(2)]), 'control': QubitSet([]), 'control_state': (), 'power': 1)])\n</code></pre> <p>Additionally, <code>Converted</code> contains all fixed and variational parameters, as well as an embedding function which accepts feature parameters to construct a dictionary of circuit native parameters. These are needed as each backend uses a different representation of the circuit parameters:</p> <pre><code>import torch\n# Contains fixed parameters and variational (from the HEA)\nconv.params\ninputs = {\"x\": torch.tensor([1., 1.]), \"y\":torch.tensor([2., 2.])}\n# get all circuit parameters (including feature params)\nembedded = conv.embedding_fn(conv.params, inputs)\n</code></pre> <pre><code>conv.params = {\ntheta_7: tensor([0.9841], requires_grad=True)\ntheta_5: tensor([0.1050], requires_grad=True)\ntheta_0: tensor([0.1505], requires_grad=True)\ntheta_4: tensor([0.7986], requires_grad=True)\ntheta_8: tensor([0.8725], requires_grad=True)\ntheta_3: tensor([0.9275], requires_grad=True)\ntheta_6: tensor([0.7025], requires_grad=True)\ntheta_2: tensor([0.8550], requires_grad=True)\ntheta_1: tensor([0.0848], requires_grad=True)\n}\nembedded = {\n14660c79-70e3-4f2c-b4c2-eb12f285d5cb: tensor([3., 3.], grad_fn=&lt;ViewBackward0&gt;)\n9c6595cb-026d-4887-91ee-39677e92aca4: tensor([2., 2.])\nd11d3c63-cd61-473f-b057-23462992e192: tensor([0.1505], grad_fn=&lt;ViewBackward0&gt;)\nb13710f7-5abf-48bf-8069-c0f4387338b6: tensor([0.0848], grad_fn=&lt;ViewBackward0&gt;)\ndbbcf7a9-717c-4d44-8107-b46f55e5ded9: tensor([0.8550], grad_fn=&lt;ViewBackward0&gt;)\n1fb669e8-2a58-4e60-8f04-d8bc48ed7311: tensor([0.9275], grad_fn=&lt;ViewBackward0&gt;)\n3324ae38-49d3-4e37-9c1f-410904ec28bf: tensor([0.7986], grad_fn=&lt;ViewBackward0&gt;)\n15820850-6d3e-4571-8e8e-412fb98fc1c7: tensor([0.1050], grad_fn=&lt;ViewBackward0&gt;)\nb3d3bf74-46ab-4920-9f94-59a8b6845dc7: tensor([0.7025], grad_fn=&lt;ViewBackward0&gt;)\n1a50df9c-aea3-49e3-8171-0c2478df3b4c: tensor([0.9841], grad_fn=&lt;ViewBackward0&gt;)\n95a88eaa-2fbe-4423-a8ff-f6a81c6c8201: tensor([0.8725], grad_fn=&lt;ViewBackward0&gt;)\n}\n</code></pre> <p>Note that above the parameters keys have changed as they now address the keys on the Braket device. A more readable embedding is provided by the PyQTorch backend:</p> <pre><code>from qadence import BackendName, DiffMode\npyq_backend = backend_factory(backend=BackendName.PYQTORCH, diff_mode=DiffMode.AD)\n# the `Converted` object\n# (contains a `ConvertedCircuit` wiht the original and native representation)\npyq_conv = pyq_backend.convert(circuit)\nembedded = pyq_conv.embedding_fn(pyq_conv.params, inputs)\n</code></pre> <pre><code>embedded = {\ntheta_7: tensor([0.9841], grad_fn=&lt;ViewBackward0&gt;)\ntheta_5: tensor([0.1050], grad_fn=&lt;ViewBackward0&gt;)\ntheta_0: tensor([0.1505], grad_fn=&lt;ViewBackward0&gt;)\ntheta_4: tensor([0.7986], grad_fn=&lt;ViewBackward0&gt;)\ny: tensor([2., 2.])\ntheta_8: tensor([0.8725], grad_fn=&lt;ViewBackward0&gt;)\ntheta_6: tensor([0.7025], grad_fn=&lt;ViewBackward0&gt;)\ntheta_3: tensor([0.9275], grad_fn=&lt;ViewBackward0&gt;)\ntheta_2: tensor([0.8550], grad_fn=&lt;ViewBackward0&gt;)\n3*x: tensor([3., 3.], grad_fn=&lt;ViewBackward0&gt;)\ntheta_1: tensor([0.0848], grad_fn=&lt;ViewBackward0&gt;)\n}\n</code></pre> <p>With the embedded parameters, <code>QuantumModel</code> methods are accessible:</p> <pre><code>embedded = conv.embedding_fn(conv.params, inputs)\nsamples = backend.run(conv.circuit, embedded)\nprint(f\"{samples = }\")\n</code></pre> <pre><code>samples = tensor([[ 0.1347-0.2025j, -0.2260-0.1742j,  0.3257+0.0072j,  0.0132+0.2774j,\n-0.2720-0.3532j, -0.4356+0.2895j,  0.3382+0.0606j, -0.0314+0.2912j],\n[ 0.1347-0.2025j, -0.2260-0.1742j,  0.3257+0.0072j,  0.0132+0.2774j,\n-0.2720-0.3532j, -0.4356+0.2895j,  0.3382+0.0606j, -0.0314+0.2912j]])\n</code></pre>"},{"location":"tutorials/backends/#lower-level-the-backend-representation","title":"Lower-level: the <code>Backend</code> representation","text":"<p>If there is a requirement to work with a specific backend, it is possible to access directly the native circuit. For example, Braket noise features can be imported which are not exposed directly by Qadence.</p> <pre><code>from braket.circuits import Noise\n# Get the native Braket circuit with the given parameters\ninputs = {\"x\": torch.rand(1), \"y\":torch.rand(1)}\nembedded = conv.embedding_fn(conv.params, inputs)\nnative = backend.assign_parameters(conv.circuit, embedded)\n# Define a noise channel\nnoise = Noise.Depolarizing(probability=0.1)\n# Add noise to every gate in the circuit\nnative.apply_gate_noise(noise)\n</code></pre> <p>In order to run this noisy circuit, the density matrix simulator is needed in Braket:</p> <p><pre><code>from braket.devices import LocalSimulator\ndevice = LocalSimulator(\"braket_dm\")\nresult = device.run(native, shots=1000).result().measurement_counts\nprint(result)\n</code></pre> <pre><code>Counter({'001': 194, '000': 157, '110': 121, '010': 121, '101': 113, '011': 102, '100': 100, '111': 92})\n</code></pre> <pre><code>print(conv.circuit.native.diagram())\n</code></pre> <pre><code>T  : |                   0                    |                   1                    |                   2                    |                   3                    |                   4                    |5|6|\nq0 : -Rx(14660c79-70e3-4f2c-b4c2-eb12f285d5cb)-C----------------------------------------Rx(d11d3c63-cd61-473f-b057-23462992e192)-Ry(1fb669e8-2a58-4e60-8f04-d8bc48ed7311)-Rx(b3d3bf74-46ab-4920-9f94-59a8b6845dc7)-C---\n|                                                                                                                                                                   |   q1 : -Rz(9c6595cb-026d-4887-91ee-39677e92aca4)-X----------------------------------------Rx(b13710f7-5abf-48bf-8069-c0f4387338b6)-Ry(3324ae38-49d3-4e37-9c1f-410904ec28bf)-Rx(1a50df9c-aea3-49e3-8171-0c2478df3b4c)-X-C-\n| q2 : -Rx(dbbcf7a9-717c-4d44-8107-b46f55e5ded9)-Ry(15820850-6d3e-4571-8e8e-412fb98fc1c7)-Rx(95a88eaa-2fbe-4423-a8ff-f6a81c6c8201)-------------------------------------------------------------------------------------X-\nT  : |                   0                    |                   1                    |                   2                    |                   3                    |                   4                    |5|6|\nUnassigned parameters: [14660c79-70e3-4f2c-b4c2-eb12f285d5cb, 15820850-6d3e-4571-8e8e-412fb98fc1c7, 1a50df9c-aea3-49e3-8171-0c2478df3b4c, 1fb669e8-2a58-4e60-8f04-d8bc48ed7311, 3324ae38-49d3-4e37-9c1f-410904ec28bf, 95a88eaa-2fbe-4423-a8ff-f6a81c6c8201, 9c6595cb-026d-4887-91ee-39677e92aca4, b13710f7-5abf-48bf-8069-c0f4387338b6, b3d3bf74-46ab-4920-9f94-59a8b6845dc7, d11d3c63-cd61-473f-b057-23462992e192, dbbcf7a9-717c-4d44-8107-b46f55e5ded9].\n</code></pre> <pre><code>print(native.diagram())\n</code></pre> <pre><code>T  : |        0         |        1         |        2         |        3         |        4         |     5     |     6     |\nq0 : -Rx(0.55)-DEPO(0.1)-C--------DEPO(0.1)-Rx(0.15)-DEPO(0.1)-Ry(0.93)-DEPO(0.1)-Rx(0.70)-DEPO(0.1)-C-DEPO(0.1)-------------\n|                                                                           |                       q1 : -Rz(0.03)-DEPO(0.1)-X--------DEPO(0.1)-Rx(0.08)-DEPO(0.1)-Ry(0.80)-DEPO(0.1)-Rx(0.98)-DEPO(0.1)-X-DEPO(0.1)-C-DEPO(0.1)-\n|           q2 : -Rx(0.85)-DEPO(0.1)-Ry(0.10)-DEPO(0.1)-Rx(0.87)-DEPO(0.1)---------------------------------------------------X-DEPO(0.1)-\nT  : |        0         |        1         |        2         |        3         |        4         |     5     |     6     |\n</code></pre> </p>"},{"location":"tutorials/getting_started/","title":"Getting started","text":"<p>Quantum programs in Qadence are constructed via a block-system, with an emphasis on composability of primitive blocks to obtain larger, composite blocks. This functional approach is different from other frameworks which follow a more object-oriented way to construct circuits and express programs.</p> How to visualize blocks <p>There are two ways to display blocks in a Python interpreter: either as a tree in ASCII format using <code>print</code>:</p> <p><pre><code>from qadence import X, Y, kron\nkron_block = kron(X(0), Y(1))\nprint(kron_block)\n</code></pre> <pre><code>KronBlock(0,1)\n\u251c\u2500\u2500 X(0)\n\u2514\u2500\u2500 Y(1)\n</code></pre> </p> <p>Or using the visualization package:</p> <p><pre><code>from qadence import X, Y, kron\nfrom qadence.draw import display\nkron_block = kron(X(0), Y(1))\n# display(kron_block)  # un-comment this line\n</code></pre> %3 ddf296c55cf14fca88ebd1ba9aad3d92 0 eb9ab8ebb12d4550b19a6f06b454531c X ddf296c55cf14fca88ebd1ba9aad3d92--eb9ab8ebb12d4550b19a6f06b454531c 9d5900b4b0d24211bea9d8f112ee6b18 1 b00f0f86c98b4024bd1757e9bea2e365 eb9ab8ebb12d4550b19a6f06b454531c--b00f0f86c98b4024bd1757e9bea2e365 a9eb05ae5f934cdcbd35091be6387f63 ee46585badb544469c4e7eb81b704d9b Y 9d5900b4b0d24211bea9d8f112ee6b18--ee46585badb544469c4e7eb81b704d9b ee46585badb544469c4e7eb81b704d9b--a9eb05ae5f934cdcbd35091be6387f63 </p>"},{"location":"tutorials/getting_started/#primitive-blocks","title":"Primitive blocks","text":"<p>A <code>PrimitiveBlock</code> represents a digital or an analog time-evolution quantum operation applied to a qubit support. Programs can always be decomposed down into a sequence of <code>PrimitiveBlock</code> elements.</p> <p>Two canonical examples of digital primitive blocks are the parametrized <code>RX</code> and the <code>CNOT</code> gates:</p> <pre><code>from qadence import RX\n# A rotation gate on qubit 0 with a fixed numerical parameter.\nrx_gate = RX(0, 0.5)\n</code></pre> %3 55feadabbf4649d78a01ea050c6a9349 0 2eed580dabf84cf88a8bba5af5b83db3 RX(0.5) 55feadabbf4649d78a01ea050c6a9349--2eed580dabf84cf88a8bba5af5b83db3 a4f9a1d64b75447ca2361c8636fbcacb 2eed580dabf84cf88a8bba5af5b83db3--a4f9a1d64b75447ca2361c8636fbcacb <pre><code>from qadence import CNOT\n# A CNOT gate with control on qubit 0 and target on qubit 1.\ncnot_gate = CNOT(0, 1)\n</code></pre> %3 2ed7d9adc75e4b0a9658efea15070bb2 0 c5f7bbcc11d748f79a142f74c50e8449 2ed7d9adc75e4b0a9658efea15070bb2--c5f7bbcc11d748f79a142f74c50e8449 a713ae1c60954cf093558e837d02f595 1 59191b28caad450ea53255ee564f2301 c5f7bbcc11d748f79a142f74c50e8449--59191b28caad450ea53255ee564f2301 8cb3443e9a3b4d4db7dacb401f461aae 70212fe1303a4cd087540669af28b977 X a713ae1c60954cf093558e837d02f595--70212fe1303a4cd087540669af28b977 70212fe1303a4cd087540669af28b977--c5f7bbcc11d748f79a142f74c50e8449 70212fe1303a4cd087540669af28b977--8cb3443e9a3b4d4db7dacb401f461aae <p>A list of all instances of primitive blocks (also referred to as operations) can be found here.</p>"},{"location":"tutorials/getting_started/#composite-blocks","title":"Composite Blocks","text":"<p>Programs can be expressed by composing blocks to result in a larger <code>CompositeBlock</code> using three fundamental operations: chain, kron, and add.</p> <ul> <li>chain applies a set of blocks in sequence on the same or overlapping qubit supports and results in a <code>ChainBlock</code> type. It is akin to applying a matrix product of the sub-blocks with the <code>*</code> operator.</li> </ul> <p><pre><code>from qadence import X, chain\n# Chaining on the same qubit using a call to the function.\nchain_x = chain(X(0), X(0))\n</code></pre> %3 a1a4634b0dad49f0a5c41626911bcfd4 0 b02925473c9f4a34aba7d7ca2f3b6503 X a1a4634b0dad49f0a5c41626911bcfd4--b02925473c9f4a34aba7d7ca2f3b6503 b6a2739e63064d0895c219448acacf18 X b02925473c9f4a34aba7d7ca2f3b6503--b6a2739e63064d0895c219448acacf18 b1a3646883d6408fb5b899fa4c11899d b6a2739e63064d0895c219448acacf18--b1a3646883d6408fb5b899fa4c11899d <pre><code># Chaining on different qubits using the operator overload.\n# Identical to the kron operation.\nchain_xx = X(0) * X(1)\n</code></pre> %3 0868254c167a4688a3a14629d5c9b867 0 f3290feb94b444be9368f497d9c5643a X 0868254c167a4688a3a14629d5c9b867--f3290feb94b444be9368f497d9c5643a 04548315ac37481a93613c527d6d7b9e 1 cc175a817f1643dfb1b37ebb5870d602 f3290feb94b444be9368f497d9c5643a--cc175a817f1643dfb1b37ebb5870d602 00f9692b66554ae4a4c8f14105885633 cc175a817f1643dfb1b37ebb5870d602--00f9692b66554ae4a4c8f14105885633 03272a0fc2704f9a9fccbb8446c6403b 9b39026ae1ba40eab2743c5dc886f9bb 04548315ac37481a93613c527d6d7b9e--9b39026ae1ba40eab2743c5dc886f9bb eb21811473d048dcb5e3f87c3e039125 X 9b39026ae1ba40eab2743c5dc886f9bb--eb21811473d048dcb5e3f87c3e039125 eb21811473d048dcb5e3f87c3e039125--03272a0fc2704f9a9fccbb8446c6403b </p> <ul> <li>kron applies a set of blocks in parallel (simultaneously) on disjoint qubit support and results in a <code>KronBlock</code> type. This is akin to applying a tensor product of the sub-blocks with the <code>@</code> operator.</li> </ul> <pre><code>from qadence import X, kron\nkron_xx = kron(X(0), X(1))  # Equivalent to X(0) @ X(1)\n</code></pre> %3 29c2005560494561afcf4ccb7607b492 0 c6c5d8d09a024dfc9a6756d65f117cb7 X 29c2005560494561afcf4ccb7607b492--c6c5d8d09a024dfc9a6756d65f117cb7 ee2f4df6ceb24fcabcc32e6efec1c08a 1 ea6027cafb984761ad3e59f67a5a03b8 c6c5d8d09a024dfc9a6756d65f117cb7--ea6027cafb984761ad3e59f67a5a03b8 234864402e57409ca6c3611cc00bbb62 8948d31ef6e745d28b0b732abd123245 X ee2f4df6ceb24fcabcc32e6efec1c08a--8948d31ef6e745d28b0b732abd123245 8948d31ef6e745d28b0b732abd123245--234864402e57409ca6c3611cc00bbb62 <p>For the digital case, it should be noted that <code>kron</code> and <code>chain</code> are semantically equivalent up to the diagrammatic representation as <code>chain</code> implicitly fills blank wires with identities. However, Qadence also supports analog blocks, for which composing sequentially or in parallel becomes non-equivalent. More about analog blocks can be found in the digital-analog section.</p> <ul> <li>add sums the corresponding matrix of each sub-block and results in a <code>AddBlock</code> type which can be used to construct Pauli operators. Please note that <code>AddBlock</code> can give rise to non-unitary computations that might not be supported by all backends.</li> </ul> Get the matrix of a block <p>It is always possible to retrieve the matrix representation of a block by calling the <code>block.tensor()</code> method. Please note that the returned tensor contains a batch dimension for the purposes of block parametrization.</p> <p><pre><code>\n</code></pre> <pre><code>X(0) * X(0) tensor = tensor([[[1.+0.j, 0.+0.j],\n[0.+0.j, 1.+0.j]]])\nX(0) @ X(1) tensor = tensor([[[0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j],\n[0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j],\n[0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j],\n[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]]])\n</code></pre> </p> <pre><code>from qadence import X, Z\nxz = X(0) + Z(0)\nprint(xz.tensor())\n</code></pre> <pre><code>tensor([[[ 1.+0.j,  1.+0.j],\n[ 1.+0.j, -1.+0.j]]])\n</code></pre> <p>Finally, it is possible to tag blocks with human-readable names:</p> <pre><code>from qadence import X, Y, CNOT, kron, chain, tag\nxy = kron(X(0), Y(1))\ntag(xy, \"subblock\")\ncomposite_block = kron(xy, CNOT(3,4))\nfinal_block = chain(composite_block, composite_block)\n</code></pre> %3 cluster_5a36c4bfd17e4007b7f6cba21d0eaf10 subblock cluster_0291a883aa2b419a974115c64b6763e0 subblock 3b34a6e6818743be9340bf25aeacd0b7 0 7cca348f5b49489099832aa20cf18a5b X 3b34a6e6818743be9340bf25aeacd0b7--7cca348f5b49489099832aa20cf18a5b eeea29fd34174d679d69bec4ac51ea61 1 f0e7e9e29947449187de4da0ed6edf5d X 7cca348f5b49489099832aa20cf18a5b--f0e7e9e29947449187de4da0ed6edf5d ff758855e776409abf9eee8a0d14136a f0e7e9e29947449187de4da0ed6edf5d--ff758855e776409abf9eee8a0d14136a 7fc713b054bd4aeebbfe019e53d5f185 1522a0767fe745339a79bcbece7f31a0 Y eeea29fd34174d679d69bec4ac51ea61--1522a0767fe745339a79bcbece7f31a0 8ae09c1f3b7b4352857e4e3e74453492 2 71b3f948b41e496cb8c0ace147446f0e Y 1522a0767fe745339a79bcbece7f31a0--71b3f948b41e496cb8c0ace147446f0e 71b3f948b41e496cb8c0ace147446f0e--7fc713b054bd4aeebbfe019e53d5f185 c20ad54d8e1d442a8cbdc65582fad90a 8d40d83f3923452eb2803ccfe68cb2c3 8ae09c1f3b7b4352857e4e3e74453492--8d40d83f3923452eb2803ccfe68cb2c3 ced12c67065b461ca6e1bff68d8e23d2 3 27fedd5420a94fbb85d141183a935b39 8d40d83f3923452eb2803ccfe68cb2c3--27fedd5420a94fbb85d141183a935b39 27fedd5420a94fbb85d141183a935b39--c20ad54d8e1d442a8cbdc65582fad90a b5689c01312c4b8bbef4261356e74a0c 67cc40b198de4f4a9d7c810c77f50683 ced12c67065b461ca6e1bff68d8e23d2--67cc40b198de4f4a9d7c810c77f50683 c6e5ea61d3a74970b33bd5bc42ef92b3 4 d17a320dad02473c9d591ef9cebb1b94 67cc40b198de4f4a9d7c810c77f50683--d17a320dad02473c9d591ef9cebb1b94 d17a320dad02473c9d591ef9cebb1b94--b5689c01312c4b8bbef4261356e74a0c 6a681cb97a574981b1a9a4099e089406 d5f52fcbb16c4bc1a4342de52241f883 X c6e5ea61d3a74970b33bd5bc42ef92b3--d5f52fcbb16c4bc1a4342de52241f883 d5f52fcbb16c4bc1a4342de52241f883--67cc40b198de4f4a9d7c810c77f50683 7a71ee2a8e0746c381d761dc6c871566 X d5f52fcbb16c4bc1a4342de52241f883--7a71ee2a8e0746c381d761dc6c871566 7a71ee2a8e0746c381d761dc6c871566--d17a320dad02473c9d591ef9cebb1b94 7a71ee2a8e0746c381d761dc6c871566--6a681cb97a574981b1a9a4099e089406"},{"location":"tutorials/getting_started/#block-execution","title":"Block execution","text":"<p>To quickly run quantum operations and access wavefunctions, samples or expectation values of observables, one can use the convenience functions <code>run</code>, <code>sample</code> and <code>expectation</code>. The following example shows an execution workflow with the natively available <code>PyQTorch</code> backend:</p> <pre><code>from qadence import chain, add, H, Z, run, sample, expectation\nn_qubits = 2\nblock = chain(H(0), H(1))\n# Compute the wavefunction.\n# Please check the documentation for other available backends.\nwf = run(block)\n# Sample the resulting wavefunction with a given number of shots.\nxs = sample(block, n_shots=1000)\n# Compute an expectation based on an observable of Pauli-Z operators.\nobs = add(Z(i) for i in range(n_qubits))\nex = expectation(block, obs)\n</code></pre> <pre><code>wf = tensor([[0.5000+0.j, 0.5000+0.j, 0.5000+0.j, 0.5000+0.j]])\nxs = [Counter({'11': 257, '10': 254, '00': 251, '01': 238})]\nex = tensor([[0.]])\n</code></pre> <p>More fine-grained control and better performance is provided via the high-level <code>QuantumModel</code> abstraction.</p>"},{"location":"tutorials/getting_started/#execution-via-quantumcircuit-and-quantummodel","title":"Execution via <code>QuantumCircuit</code> and <code>QuantumModel</code>","text":"<p>Quantum programs in Qadence are constructed in two steps:</p> <ol> <li>Build a <code>QuantumCircuit</code> which ties together a composite block and a register.</li> <li>Define a <code>QuantumModel</code> which differentiates, compiles and executes the circuit.</li> </ol> <p><code>QuantumCircuit</code> is a central class in Qadence and circuits are abstract objects from the actual hardware/simulator that they are expected to be executed on. They require to specify the <code>Register</code> of resources to execute your program on. Previous examples were already using <code>QuantumCircuit</code> with a <code>Register</code> that fits the qubit support for the given block.</p> <pre><code>from qadence import QuantumCircuit, Register, H, chain\n# NOTE: Run a block which supports two qubits\n# on a register of three qubits.\nregister = Register(3)\ncircuit = QuantumCircuit(register, chain(H(0), H(1)))\n</code></pre> <pre><code>circuit = ChainBlock(0,1)\n\u251c\u2500\u2500 H(0)\n\u2514\u2500\u2500 H(1)\n</code></pre> <p>Registers and qubit supports</p> <p>Registers can also be constructed from qubit coordinates to create arbitrary register topologies. See details in the digital-analog section. Qubit supports are subsets of the circuit register tied to blocks.</p> <p><code>QuantumModel</code> is another central class in Qadence. It specifies a Backend for the differentiation, compilation and execution of the abstract circuit.</p> <pre><code>from qadence import BackendName, DiffMode, QuantumCircuit, QuantumModel, Register, H, chain\nreg = Register(3)\ncirc = QuantumCircuit(reg, chain(H(0), H(1)))\nmodel = QuantumModel(circ, backend=BackendName.PYQTORCH, diff_mode=DiffMode.AD)\nxs = model.sample(n_shots=100)\n</code></pre> <pre><code>xs = [Counter({'110': 30, '100': 28, '010': 22, '000': 20})]\n</code></pre> <p>For more details on <code>QuantumModel</code>, see here.</p>"},{"location":"tutorials/hamiltonians/","title":"Constructing arbitrary Hamiltonians","text":"<p>At the heart of digital-analog quantum computing is the description and execution of analog blocks, which represent a set of interacting qubits under some interaction Hamiltonian. For this purpose, Qadence relies on the <code>hamiltonian_factory</code> function to create arbitrary Hamiltonian blocks to be used as generators of <code>HamEvo</code> or as observables to be measured.</p>"},{"location":"tutorials/hamiltonians/#arbitrary-all-to-all-hamiltonians","title":"Arbitrary all-to-all Hamiltonians","text":"<p>Arbitrary all-to-all interaction Hamiltonians can be easily created by passing the number of qubits in the first argument. The type of <code>interaction</code> can be chosen from the available ones in the <code>Interaction</code> enum type.</p> <pre><code>from qadence import hamiltonian_factory\nfrom qadence import N, X, Y, Z\nfrom qadence import Interaction\nn_qubits = 3\nhamilt = hamiltonian_factory(n_qubits, interaction=Interaction.ZZ)\n</code></pre> <pre><code>AddBlock(0,1,2)\n\u251c\u2500\u2500 [mul: 1.00000000000000] \u2502   \u2514\u2500\u2500 KronBlock(0,1)\n\u2502       \u251c\u2500\u2500 Z(0)\n\u2502       \u2514\u2500\u2500 Z(1)\n\u251c\u2500\u2500 [mul: 1.00000000000000] \u2502   \u2514\u2500\u2500 KronBlock(0,2)\n\u2502       \u251c\u2500\u2500 Z(0)\n\u2502       \u2514\u2500\u2500 Z(2)\n\u2514\u2500\u2500 [mul: 1.00000000000000] \u2514\u2500\u2500 KronBlock(1,2)\n\u251c\u2500\u2500 Z(1)\n\u2514\u2500\u2500 Z(2)\n</code></pre> <p>Single-qubit terms can also be added by passing the respective operator directly to the <code>detuning</code> argument. For example, the total magnetization is commonly used as an observable to be measured:</p> <pre><code>total_mag = hamiltonian_factory(n_qubits, detuning = Z)\n</code></pre> <pre><code>AddBlock(0,1,2)\n\u251c\u2500\u2500 [mul: 1.00000000000000] \u2502   \u2514\u2500\u2500 Z(0)\n\u251c\u2500\u2500 [mul: 1.00000000000000] \u2502   \u2514\u2500\u2500 Z(1)\n\u2514\u2500\u2500 [mul: 1.00000000000000] \u2514\u2500\u2500 Z(2)\n</code></pre> <p>For further customization, arbitrary coefficients can be passed as arrays to the <code>interaction_strength</code> and <code>detuning_strength</code> arguments for the two-qubits and single-qubit terms respectively.</p> <pre><code>n_qubits = 3\nhamilt = hamiltonian_factory(\nn_qubits,\ninteraction=Interaction.ZZ,\ndetuning=Z,\ninteraction_strength=[0.5, 0.2, 0.1],\ndetuning_strength=[0.1, 0.5, -0.3]\n)\n</code></pre> <pre><code>AddBlock(0,1,2)\n\u251c\u2500\u2500 [mul: 0.100] \u2502   \u2514\u2500\u2500 Z(0)\n\u251c\u2500\u2500 [mul: 0.500] \u2502   \u2514\u2500\u2500 Z(1)\n\u251c\u2500\u2500 [mul: -0.300] \u2502   \u2514\u2500\u2500 Z(2)\n\u251c\u2500\u2500 [mul: 0.500] \u2502   \u2514\u2500\u2500 KronBlock(0,1)\n\u2502       \u251c\u2500\u2500 Z(0)\n\u2502       \u2514\u2500\u2500 Z(1)\n\u251c\u2500\u2500 [mul: 0.200] \u2502   \u2514\u2500\u2500 KronBlock(0,2)\n\u2502       \u251c\u2500\u2500 Z(0)\n\u2502       \u2514\u2500\u2500 Z(2)\n\u2514\u2500\u2500 [mul: 0.100] \u2514\u2500\u2500 KronBlock(1,2)\n\u251c\u2500\u2500 Z(1)\n\u2514\u2500\u2500 Z(2)\n</code></pre> <p>Ordering interaction strengths matters</p> <p>When passing interaction strengths as an array, the ordering must be identical to the one obtained from the <code>edges</code> property of a Qadence <code>Register</code>:</p> <p><pre><code>from qadence import Register\nprint(Register(n_qubits).edges)\n</code></pre> <pre><code>[(0, 1), (0, 2), (1, 2)]\n</code></pre> </p> <p>For one more example, let's create a transverse-field Ising model,</p> <pre><code>n_qubits = 4\nn_edges = int(0.5 * n_qubits * (n_qubits - 1))\nz_terms = [1.0] * n_qubits\nzz_terms = [2.0] * n_edges\nzz_ham = hamiltonian_factory(\nn_qubits,\ninteraction=Interaction.ZZ,\ndetuning=Z,\ninteraction_strength=zz_terms,\ndetuning_strength=z_terms\n)\nx_terms = [-1.0] * n_qubits\nx_ham = hamiltonian_factory(n_qubits, detuning = X, detuning_strength = x_terms)\ntransverse_ising = zz_ham + x_ham\n</code></pre> <pre><code>AddBlock(0,1,2,3)\n\u251c\u2500\u2500 AddBlock(0,1,2,3)\n\u2502   \u251c\u2500\u2500 [mul: 1.00000000000000] \u2502   \u2502   \u2514\u2500\u2500 Z(0)\n\u2502   \u251c\u2500\u2500 [mul: 1.00000000000000] \u2502   \u2502   \u2514\u2500\u2500 Z(1)\n\u2502   \u251c\u2500\u2500 [mul: 1.00000000000000] \u2502   \u2502   \u2514\u2500\u2500 Z(2)\n\u2502   \u251c\u2500\u2500 [mul: 1.00000000000000] \u2502   \u2502   \u2514\u2500\u2500 Z(3)\n\u2502   \u251c\u2500\u2500 [mul: 2.00000000000000] \u2502   \u2502   \u2514\u2500\u2500 KronBlock(0,1)\n\u2502   \u2502       \u251c\u2500\u2500 Z(0)\n\u2502   \u2502       \u2514\u2500\u2500 Z(1)\n\u2502   \u251c\u2500\u2500 [mul: 2.00000000000000] \u2502   \u2502   \u2514\u2500\u2500 KronBlock(0,2)\n\u2502   \u2502       \u251c\u2500\u2500 Z(0)\n\u2502   \u2502       \u2514\u2500\u2500 Z(2)\n\u2502   \u251c\u2500\u2500 [mul: 2.00000000000000] \u2502   \u2502   \u2514\u2500\u2500 KronBlock(0,3)\n\u2502   \u2502       \u251c\u2500\u2500 Z(0)\n\u2502   \u2502       \u2514\u2500\u2500 Z(3)\n\u2502   \u251c\u2500\u2500 [mul: 2.00000000000000] \u2502   \u2502   \u2514\u2500\u2500 KronBlock(1,2)\n\u2502   \u2502       \u251c\u2500\u2500 Z(1)\n\u2502   \u2502       \u2514\u2500\u2500 Z(2)\n\u2502   \u251c\u2500\u2500 [mul: 2.00000000000000] \u2502   \u2502   \u2514\u2500\u2500 KronBlock(1,3)\n\u2502   \u2502       \u251c\u2500\u2500 Z(1)\n\u2502   \u2502       \u2514\u2500\u2500 Z(3)\n\u2502   \u2514\u2500\u2500 [mul: 2.00000000000000] \u2502       \u2514\u2500\u2500 KronBlock(2,3)\n\u2502           \u251c\u2500\u2500 Z(2)\n\u2502           \u2514\u2500\u2500 Z(3)\n\u2514\u2500\u2500 AddBlock(0,1,2,3)\n\u251c\u2500\u2500 [mul: -1.00000000000000] \u2502   \u2514\u2500\u2500 X(0)\n\u251c\u2500\u2500 [mul: -1.00000000000000] \u2502   \u2514\u2500\u2500 X(1)\n\u251c\u2500\u2500 [mul: -1.00000000000000] \u2502   \u2514\u2500\u2500 X(2)\n\u2514\u2500\u2500 [mul: -1.00000000000000] \u2514\u2500\u2500 X(3)\n</code></pre> <p>Random interaction coefficients</p> <p>Random interaction coefficients can be chosen between -1 and 1 by simply passing <code>random_strength = True</code> instead of <code>detuning_strength</code> and <code>interaction_strength</code>.</p>"},{"location":"tutorials/hamiltonians/#arbitrary-hamiltonian-topologies","title":"Arbitrary Hamiltonian topologies","text":"<p>Arbitrary interaction topologies can be created using the Qadence <code>Register</code>. Simply pass the register with the desired topology as the first argument to the <code>hamiltonian_factory</code>:</p> <pre><code>from qadence import Register\nreg = Register.square(qubits_side=2)\nsquare_hamilt = hamiltonian_factory(reg, interaction=Interaction.NN)\n</code></pre> <pre><code>AddBlock(0,1,2,3)\n\u251c\u2500\u2500 [mul: 1.00000000000000] \u2502   \u2514\u2500\u2500 KronBlock(0,1)\n\u2502       \u251c\u2500\u2500 N(0)\n\u2502       \u2514\u2500\u2500 N(1)\n\u251c\u2500\u2500 [mul: 1.00000000000000] \u2502   \u2514\u2500\u2500 KronBlock(0,3)\n\u2502       \u251c\u2500\u2500 N(0)\n\u2502       \u2514\u2500\u2500 N(3)\n\u251c\u2500\u2500 [mul: 1.00000000000000] \u2502   \u2514\u2500\u2500 KronBlock(1,2)\n\u2502       \u251c\u2500\u2500 N(1)\n\u2502       \u2514\u2500\u2500 N(2)\n\u2514\u2500\u2500 [mul: 1.00000000000000] \u2514\u2500\u2500 KronBlock(2,3)\n\u251c\u2500\u2500 N(2)\n\u2514\u2500\u2500 N(3)\n</code></pre> <p>Custom Hamiltonian coefficients can also be added to the register beforehand using the <code>\"strength\"</code> key.</p> <pre><code>reg = Register.square(qubits_side = 2)\nfor i, edge in enumerate(reg.edges):\nreg.edges[edge][\"strength\"] = (0.5 * i) ** 2\nsquare_hamilt = hamiltonian_factory(reg, interaction=Interaction.NN)\n</code></pre> <pre><code>AddBlock(0,1,2,3)\n\u251c\u2500\u2500 [mul: 0.0] \u2502   \u2514\u2500\u2500 KronBlock(0,1)\n\u2502       \u251c\u2500\u2500 N(0)\n\u2502       \u2514\u2500\u2500 N(1)\n\u251c\u2500\u2500 [mul: 0.250] \u2502   \u2514\u2500\u2500 KronBlock(0,3)\n\u2502       \u251c\u2500\u2500 N(0)\n\u2502       \u2514\u2500\u2500 N(3)\n\u251c\u2500\u2500 [mul: 1.00000000000000] \u2502   \u2514\u2500\u2500 KronBlock(1,2)\n\u2502       \u251c\u2500\u2500 N(1)\n\u2502       \u2514\u2500\u2500 N(2)\n\u2514\u2500\u2500 [mul: 2.250] \u2514\u2500\u2500 KronBlock(2,3)\n\u251c\u2500\u2500 N(2)\n\u2514\u2500\u2500 N(3)\n</code></pre> <p>Alternatively, if the register already stores interaction or detuning strengths, it is possible to override them in the Hamiltonian creation by using <code>force_update = True</code>.</p>"},{"location":"tutorials/hamiltonians/#adding-variational-parameters","title":"Adding variational parameters","text":"<p>Finally, fully parameterized Hamiltonians can be created by passing a string to the strength arguments:</p> <pre><code>n_qubits = 3\nnn_ham = hamiltonian_factory(\nn_qubits,\ninteraction=Interaction.NN,\ndetuning=N,\ninteraction_strength=\"c\",\ndetuning_strength=\"d\"\n)\n</code></pre> <pre><code>AddBlock(0,1,2)\n\u251c\u2500\u2500 [mul: d_0] \u2502   \u2514\u2500\u2500 N(0)\n\u251c\u2500\u2500 [mul: d_1] \u2502   \u2514\u2500\u2500 N(1)\n\u251c\u2500\u2500 [mul: d_2] \u2502   \u2514\u2500\u2500 N(2)\n\u251c\u2500\u2500 [mul: c_01] \u2502   \u2514\u2500\u2500 KronBlock(0,1)\n\u2502       \u251c\u2500\u2500 N(0)\n\u2502       \u2514\u2500\u2500 N(1)\n\u251c\u2500\u2500 [mul: c_02] \u2502   \u2514\u2500\u2500 KronBlock(0,2)\n\u2502       \u251c\u2500\u2500 N(0)\n\u2502       \u2514\u2500\u2500 N(2)\n\u2514\u2500\u2500 [mul: c_12] \u2514\u2500\u2500 KronBlock(1,2)\n\u251c\u2500\u2500 N(1)\n\u2514\u2500\u2500 N(2)\n</code></pre>"},{"location":"tutorials/overlap/","title":"Wavefunction overlaps","text":"<p>Qadence offers convenience functions for computing the overlap between the wavefunctions generated by two quantum circuits \\(U\\) and \\(W\\) as:</p> \\[ S = |\\langle \\psi_U | \\psi_W \\rangle|^2 \\quad \\textrm{where} \\quad \\psi_U = U|\\psi_0\\rangle \\] <p>Here is an example on how to compute the overlap between two very simple parametric circuits consisting of a single <code>RX</code> rotation on different qubits. The overlap is expected to be non-zero only when the rotation angle is different from \\(\\pi \\; \\textrm{mod}\\; 2\\pi\\) for both rotations:</p> <pre><code>import torch\nimport numpy as np\nfrom qadence import Overlap, OverlapMethod, QuantumCircuit, H, RX, X, FeatureParameter, hea\n# Create two quantum circuits\n# with a single qubit rotation on two random qubits\nn_qubits = 4\nqubits = np.random.choice(n_qubits, n_qubits, replace=False)\nphi = FeatureParameter(\"phi\")\ncircuit_bra = QuantumCircuit(n_qubits, RX(qubits[0], phi))\npsi = FeatureParameter(\"psi\")\ncircuit_ket = QuantumCircuit(n_qubits, RX(qubits[1], psi))\n# Values for the feature parameters\nvalues_bra = {\"phi\": torch.Tensor([torch.pi / 2, torch.pi])}\nvalues_ket = {\"psi\": torch.Tensor([torch.pi / 2, torch.pi])}\n# Calculate overlap by assigning values to the given bra and ket circuits\novrlp = Overlap(circuit_bra, circuit_ket)\novrlp = ovrlp(bra_param_values=values_bra, ket_param_values=values_ket)\n</code></pre> <pre><code>Overlap with exact method:\ntensor([[2.5000e-01, 1.8747e-33],\n[1.8747e-33, 1.4058e-65]])\n</code></pre> <p>The <code>Overlap</code> class above inherits from <code>QuantumModel</code> and is executed through its inherited forward method for the given input parameter values. By default, the overlap is computed exactly by performing the dot product of the wavefunction propagated from bra and ket circuits.</p> <p>However, it is possible to choose a different method from the <code>OverlapMethod</code> enumeration to be passed via the <code>overlap_method</code> argument in the <code>Overlap</code> initializer. Currently, one can choose from:</p> <ul> <li><code>EXACT</code>: exact computation using the wavefunction matrix representation. Does not work with real devices since it assumes access to the complete qubit system wavefunction.</li> <li><code>COMPUTE_UNCOMPUTE</code>: exact or sampling-based computation using bra \\(U\\) and ket \\(W^{\\dagger}\\) unitaries.</li> <li><code>SWAP_TEST</code>: exact or sampling-based computation using the SWAP test method.</li> <li><code>HADAMARD_TEST</code>: exact or sampling-based computation using the Hadamard test method.</li> <li><code>JENSEN_SHANNON</code>: compute the overlap using the Jensen-Shannon divergence of the two probability distributions obtained by sampling the propagated circuits. This will yield a different result than the other methods.</li> </ul> <p>All methods (except for the <code>EXACT</code> method) take an optional <code>n_shots</code> argument which can be used to perform shot-based calculations.</p> <p>Warning</p> <p>If you select a finite number of shots, the overlap is not differentiable. Therefore, it cannot be used as output of a quantum model if gradients are required.</p> <pre><code># Calculate overlap with SWAP test\novrlp = Overlap(circuit_bra, circuit_ket, method=OverlapMethod.SWAP_TEST)\novrlp_ha = ovrlp(values_bra, values_ket)\n# Calculate overlap with SWAP test\n# using a finite number of shots\novrlp = Overlap(circuit_bra, circuit_ket, method=OverlapMethod.SWAP_TEST)\novrlp_ha = ovrlp(values_bra, values_ket, n_shots=10_000)\n</code></pre> <pre><code>Overlap with SWAP test:\ntensor([[ 2.5000e-01, -3.3307e-16],\n[-3.3307e-16, -4.4409e-16]])\nOverlap with SWAP test with finite number of shots:\ntensor([[ 0.2624, -0.0138],\n[ 0.0116,  0.0006]])\n</code></pre>"},{"location":"tutorials/parameters/","title":"Parametric programs","text":"<p>Qadence base <code>Parameter</code> type is a subtype of <code>sympy.Symbol</code>. There are three kinds of parameter subtypes used:</p> <ul> <li>Fixed Parameter: A constant with a fixed, non-trainable value (e.g. \\(\\dfrac{\\pi}{2}\\)).</li> <li>Variational Parameter: A trainable parameter which can be optimized.</li> <li>Feature Parameter: A non-trainable parameter which can be used to encode classical data into a quantum state.</li> </ul>"},{"location":"tutorials/parameters/#fixed-parameters","title":"Fixed Parameters","text":"<p>To pass a fixed parameter to a gate (or any parametrizable block), one can simply use either Python numeric types or wrapped in a <code>torch.Tensor</code>.</p> <pre><code>from torch import pi\nfrom qadence import RX, run\n# Let's use a torch type.\nblock = RX(0, pi)\nwf = run(block)\n# Let's pass a simple float.\nblock = RX(0, 1.)\nwf = run(block)\n</code></pre> <pre><code>wf = tensor([[6.1232e-17+0.j, 0.0000e+00-1.j]])\nwf = tensor([[0.8776+0.0000j, 0.0000-0.4794j]])\n</code></pre>"},{"location":"tutorials/parameters/#variational-parameters","title":"Variational Parameters","text":"<p>To parametrize a block by an angle <code>theta</code>, either a Python <code>string</code> or an instance of  <code>VariationalParameter</code> can be passed instead of a numeric type to the gate constructor:</p> <pre><code>from qadence import RX, run, VariationalParameter\nblock = RX(0, \"theta\")\n# This is equivalent to:\nblock = RX(0, VariationalParameter(\"theta\"))\nwf = run(block)\n</code></pre> <pre><code>wf = tensor([[0.9974+0.0000j, 0.0000-0.0725j]])\n</code></pre> <p>In the first case in the above example, <code>theta</code> is automatically inferred as a <code>VariationalParameter</code> (i.e. trainable). It is initialized to a random value for the purposes of execution. In the context of a <code>QuantumModel</code>, there is no need to pass a value for <code>theta</code> to the <code>run</code> method since it is stored within the underlying model parameter dictionary.</p>"},{"location":"tutorials/parameters/#feature-parameters","title":"Feature Parameters","text":"<p><code>FeatureParameter</code> types (i.e. inputs), always need to be provided with a value or a batch of values as a dictionary:</p> <pre><code>from torch import tensor\nfrom qadence import RX, run, FeatureParameter\nblock = RX(0, FeatureParameter(\"phi\"))\nwf = run(block, values={\"phi\": tensor([1., 2.])})\n</code></pre> <pre><code>wf = tensor([[0.8776+0.0000j, 0.0000-0.4794j],\n[0.5403+0.0000j, 0.0000-0.8415j]])\n</code></pre> <p>Now, <code>run</code> returns a batch of states, one for every provided angle which coincides with the value of the particular <code>FeatureParameter</code>.</p>"},{"location":"tutorials/parameters/#multiparameter-expressions","title":"Multiparameter Expressions","text":"<p>However, an angle can itself be an expression <code>Parameter</code> types of any kind. As such, any sympy expression <code>expr: sympy.Basic</code> consisting of a combination of free symbols (i.e. <code>sympy</code> types) and Qadence <code>Parameter</code> can be passed to a block, including trigonometric functions.</p> <pre><code>from torch import tensor\nfrom qadence import RX, Parameter, run, FeatureParameter\nfrom sympy import sin\ntheta, phi = Parameter(\"theta\"), FeatureParameter(\"phi\")\nblock = RX(0, sin(theta+phi))\n# Remember, to run the block, only FeatureParameter values have to be provided:\nvalues = {\"phi\": tensor([1.0, 2.0])}\nwf = run(block, values=values)\n</code></pre> <pre><code>wf = tensor([[0.8777+0.0000j, 0.0000-0.4793j],\n[0.9664+0.0000j, 0.0000-0.2571j]])\n</code></pre>"},{"location":"tutorials/parameters/#parameters-redundancy","title":"Parameters Redundancy","text":"<p>Parameters are uniquely defined by their name and redundancy is allowed in composite blocks to assign the same value to different blocks.</p> <pre><code>import torch\nfrom qadence import RX, RY, run, chain, kron\nblock = chain(\nkron(RX(0, \"phi\"), RY(1, \"theta\")),\nkron(RX(0, \"phi\"), RY(1, \"theta\")),\n)\nwf = run(block)  # Same random initialization for all instances of phi and theta.\n</code></pre> <pre><code>wf = tensor([[0.8728+0.0000j, 0.2312+0.0000j, 0.0000-0.4155j, 0.0000-0.1101j]])\n</code></pre>"},{"location":"tutorials/parameters/#parametrized-circuits","title":"Parametrized Circuits","text":"<p>Now, let's have a look at the construction of a variational ansatz which composes <code>FeatureParameter</code> and <code>VariationalParameter</code> types:</p> <pre><code>import sympy\nfrom qadence import RX, RY, RZ, CNOT, Z, run, chain, kron, FeatureParameter, VariationalParameter\nphi = FeatureParameter(\"phi\")\ntheta = VariationalParameter(\"theta\")\nblock = chain(\nkron(\nRX(0, phi/theta),\nRY(1, theta*2),\nRZ(2, sympy.cos(phi)),\n),\nkron(\nRX(0, phi),\nRY(1, theta),\nRZ(2, phi),\n),\nkron(\nRX(0, phi),\nRY(1, theta),\nRZ(2, phi),\n),\nkron(\nRX(0, phi + theta),\nRY(1, theta**2),\nRZ(2, sympy.cos(phi)),\n),\nchain(CNOT(0,1), CNOT(1,2))\n)\nblock.tag = \"Rotations\"\nobs = 2*kron(*map(Z, range(3)))\nblock = chain(block, obs)\n</code></pre> %3 cluster_662b4c380840489bbd44521a9bcd7c01 [* 2] cluster_0122072b574a450b83cf89aada226e9c Rotations 4221a4c5b1424fa8bdd3110ac8ecb14f 0 ed34e7b0c9e14950b9d7c3ba214274f6 RX(phi/theta) 4221a4c5b1424fa8bdd3110ac8ecb14f--ed34e7b0c9e14950b9d7c3ba214274f6 5f620733562e437aa64301b332d90007 1 3e435e91fc9e4dacb6eee51b31693cbd RX(phi) ed34e7b0c9e14950b9d7c3ba214274f6--3e435e91fc9e4dacb6eee51b31693cbd b4d7a4d2c503467c87e024e247381180 RX(phi) 3e435e91fc9e4dacb6eee51b31693cbd--b4d7a4d2c503467c87e024e247381180 a6231ac1ff1d4e279c0750bf0e529baf RX(phi + theta) b4d7a4d2c503467c87e024e247381180--a6231ac1ff1d4e279c0750bf0e529baf 1dfcbc1d02964217bd4cb1dc9466fc27 a6231ac1ff1d4e279c0750bf0e529baf--1dfcbc1d02964217bd4cb1dc9466fc27 8151fe96932e41228c0f6ba475ab6f85 1dfcbc1d02964217bd4cb1dc9466fc27--8151fe96932e41228c0f6ba475ab6f85 1ac14151d78942f9bfb2dccda7d9194e Z 8151fe96932e41228c0f6ba475ab6f85--1ac14151d78942f9bfb2dccda7d9194e c32b14d9598e4634aec6582ffa11ae58 1ac14151d78942f9bfb2dccda7d9194e--c32b14d9598e4634aec6582ffa11ae58 6aa089fee2fa4d9fb692ea186ccebbb6 70aa639923024920a6a3e998ffc355cf RY(2*theta) 5f620733562e437aa64301b332d90007--70aa639923024920a6a3e998ffc355cf 4983915510664a14af9adc71191c77fd 2 ae2bb1743806443092e1c57c67b54544 RY(theta) 70aa639923024920a6a3e998ffc355cf--ae2bb1743806443092e1c57c67b54544 979f228d11f044d49689950fdf2a0148 RY(theta) ae2bb1743806443092e1c57c67b54544--979f228d11f044d49689950fdf2a0148 10386081c3b9462eaafd3cdfa94f9f89 RY(theta**2) 979f228d11f044d49689950fdf2a0148--10386081c3b9462eaafd3cdfa94f9f89 4b002949a9574e0a8e8d02de0cdf0a0f X 10386081c3b9462eaafd3cdfa94f9f89--4b002949a9574e0a8e8d02de0cdf0a0f 4b002949a9574e0a8e8d02de0cdf0a0f--1dfcbc1d02964217bd4cb1dc9466fc27 462f292ed96c4c518fd571c5aaf218d8 4b002949a9574e0a8e8d02de0cdf0a0f--462f292ed96c4c518fd571c5aaf218d8 8a802e2476864473a24f159ffef64be0 Z 462f292ed96c4c518fd571c5aaf218d8--8a802e2476864473a24f159ffef64be0 8a802e2476864473a24f159ffef64be0--6aa089fee2fa4d9fb692ea186ccebbb6 84d9106083844f94ab3cac7f152a9bc9 09683d5db22d41148f3f5a5d5e5f285b RZ(cos(phi)) 4983915510664a14af9adc71191c77fd--09683d5db22d41148f3f5a5d5e5f285b 808408fce2834fddaa3da1e9446616ad RZ(phi) 09683d5db22d41148f3f5a5d5e5f285b--808408fce2834fddaa3da1e9446616ad 3b63db799f1c4e36b16343bc594a4e86 RZ(phi) 808408fce2834fddaa3da1e9446616ad--3b63db799f1c4e36b16343bc594a4e86 c0635e38225741dbbc213b196758e107 RZ(cos(phi)) 3b63db799f1c4e36b16343bc594a4e86--c0635e38225741dbbc213b196758e107 c822bd707d1b4e6a963c10fe0b9d5c7f c0635e38225741dbbc213b196758e107--c822bd707d1b4e6a963c10fe0b9d5c7f 01f5ed75d02446a298706c23348c1b2b X c822bd707d1b4e6a963c10fe0b9d5c7f--01f5ed75d02446a298706c23348c1b2b 01f5ed75d02446a298706c23348c1b2b--462f292ed96c4c518fd571c5aaf218d8 91cc75f90b82468a925b94d08ad70edb Z 01f5ed75d02446a298706c23348c1b2b--91cc75f90b82468a925b94d08ad70edb 91cc75f90b82468a925b94d08ad70edb--84d9106083844f94ab3cac7f152a9bc9 <p>Please note the different colors for the parametrization with different types. The default palette assigns light blue for <code>VariationalParameter</code>, light green for <code>FeatureParameter</code> and shaded red for observables.</p>"},{"location":"tutorials/parameters/#parametrized-quantummodels","title":"Parametrized QuantumModels","text":"<p>As a quick reminder: <code>FeatureParameter</code> are used for data input and data encoding into a quantum state. <code>VariationalParameter</code> are trainable parameters in a variational ansatz. When used within a <code>QuantumModel</code>, an abstract quantum circuit is made differentiable with respect to both variational and feature parameters which are uniquely identified by their name.</p> <pre><code>from qadence import FeatureParameter, Parameter, VariationalParameter\n# Feature parameters are non-trainable parameters.\n# Their primary use is input data encoding.\nfp = FeatureParameter(\"x\")\nassert fp == Parameter(\"x\", trainable=False)\n# Variational parameters are trainable parameters.\n# Their primary use is for optimization.\nvp = VariationalParameter(\"y\")\nassert vp == Parameter(\"y\", trainable=True)\n</code></pre> <p>Let's construct a parametric quantum circuit.</p> <pre><code>from qadence import QuantumCircuit, RX, RY, chain, kron\ntheta = VariationalParameter(\"theta\")\nphi = FeatureParameter(\"phi\")\nblock = chain(\nkron(RX(0, theta), RY(1, theta)),\nkron(RX(0, phi), RY(1, phi)),\n)\ncircuit = QuantumCircuit(2, block)\nunique_params = circuit.unique_parameters\n</code></pre> <pre><code>unique_params = [theta, phi]\n</code></pre> <p>In the circuit above, four parameters are defined but only two unique names. Therefore, there will be only one variational parameter to be optimized.</p> <p>The <code>QuantumModel</code> class also provides convenience methods to manipulate parameters.</p> <pre><code>from qadence import QuantumModel, BackendName, DiffMode\nmodel = QuantumModel(circuit, backend=BackendName.PYQTORCH, diff_mode=DiffMode.AD)\nnum_vparams = model.num_vparams # get the number of variational parameters\nvparams_values = model.vparams\n</code></pre> <pre><code>num_vparams = 1\nvparams_values = OrderedDict([('theta', tensor([0.4176]))])\n</code></pre> <p>Only provide feature parameter values to the quantum model</p> <p>In order to <code>run</code> the variational circuit only feature parameter values have to be provided. Variational parameters are stored in the model itself. If multiple feature parameters are present, values must be provided in batches of same length.</p> <p><pre><code>import torch\nvalues = {\"phi\": torch.rand(3)} # theta does not appear here\nwf = model.run(values)\n</code></pre> <pre><code>wf = tensor([[0.7455+0.0000j, 0.4356+0.0000j, 0.0000-0.4356j, 0.0000-0.2545j],\n[0.6912+0.0000j, 0.4620+0.0000j, 0.0000-0.4620j, 0.0000-0.3088j],\n[0.9451+0.0000j, 0.2277+0.0000j, 0.0000-0.2277j, 0.0000-0.0549j]],\ngrad_fn=&lt;TBackward0&gt;)\n</code></pre> </p>"},{"location":"tutorials/parameters/#standard-constructors","title":"Standard constructors","text":"<p>The unique parameter identification is relevant when using built-in Qadence block constructors in the <code>qadence.constructors</code> module such as feature maps and hardware efficient ansatze (HEA).</p> <p><pre><code>from qadence import QuantumCircuit, hea\nn_qubits = 4\ndepth = 2\nhea1 = hea(n_qubits=n_qubits, depth=depth)\ncircuit = QuantumCircuit(n_qubits, hea1)\nnum_unique_parameters = circuit.num_unique_parameters\n</code></pre> <pre><code>Unique parameters with a single HEA: 24\n</code></pre> %3 9576c4fbdd3444ccb078207530487c55 0 444652542bbb491c9437a2a9406fd4f3 RX(theta\u2080) 9576c4fbdd3444ccb078207530487c55--444652542bbb491c9437a2a9406fd4f3 ba04c4d62c894452833197ba81cc7b18 1 d93c9aa480a24dda8c2434ff74b6bb82 RY(theta\u2084) 444652542bbb491c9437a2a9406fd4f3--d93c9aa480a24dda8c2434ff74b6bb82 1d6d19f2c08d407c828e95808c45d8c1 RX(theta\u2088) d93c9aa480a24dda8c2434ff74b6bb82--1d6d19f2c08d407c828e95808c45d8c1 133852c0b39743889a1089e3f089534a 1d6d19f2c08d407c828e95808c45d8c1--133852c0b39743889a1089e3f089534a bb64f2fbead84d5c84ba7f96a46460e5 133852c0b39743889a1089e3f089534a--bb64f2fbead84d5c84ba7f96a46460e5 bd9e9b36f1614cf79ffa5279a41e322a RX(theta\u2081\u2082) bb64f2fbead84d5c84ba7f96a46460e5--bd9e9b36f1614cf79ffa5279a41e322a e14190543d4c42679e2fa028a52ebaab RY(theta\u2081\u2086) bd9e9b36f1614cf79ffa5279a41e322a--e14190543d4c42679e2fa028a52ebaab 786f4958dc884e1ab8f75850df91105d RX(theta\u2082\u2080) e14190543d4c42679e2fa028a52ebaab--786f4958dc884e1ab8f75850df91105d 29c11a8d9084447ea983ca1cba469494 786f4958dc884e1ab8f75850df91105d--29c11a8d9084447ea983ca1cba469494 32ddd6cf8b854770b29e1d9ed731e993 29c11a8d9084447ea983ca1cba469494--32ddd6cf8b854770b29e1d9ed731e993 9b3c596cd93842598aebe690f9d7c68e 32ddd6cf8b854770b29e1d9ed731e993--9b3c596cd93842598aebe690f9d7c68e d4a1a5a245f142529678e50acf2425bd 190beffa9e7641d4b6ac44364daa9b4f RX(theta\u2081) ba04c4d62c894452833197ba81cc7b18--190beffa9e7641d4b6ac44364daa9b4f 051fc2597f13490a9071ccdeff513a7e 2 1aa0e96e236b4a599abd9f8e70db7692 RY(theta\u2085) 190beffa9e7641d4b6ac44364daa9b4f--1aa0e96e236b4a599abd9f8e70db7692 7966187987c94affa8737297b2941139 RX(theta\u2089) 1aa0e96e236b4a599abd9f8e70db7692--7966187987c94affa8737297b2941139 7f1f1403fb9349a3943a5097ff235b3a X 7966187987c94affa8737297b2941139--7f1f1403fb9349a3943a5097ff235b3a 7f1f1403fb9349a3943a5097ff235b3a--133852c0b39743889a1089e3f089534a ed28d2d56abd408289f7d7f06026aecc 7f1f1403fb9349a3943a5097ff235b3a--ed28d2d56abd408289f7d7f06026aecc f41e38d5208e4cd8bc6d4dbde9f55bec RX(theta\u2081\u2083) ed28d2d56abd408289f7d7f06026aecc--f41e38d5208e4cd8bc6d4dbde9f55bec 547ed62734bb4c4797f1c238fb724be0 RY(theta\u2081\u2087) f41e38d5208e4cd8bc6d4dbde9f55bec--547ed62734bb4c4797f1c238fb724be0 95e0ecdecc054c73a64c968434c9b101 RX(theta\u2082\u2081) 547ed62734bb4c4797f1c238fb724be0--95e0ecdecc054c73a64c968434c9b101 031e0b22bd1a4de7ac76528befdb5194 X 95e0ecdecc054c73a64c968434c9b101--031e0b22bd1a4de7ac76528befdb5194 031e0b22bd1a4de7ac76528befdb5194--29c11a8d9084447ea983ca1cba469494 35b51b8abeb04ae5af5c0b8a50661c84 031e0b22bd1a4de7ac76528befdb5194--35b51b8abeb04ae5af5c0b8a50661c84 35b51b8abeb04ae5af5c0b8a50661c84--d4a1a5a245f142529678e50acf2425bd 7656fa1380e743fca57e3b52737069f7 afc65c1ea6464c82b449a30228a3f6d5 RX(theta\u2082) 051fc2597f13490a9071ccdeff513a7e--afc65c1ea6464c82b449a30228a3f6d5 7f1c12ea578a4a31b403995eaa5f512b 3 8191f19c64624cdea41b618ffbd67748 RY(theta\u2086) afc65c1ea6464c82b449a30228a3f6d5--8191f19c64624cdea41b618ffbd67748 baf77deb7dc74f2da6e0ac2c57315754 RX(theta\u2081\u2080) 8191f19c64624cdea41b618ffbd67748--baf77deb7dc74f2da6e0ac2c57315754 cb446bb7e17e41afb4ce7fc25b2429a1 baf77deb7dc74f2da6e0ac2c57315754--cb446bb7e17e41afb4ce7fc25b2429a1 d835b4b16f3a4b03bb909b70433a2ce7 X cb446bb7e17e41afb4ce7fc25b2429a1--d835b4b16f3a4b03bb909b70433a2ce7 d835b4b16f3a4b03bb909b70433a2ce7--ed28d2d56abd408289f7d7f06026aecc 355f41533f044fbe8e7aef1412a78ab7 RX(theta\u2081\u2084) d835b4b16f3a4b03bb909b70433a2ce7--355f41533f044fbe8e7aef1412a78ab7 ec8bd587e3424e1f8d3b9853bf8554ba RY(theta\u2081\u2088) 355f41533f044fbe8e7aef1412a78ab7--ec8bd587e3424e1f8d3b9853bf8554ba f41f6b70934b4e85ad9c591d879b9ea2 RX(theta\u2082\u2082) ec8bd587e3424e1f8d3b9853bf8554ba--f41f6b70934b4e85ad9c591d879b9ea2 b4872a5ee29d432386525ae992fe0e66 f41f6b70934b4e85ad9c591d879b9ea2--b4872a5ee29d432386525ae992fe0e66 7df8a88bcdbf4eaaae67b9ff9a8a8758 X b4872a5ee29d432386525ae992fe0e66--7df8a88bcdbf4eaaae67b9ff9a8a8758 7df8a88bcdbf4eaaae67b9ff9a8a8758--35b51b8abeb04ae5af5c0b8a50661c84 7df8a88bcdbf4eaaae67b9ff9a8a8758--7656fa1380e743fca57e3b52737069f7 4eeb2e17442440f99e3ab0f108315c29 bcb1c2d6d13149459368315870c318d3 RX(theta\u2083) 7f1c12ea578a4a31b403995eaa5f512b--bcb1c2d6d13149459368315870c318d3 c956de608427497387b7c20e8f0d3cfc RY(theta\u2087) bcb1c2d6d13149459368315870c318d3--c956de608427497387b7c20e8f0d3cfc fee5022b61834a9aa03488d0e720e7ab RX(theta\u2081\u2081) c956de608427497387b7c20e8f0d3cfc--fee5022b61834a9aa03488d0e720e7ab 282f2208b2a94570b788048a1acde9c5 X fee5022b61834a9aa03488d0e720e7ab--282f2208b2a94570b788048a1acde9c5 282f2208b2a94570b788048a1acde9c5--cb446bb7e17e41afb4ce7fc25b2429a1 1ad02d622d714bf68b9815dddf3c8e25 282f2208b2a94570b788048a1acde9c5--1ad02d622d714bf68b9815dddf3c8e25 fe7102f21b6842879f67245d8e87bf53 RX(theta\u2081\u2085) 1ad02d622d714bf68b9815dddf3c8e25--fe7102f21b6842879f67245d8e87bf53 102d935eb8384f458d97397276c0c1c7 RY(theta\u2081\u2089) fe7102f21b6842879f67245d8e87bf53--102d935eb8384f458d97397276c0c1c7 399173a3b7c5482a85e4a0015f29464d RX(theta\u2082\u2083) 102d935eb8384f458d97397276c0c1c7--399173a3b7c5482a85e4a0015f29464d 95275efbbb29405dbee64b27eedf5496 X 399173a3b7c5482a85e4a0015f29464d--95275efbbb29405dbee64b27eedf5496 95275efbbb29405dbee64b27eedf5496--b4872a5ee29d432386525ae992fe0e66 f3907af281a9479fac8db3d2659d14a3 95275efbbb29405dbee64b27eedf5496--f3907af281a9479fac8db3d2659d14a3 f3907af281a9479fac8db3d2659d14a3--4eeb2e17442440f99e3ab0f108315c29 </p> <p>A new circuit can be created by adding another identical HEA. As expected, the number of unique parameters is the same.</p> <p><pre><code>hea2 = hea(n_qubits=n_qubits, depth=depth)\ncircuit = QuantumCircuit(n_qubits, hea1, hea2)\nnum_unique_params_two_heas = circuit.num_unique_parameters\n</code></pre> <pre><code>Unique parameters with two stacked HEAs: 24\n</code></pre> %3 cluster_697702d0d32f4d2186bf8fe84744600c HEA cluster_e2c1c946a8274e2099bcb16e119d79a6 HEA 4dc4eb6a502a40fba05ec6bc84c444cb 0 9695f17b666a45a29aa6333f33f1c487 RX(theta\u2080) 4dc4eb6a502a40fba05ec6bc84c444cb--9695f17b666a45a29aa6333f33f1c487 c73125434f744b9f8b16162d13812470 1 5347bc3d435a43dcb71243872e8a5106 RY(theta\u2084) 9695f17b666a45a29aa6333f33f1c487--5347bc3d435a43dcb71243872e8a5106 751d7baec42043ce8d60489fdcbb1231 RX(theta\u2088) 5347bc3d435a43dcb71243872e8a5106--751d7baec42043ce8d60489fdcbb1231 37a07ee6e5b1477e9affc660349b8247 751d7baec42043ce8d60489fdcbb1231--37a07ee6e5b1477e9affc660349b8247 927c25cbd95b4f85b9b9004793aa53ae 37a07ee6e5b1477e9affc660349b8247--927c25cbd95b4f85b9b9004793aa53ae 28fe3c04982643cfa6e551d9348dcfa1 RX(theta\u2081\u2082) 927c25cbd95b4f85b9b9004793aa53ae--28fe3c04982643cfa6e551d9348dcfa1 c2a5c8c0a7274f0ba83841ad1cc993ea RY(theta\u2081\u2086) 28fe3c04982643cfa6e551d9348dcfa1--c2a5c8c0a7274f0ba83841ad1cc993ea 823a727cd25e43f79b20b6872612568a RX(theta\u2082\u2080) c2a5c8c0a7274f0ba83841ad1cc993ea--823a727cd25e43f79b20b6872612568a cc65a302f1334665a527cbc3e88af35b 823a727cd25e43f79b20b6872612568a--cc65a302f1334665a527cbc3e88af35b 21f464549c1f49dd8cc53e160b096785 cc65a302f1334665a527cbc3e88af35b--21f464549c1f49dd8cc53e160b096785 81b13f5e1a814f97b1ab8b30757841f5 RX(theta\u2080) 21f464549c1f49dd8cc53e160b096785--81b13f5e1a814f97b1ab8b30757841f5 ea5f537e555a4937a9f1fa70ea504f3d RY(theta\u2084) 81b13f5e1a814f97b1ab8b30757841f5--ea5f537e555a4937a9f1fa70ea504f3d 293abedf782340eb87a14a277b72713c RX(theta\u2088) ea5f537e555a4937a9f1fa70ea504f3d--293abedf782340eb87a14a277b72713c 70418d3928e6406e98b221085e4dc4f1 293abedf782340eb87a14a277b72713c--70418d3928e6406e98b221085e4dc4f1 44057abe86134316b40ededb156f3b17 70418d3928e6406e98b221085e4dc4f1--44057abe86134316b40ededb156f3b17 fe719177835f4585b8013a92c7c67683 RX(theta\u2081\u2082) 44057abe86134316b40ededb156f3b17--fe719177835f4585b8013a92c7c67683 d14d741364df44f6bf113c3527117ccb RY(theta\u2081\u2086) fe719177835f4585b8013a92c7c67683--d14d741364df44f6bf113c3527117ccb 483e7f58f08b437c9a3c532ae88b1693 RX(theta\u2082\u2080) d14d741364df44f6bf113c3527117ccb--483e7f58f08b437c9a3c532ae88b1693 589bac7538ee485b819030799d5daf39 483e7f58f08b437c9a3c532ae88b1693--589bac7538ee485b819030799d5daf39 07d0f73aee7b45e2be5961baf5d36901 589bac7538ee485b819030799d5daf39--07d0f73aee7b45e2be5961baf5d36901 85c33bfc8ab5435a962a5f8ec2aa7b78 07d0f73aee7b45e2be5961baf5d36901--85c33bfc8ab5435a962a5f8ec2aa7b78 59a769f1f1de4e04973e905c42cd496f e00c4fcbb97e488f8da042680109ca55 RX(theta\u2081) c73125434f744b9f8b16162d13812470--e00c4fcbb97e488f8da042680109ca55 4cafd373545e43aa9d306ebd90ff88a4 2 56cee32df14143eabd2cbdc0bb853b2e RY(theta\u2085) e00c4fcbb97e488f8da042680109ca55--56cee32df14143eabd2cbdc0bb853b2e 5c6e08edc65a470b834820eb5624a618 RX(theta\u2089) 56cee32df14143eabd2cbdc0bb853b2e--5c6e08edc65a470b834820eb5624a618 05bb16be63e14f16bdd505774563ae37 X 5c6e08edc65a470b834820eb5624a618--05bb16be63e14f16bdd505774563ae37 05bb16be63e14f16bdd505774563ae37--37a07ee6e5b1477e9affc660349b8247 7f740ec4e41e442eb5bcf98475290611 05bb16be63e14f16bdd505774563ae37--7f740ec4e41e442eb5bcf98475290611 6c0139b3c1c740429a656f1c56fff756 RX(theta\u2081\u2083) 7f740ec4e41e442eb5bcf98475290611--6c0139b3c1c740429a656f1c56fff756 a719b6e0f5954cd4924673a4e300f2b6 RY(theta\u2081\u2087) 6c0139b3c1c740429a656f1c56fff756--a719b6e0f5954cd4924673a4e300f2b6 f5f19c941695498db75d07bbd26c2040 RX(theta\u2082\u2081) a719b6e0f5954cd4924673a4e300f2b6--f5f19c941695498db75d07bbd26c2040 e6561f39742741a8936ea3b1b8396d01 X f5f19c941695498db75d07bbd26c2040--e6561f39742741a8936ea3b1b8396d01 e6561f39742741a8936ea3b1b8396d01--cc65a302f1334665a527cbc3e88af35b d41093a6a32a4ebdabd4865289d2e31e e6561f39742741a8936ea3b1b8396d01--d41093a6a32a4ebdabd4865289d2e31e 5c0353ee76e8491b84bdc30677e9cf7e RX(theta\u2081) d41093a6a32a4ebdabd4865289d2e31e--5c0353ee76e8491b84bdc30677e9cf7e 5e8807c281244b1881ae6d204cde749a RY(theta\u2085) 5c0353ee76e8491b84bdc30677e9cf7e--5e8807c281244b1881ae6d204cde749a 3f296c481f42488cac1a0ead7b72e42b RX(theta\u2089) 5e8807c281244b1881ae6d204cde749a--3f296c481f42488cac1a0ead7b72e42b 859881b63f03417981057c66e0c5c4fc X 3f296c481f42488cac1a0ead7b72e42b--859881b63f03417981057c66e0c5c4fc 859881b63f03417981057c66e0c5c4fc--70418d3928e6406e98b221085e4dc4f1 44b48f5e52934b0eb6d33b817caa87f4 859881b63f03417981057c66e0c5c4fc--44b48f5e52934b0eb6d33b817caa87f4 aa00f11bee0b408c8fcd61cfacf11595 RX(theta\u2081\u2083) 44b48f5e52934b0eb6d33b817caa87f4--aa00f11bee0b408c8fcd61cfacf11595 ab4fd6b6ec8e47c19eb190ffa8b18d67 RY(theta\u2081\u2087) aa00f11bee0b408c8fcd61cfacf11595--ab4fd6b6ec8e47c19eb190ffa8b18d67 9d2d621af35f4971b55ebcbc8ebf1a29 RX(theta\u2082\u2081) ab4fd6b6ec8e47c19eb190ffa8b18d67--9d2d621af35f4971b55ebcbc8ebf1a29 fb3c2714edf640259b44aba94a5e0a3d X 9d2d621af35f4971b55ebcbc8ebf1a29--fb3c2714edf640259b44aba94a5e0a3d fb3c2714edf640259b44aba94a5e0a3d--589bac7538ee485b819030799d5daf39 c3194d41792d454fa8d777a3ba115f4d fb3c2714edf640259b44aba94a5e0a3d--c3194d41792d454fa8d777a3ba115f4d c3194d41792d454fa8d777a3ba115f4d--59a769f1f1de4e04973e905c42cd496f a2bcc3c29a004eb09a54343ca08bbd6c 3099b23c6d8046a9911d47799e711b6a RX(theta\u2082) 4cafd373545e43aa9d306ebd90ff88a4--3099b23c6d8046a9911d47799e711b6a 70a0039d43c44eb9b6e81f413d90edd7 3 4cc2fd46ee5d45ca965a6da772383708 RY(theta\u2086) 3099b23c6d8046a9911d47799e711b6a--4cc2fd46ee5d45ca965a6da772383708 3f489f62719d4626b8d572577e022c7c RX(theta\u2081\u2080) 4cc2fd46ee5d45ca965a6da772383708--3f489f62719d4626b8d572577e022c7c 1a00af1957ab413a91cc33b02522f2a1 3f489f62719d4626b8d572577e022c7c--1a00af1957ab413a91cc33b02522f2a1 b965e5c5100641c0b87165983b1bdb45 X 1a00af1957ab413a91cc33b02522f2a1--b965e5c5100641c0b87165983b1bdb45 b965e5c5100641c0b87165983b1bdb45--7f740ec4e41e442eb5bcf98475290611 51500ad2fe574f22b062f8f423e1e6e8 RX(theta\u2081\u2084) b965e5c5100641c0b87165983b1bdb45--51500ad2fe574f22b062f8f423e1e6e8 e4116d188ab84e0a952527334efa452f RY(theta\u2081\u2088) 51500ad2fe574f22b062f8f423e1e6e8--e4116d188ab84e0a952527334efa452f cd53a60e0330480e8d72ae67d0ec191d RX(theta\u2082\u2082) e4116d188ab84e0a952527334efa452f--cd53a60e0330480e8d72ae67d0ec191d d1eb765b7ca0434abf75e8050ec6bb26 cd53a60e0330480e8d72ae67d0ec191d--d1eb765b7ca0434abf75e8050ec6bb26 e0fc35667a9b48578e97cfd7c57a9aab X d1eb765b7ca0434abf75e8050ec6bb26--e0fc35667a9b48578e97cfd7c57a9aab e0fc35667a9b48578e97cfd7c57a9aab--d41093a6a32a4ebdabd4865289d2e31e 84c30e86a3a64fe38a3be68d9a9663b0 RX(theta\u2082) e0fc35667a9b48578e97cfd7c57a9aab--84c30e86a3a64fe38a3be68d9a9663b0 53aadb7e4bde4f0fb75c5071f253cc18 RY(theta\u2086) 84c30e86a3a64fe38a3be68d9a9663b0--53aadb7e4bde4f0fb75c5071f253cc18 209e76affcc64c568d83e9620a29289d RX(theta\u2081\u2080) 53aadb7e4bde4f0fb75c5071f253cc18--209e76affcc64c568d83e9620a29289d 2e1781cbf8d3461eb62dd735e499343f 209e76affcc64c568d83e9620a29289d--2e1781cbf8d3461eb62dd735e499343f 475068e2ee294cfbb924c08c036cdd82 X 2e1781cbf8d3461eb62dd735e499343f--475068e2ee294cfbb924c08c036cdd82 475068e2ee294cfbb924c08c036cdd82--44b48f5e52934b0eb6d33b817caa87f4 7bc6c4f660f84f98aa2f476f1989878a RX(theta\u2081\u2084) 475068e2ee294cfbb924c08c036cdd82--7bc6c4f660f84f98aa2f476f1989878a a30100f0cd2d411293cc1ccf79473a3b RY(theta\u2081\u2088) 7bc6c4f660f84f98aa2f476f1989878a--a30100f0cd2d411293cc1ccf79473a3b a2aedb78ef054f69b1863b426d13a4d8 RX(theta\u2082\u2082) a30100f0cd2d411293cc1ccf79473a3b--a2aedb78ef054f69b1863b426d13a4d8 a0bbb047180049d3a99f9434636d95c4 a2aedb78ef054f69b1863b426d13a4d8--a0bbb047180049d3a99f9434636d95c4 0473598d09674009a3a82bd274f4aa04 X a0bbb047180049d3a99f9434636d95c4--0473598d09674009a3a82bd274f4aa04 0473598d09674009a3a82bd274f4aa04--c3194d41792d454fa8d777a3ba115f4d 0473598d09674009a3a82bd274f4aa04--a2bcc3c29a004eb09a54343ca08bbd6c ded43482ac254361beb1bd77c1e599a6 31f75ae6665648a28889e51233d26192 RX(theta\u2083) 70a0039d43c44eb9b6e81f413d90edd7--31f75ae6665648a28889e51233d26192 4a01fdd1f2ff4a94b041d4ac2d536502 RY(theta\u2087) 31f75ae6665648a28889e51233d26192--4a01fdd1f2ff4a94b041d4ac2d536502 8ec25915c542421fbb7073463d072bfa RX(theta\u2081\u2081) 4a01fdd1f2ff4a94b041d4ac2d536502--8ec25915c542421fbb7073463d072bfa a2d6393535c74dd4ae42a54a613465ac X 8ec25915c542421fbb7073463d072bfa--a2d6393535c74dd4ae42a54a613465ac a2d6393535c74dd4ae42a54a613465ac--1a00af1957ab413a91cc33b02522f2a1 381e0fd0b52f4b9e93014ce101e83c8e a2d6393535c74dd4ae42a54a613465ac--381e0fd0b52f4b9e93014ce101e83c8e 378a6bb909074e7bbe1cb7a63c79d092 RX(theta\u2081\u2085) 381e0fd0b52f4b9e93014ce101e83c8e--378a6bb909074e7bbe1cb7a63c79d092 7a3459c85d104a0489a6809dadf6e2e9 RY(theta\u2081\u2089) 378a6bb909074e7bbe1cb7a63c79d092--7a3459c85d104a0489a6809dadf6e2e9 92995f5038c14941b5bf09dfc54ff67a RX(theta\u2082\u2083) 7a3459c85d104a0489a6809dadf6e2e9--92995f5038c14941b5bf09dfc54ff67a 98740beabf754ab8b3ec742a0db5d0ab X 92995f5038c14941b5bf09dfc54ff67a--98740beabf754ab8b3ec742a0db5d0ab 98740beabf754ab8b3ec742a0db5d0ab--d1eb765b7ca0434abf75e8050ec6bb26 46d50148c0234524a7260323b35cabd8 98740beabf754ab8b3ec742a0db5d0ab--46d50148c0234524a7260323b35cabd8 1c7d98cc79e048fda5117891a23c7693 RX(theta\u2083) 46d50148c0234524a7260323b35cabd8--1c7d98cc79e048fda5117891a23c7693 2f99e8be971146df889a590964188aef RY(theta\u2087) 1c7d98cc79e048fda5117891a23c7693--2f99e8be971146df889a590964188aef f3006f47390343c1a9957ad0146100cb RX(theta\u2081\u2081) 2f99e8be971146df889a590964188aef--f3006f47390343c1a9957ad0146100cb 92da5454b21e4ef9a624481de894087b X f3006f47390343c1a9957ad0146100cb--92da5454b21e4ef9a624481de894087b 92da5454b21e4ef9a624481de894087b--2e1781cbf8d3461eb62dd735e499343f 7065de4a68374766a0065f4aa71c80cb 92da5454b21e4ef9a624481de894087b--7065de4a68374766a0065f4aa71c80cb b7d6e8f5a23a43b3ab2a83657ae742ba RX(theta\u2081\u2085) 7065de4a68374766a0065f4aa71c80cb--b7d6e8f5a23a43b3ab2a83657ae742ba 75f2950fd6b44beca782129bff07950b RY(theta\u2081\u2089) b7d6e8f5a23a43b3ab2a83657ae742ba--75f2950fd6b44beca782129bff07950b e601699d83be493e97a68836986d985f RX(theta\u2082\u2083) 75f2950fd6b44beca782129bff07950b--e601699d83be493e97a68836986d985f 4e9e974636b84782872cdf200f69d6a0 X e601699d83be493e97a68836986d985f--4e9e974636b84782872cdf200f69d6a0 4e9e974636b84782872cdf200f69d6a0--a0bbb047180049d3a99f9434636d95c4 6ab248a1881f41a3ba720a62dae20b39 4e9e974636b84782872cdf200f69d6a0--6ab248a1881f41a3ba720a62dae20b39 6ab248a1881f41a3ba720a62dae20b39--ded43482ac254361beb1bd77c1e599a6 </p> <p>Avoid non-unique names by prefixing</p> <p>A parameter prefix for each HEA can be passed as follows:</p> <p><pre><code>hea1 = hea(n_qubits=n_qubits, depth=depth, param_prefix=\"p1\")\nhea2 = hea(n_qubits=n_qubits, depth=depth, param_prefix=\"p2\")\ncircuit = QuantumCircuit(n_qubits, hea1, hea2)\nn_params_two_heas = circuit.num_unique_parameters\n</code></pre> <pre><code>Unique parameters with two stacked HEAs: 48\n</code></pre> %3 cluster_a7eb3c1f181d40bea2eb349e66ac32f7 HEA cluster_abd3c614584a4180a3f5620e72ec6bf1 HEA 9417a4e061174c9e9eb125330cbd6d50 0 82d4a5bae51049f0870cf5cd515658fa RX(p1\u2080) 9417a4e061174c9e9eb125330cbd6d50--82d4a5bae51049f0870cf5cd515658fa 802839d6ab204a31b0b410d4cdc313bb 1 88e7f005bba04af288aed5e09372501a RY(p1\u2084) 82d4a5bae51049f0870cf5cd515658fa--88e7f005bba04af288aed5e09372501a 15fdf9df7c594d2fae38e4b1fbb5ea6d RX(p1\u2088) 88e7f005bba04af288aed5e09372501a--15fdf9df7c594d2fae38e4b1fbb5ea6d b26b04d415f6424da76dcf30531e6554 15fdf9df7c594d2fae38e4b1fbb5ea6d--b26b04d415f6424da76dcf30531e6554 5020aeba931d404f870f78a672ae4a48 b26b04d415f6424da76dcf30531e6554--5020aeba931d404f870f78a672ae4a48 4eef3804559646a88bb0c91fa84f0b3f RX(p1\u2081\u2082) 5020aeba931d404f870f78a672ae4a48--4eef3804559646a88bb0c91fa84f0b3f f188788850be4679a1cd517ed35d516f RY(p1\u2081\u2086) 4eef3804559646a88bb0c91fa84f0b3f--f188788850be4679a1cd517ed35d516f b373e93fb8434502b72817b292c2f98c RX(p1\u2082\u2080) f188788850be4679a1cd517ed35d516f--b373e93fb8434502b72817b292c2f98c 1f899b6594464f41884e4d9400941d33 b373e93fb8434502b72817b292c2f98c--1f899b6594464f41884e4d9400941d33 b8c132c237aa4f11be16f3760e11ebc5 1f899b6594464f41884e4d9400941d33--b8c132c237aa4f11be16f3760e11ebc5 2fe85b4fa88a4d6e94be37fbc39cfef7 RX(p2\u2080) b8c132c237aa4f11be16f3760e11ebc5--2fe85b4fa88a4d6e94be37fbc39cfef7 a213e4d3a8c24251abd566a2eafb9527 RY(p2\u2084) 2fe85b4fa88a4d6e94be37fbc39cfef7--a213e4d3a8c24251abd566a2eafb9527 2fac79d1a022453f9632527919353333 RX(p2\u2088) a213e4d3a8c24251abd566a2eafb9527--2fac79d1a022453f9632527919353333 2d43694e044a41ffb5c3c56ec6727230 2fac79d1a022453f9632527919353333--2d43694e044a41ffb5c3c56ec6727230 4228c5e926c349b2882fb0afe9a259d7 2d43694e044a41ffb5c3c56ec6727230--4228c5e926c349b2882fb0afe9a259d7 772d72038b284771855d6db991c0fe24 RX(p2\u2081\u2082) 4228c5e926c349b2882fb0afe9a259d7--772d72038b284771855d6db991c0fe24 120ad2cce07c46f58281361d83eecd5a RY(p2\u2081\u2086) 772d72038b284771855d6db991c0fe24--120ad2cce07c46f58281361d83eecd5a 2d9333c42ca34be8be99bf39292bf207 RX(p2\u2082\u2080) 120ad2cce07c46f58281361d83eecd5a--2d9333c42ca34be8be99bf39292bf207 9e2a9fab90424d328f5c7ec58f437d1b 2d9333c42ca34be8be99bf39292bf207--9e2a9fab90424d328f5c7ec58f437d1b 8140f38d43e545c39c14e81979ace873 9e2a9fab90424d328f5c7ec58f437d1b--8140f38d43e545c39c14e81979ace873 0b73e36966d047dfae584ce2fc69b14b 8140f38d43e545c39c14e81979ace873--0b73e36966d047dfae584ce2fc69b14b 49fbd35dd88a47eaa738e5e448362958 aa11a105b1b54c32852e9a6557e71dfa RX(p1\u2081) 802839d6ab204a31b0b410d4cdc313bb--aa11a105b1b54c32852e9a6557e71dfa 0b8b19b0b08e47999c1b2d33d6b66d96 2 94fe922f6aa647df837ea287c8da97f9 RY(p1\u2085) aa11a105b1b54c32852e9a6557e71dfa--94fe922f6aa647df837ea287c8da97f9 55175f1663754581b4992027a40e36ab RX(p1\u2089) 94fe922f6aa647df837ea287c8da97f9--55175f1663754581b4992027a40e36ab b3a2777635494a08a2d9eb6d9eba3011 X 55175f1663754581b4992027a40e36ab--b3a2777635494a08a2d9eb6d9eba3011 b3a2777635494a08a2d9eb6d9eba3011--b26b04d415f6424da76dcf30531e6554 dbf3477312044a039c25fcc8106f79d0 b3a2777635494a08a2d9eb6d9eba3011--dbf3477312044a039c25fcc8106f79d0 ae9ad9ef6dd34859ab3257ea1dc8eb19 RX(p1\u2081\u2083) dbf3477312044a039c25fcc8106f79d0--ae9ad9ef6dd34859ab3257ea1dc8eb19 308c4095732a4cc3b56382085fbbfd99 RY(p1\u2081\u2087) ae9ad9ef6dd34859ab3257ea1dc8eb19--308c4095732a4cc3b56382085fbbfd99 dd6b1698148247d3a601ba1cfe365941 RX(p1\u2082\u2081) 308c4095732a4cc3b56382085fbbfd99--dd6b1698148247d3a601ba1cfe365941 97ba82c932004324aee2283861f4b01e X dd6b1698148247d3a601ba1cfe365941--97ba82c932004324aee2283861f4b01e 97ba82c932004324aee2283861f4b01e--1f899b6594464f41884e4d9400941d33 f5136b4378e74bc88339ad09a9575d5c 97ba82c932004324aee2283861f4b01e--f5136b4378e74bc88339ad09a9575d5c d6ce4b4b94e0485498dd53a7227c1ef1 RX(p2\u2081) f5136b4378e74bc88339ad09a9575d5c--d6ce4b4b94e0485498dd53a7227c1ef1 8dbd97fd1a8b4a5fbcd73dc4689e3fb2 RY(p2\u2085) d6ce4b4b94e0485498dd53a7227c1ef1--8dbd97fd1a8b4a5fbcd73dc4689e3fb2 72488cea44284ff0bf4b783021a3f944 RX(p2\u2089) 8dbd97fd1a8b4a5fbcd73dc4689e3fb2--72488cea44284ff0bf4b783021a3f944 25d2e167e41c4861b9713abd5337817c X 72488cea44284ff0bf4b783021a3f944--25d2e167e41c4861b9713abd5337817c 25d2e167e41c4861b9713abd5337817c--2d43694e044a41ffb5c3c56ec6727230 b516c87ddbc7402f9ead4ebe8b31febe 25d2e167e41c4861b9713abd5337817c--b516c87ddbc7402f9ead4ebe8b31febe 361be583b0e3429c8b169907447ece65 RX(p2\u2081\u2083) b516c87ddbc7402f9ead4ebe8b31febe--361be583b0e3429c8b169907447ece65 0ff07746891145e4a699d223ca00fcf1 RY(p2\u2081\u2087) 361be583b0e3429c8b169907447ece65--0ff07746891145e4a699d223ca00fcf1 ab3f18c114eb44529f024fa93136a130 RX(p2\u2082\u2081) 0ff07746891145e4a699d223ca00fcf1--ab3f18c114eb44529f024fa93136a130 fccd84e5fdd245e89fbaaba099c55fd0 X ab3f18c114eb44529f024fa93136a130--fccd84e5fdd245e89fbaaba099c55fd0 fccd84e5fdd245e89fbaaba099c55fd0--9e2a9fab90424d328f5c7ec58f437d1b 2b9bc3319dad4ad6b25b1c11ffdd2625 fccd84e5fdd245e89fbaaba099c55fd0--2b9bc3319dad4ad6b25b1c11ffdd2625 2b9bc3319dad4ad6b25b1c11ffdd2625--49fbd35dd88a47eaa738e5e448362958 ab9974f3359241a7948e8e15861f6e69 f320c5d6f60343b1a150be8551592c34 RX(p1\u2082) 0b8b19b0b08e47999c1b2d33d6b66d96--f320c5d6f60343b1a150be8551592c34 31744e50792b41fdb34d534f172e9428 3 0021e20ca7a74ef2954b92c178bc9ee0 RY(p1\u2086) f320c5d6f60343b1a150be8551592c34--0021e20ca7a74ef2954b92c178bc9ee0 7611c24812c34d52aec33f9d8e23edac RX(p1\u2081\u2080) 0021e20ca7a74ef2954b92c178bc9ee0--7611c24812c34d52aec33f9d8e23edac 59d56689d49d43409f0b9ab57ef0b9c6 7611c24812c34d52aec33f9d8e23edac--59d56689d49d43409f0b9ab57ef0b9c6 9edb15d537274e7fb7c8f39fdba222c1 X 59d56689d49d43409f0b9ab57ef0b9c6--9edb15d537274e7fb7c8f39fdba222c1 9edb15d537274e7fb7c8f39fdba222c1--dbf3477312044a039c25fcc8106f79d0 43d6029c59c5454ab52e94d997caabdf RX(p1\u2081\u2084) 9edb15d537274e7fb7c8f39fdba222c1--43d6029c59c5454ab52e94d997caabdf 1f98ff5aca474536846defd7e2fc7eac RY(p1\u2081\u2088) 43d6029c59c5454ab52e94d997caabdf--1f98ff5aca474536846defd7e2fc7eac 375865f7f5fb4909832ef8a9e8b22f1e RX(p1\u2082\u2082) 1f98ff5aca474536846defd7e2fc7eac--375865f7f5fb4909832ef8a9e8b22f1e 3d1811fc296f45e98c75206cb665eefb 375865f7f5fb4909832ef8a9e8b22f1e--3d1811fc296f45e98c75206cb665eefb ebd91aa214b64c108b1d4ac408904685 X 3d1811fc296f45e98c75206cb665eefb--ebd91aa214b64c108b1d4ac408904685 ebd91aa214b64c108b1d4ac408904685--f5136b4378e74bc88339ad09a9575d5c 0befd7556161491e81f13947487d177e RX(p2\u2082) ebd91aa214b64c108b1d4ac408904685--0befd7556161491e81f13947487d177e 2f027b0277e846e7b095e2b0ee482bdf RY(p2\u2086) 0befd7556161491e81f13947487d177e--2f027b0277e846e7b095e2b0ee482bdf 9738eb725c7d40868d1ccb6d575b1cc5 RX(p2\u2081\u2080) 2f027b0277e846e7b095e2b0ee482bdf--9738eb725c7d40868d1ccb6d575b1cc5 88d8b790825c43dc96857bd2323f2be7 9738eb725c7d40868d1ccb6d575b1cc5--88d8b790825c43dc96857bd2323f2be7 ea216e5fdd454f4a9fe38cdbbb3f32fd X 88d8b790825c43dc96857bd2323f2be7--ea216e5fdd454f4a9fe38cdbbb3f32fd ea216e5fdd454f4a9fe38cdbbb3f32fd--b516c87ddbc7402f9ead4ebe8b31febe d17f945071f44607bc7177aa4fb36107 RX(p2\u2081\u2084) ea216e5fdd454f4a9fe38cdbbb3f32fd--d17f945071f44607bc7177aa4fb36107 42dd23b56a8d4fafb2157a09b712a52f RY(p2\u2081\u2088) d17f945071f44607bc7177aa4fb36107--42dd23b56a8d4fafb2157a09b712a52f 3835a08c74d543ac9f8de1bfd034e167 RX(p2\u2082\u2082) 42dd23b56a8d4fafb2157a09b712a52f--3835a08c74d543ac9f8de1bfd034e167 19e286fe51d747aab5905891ace8f300 3835a08c74d543ac9f8de1bfd034e167--19e286fe51d747aab5905891ace8f300 d033b8f349444ff683f97c500f24ac47 X 19e286fe51d747aab5905891ace8f300--d033b8f349444ff683f97c500f24ac47 d033b8f349444ff683f97c500f24ac47--2b9bc3319dad4ad6b25b1c11ffdd2625 d033b8f349444ff683f97c500f24ac47--ab9974f3359241a7948e8e15861f6e69 4bad89a8bad64afa877105f393e2b83a 7f659f7185ab44b5a59011aa73de740e RX(p1\u2083) 31744e50792b41fdb34d534f172e9428--7f659f7185ab44b5a59011aa73de740e b6822ba119c942379cb91099323fc26d RY(p1\u2087) 7f659f7185ab44b5a59011aa73de740e--b6822ba119c942379cb91099323fc26d a1edeee4844b4b4cad57b0165f2532f4 RX(p1\u2081\u2081) b6822ba119c942379cb91099323fc26d--a1edeee4844b4b4cad57b0165f2532f4 8d195689aeac44ef8238935b1226eab3 X a1edeee4844b4b4cad57b0165f2532f4--8d195689aeac44ef8238935b1226eab3 8d195689aeac44ef8238935b1226eab3--59d56689d49d43409f0b9ab57ef0b9c6 a0705cbd18f246fe8cfa0492c516dab9 8d195689aeac44ef8238935b1226eab3--a0705cbd18f246fe8cfa0492c516dab9 0bbfed2f37134536ad68ecc8efca6b07 RX(p1\u2081\u2085) a0705cbd18f246fe8cfa0492c516dab9--0bbfed2f37134536ad68ecc8efca6b07 6482db6d2b844850901010aefeeeea9e RY(p1\u2081\u2089) 0bbfed2f37134536ad68ecc8efca6b07--6482db6d2b844850901010aefeeeea9e ea309da5f0324c11b70ec3a29475eba3 RX(p1\u2082\u2083) 6482db6d2b844850901010aefeeeea9e--ea309da5f0324c11b70ec3a29475eba3 aceecbc57add473db764f515b85a44ac X ea309da5f0324c11b70ec3a29475eba3--aceecbc57add473db764f515b85a44ac aceecbc57add473db764f515b85a44ac--3d1811fc296f45e98c75206cb665eefb 8b2cb403abb747958606502d29713576 aceecbc57add473db764f515b85a44ac--8b2cb403abb747958606502d29713576 1ecf49967cd046c9b02ea57f9fc3d1d6 RX(p2\u2083) 8b2cb403abb747958606502d29713576--1ecf49967cd046c9b02ea57f9fc3d1d6 b0446c4a07de47729406ab3fed4e5ee9 RY(p2\u2087) 1ecf49967cd046c9b02ea57f9fc3d1d6--b0446c4a07de47729406ab3fed4e5ee9 2024c0ae7f0045daa1297a83c9123331 RX(p2\u2081\u2081) b0446c4a07de47729406ab3fed4e5ee9--2024c0ae7f0045daa1297a83c9123331 404bf430100241819a900af39ef530e6 X 2024c0ae7f0045daa1297a83c9123331--404bf430100241819a900af39ef530e6 404bf430100241819a900af39ef530e6--88d8b790825c43dc96857bd2323f2be7 dbb7eca95cc34f4283a9020faa3cfb30 404bf430100241819a900af39ef530e6--dbb7eca95cc34f4283a9020faa3cfb30 7ef57f8ebdf04d20b984654f8f2678c7 RX(p2\u2081\u2085) dbb7eca95cc34f4283a9020faa3cfb30--7ef57f8ebdf04d20b984654f8f2678c7 7134c875d4d34382a4ea6e3a537ab257 RY(p2\u2081\u2089) 7ef57f8ebdf04d20b984654f8f2678c7--7134c875d4d34382a4ea6e3a537ab257 063ab72779504be7b2d1f975c7e160ae RX(p2\u2082\u2083) 7134c875d4d34382a4ea6e3a537ab257--063ab72779504be7b2d1f975c7e160ae ad9927bacc924d29b77e33de45e63749 X 063ab72779504be7b2d1f975c7e160ae--ad9927bacc924d29b77e33de45e63749 ad9927bacc924d29b77e33de45e63749--19e286fe51d747aab5905891ace8f300 685dc74531cf4d74b5e1bd141e0043f2 ad9927bacc924d29b77e33de45e63749--685dc74531cf4d74b5e1bd141e0043f2 685dc74531cf4d74b5e1bd141e0043f2--4bad89a8bad64afa877105f393e2b83a </p> <p>The <code>hea</code> function will be further explored in the QML Constructors tutorial.</p>"},{"location":"tutorials/parameters/#parametric-observables","title":"Parametric observables","text":"<p>In Qadence, one can define quantum observables with classical optimizable parameters to improve the convergence of QML calculations. This is particularly useful for differentiable quantum circuits.</p> <pre><code>from qadence import VariationalParameter, Z, add, tag\ns = VariationalParameter(\"s\")\nobservable = add(s * Z(i) for i in range(n_qubits))\n</code></pre> <p>Now, a quantum model can be created with the parametric observable. The observable variational parameters are included among the model ones.</p> <pre><code>from qadence import QuantumModel, QuantumCircuit\ncircuit = QuantumCircuit(n_qubits, hea(n_qubits, depth))\nmodel = QuantumModel(circuit, observable=observable)\n</code></pre> <pre><code>Variational parameters = OrderedDict([('s', tensor([0.8235])), ('theta_0', tensor([0.2038])), ('theta_1', tensor([0.7853])), ('theta_10', tensor([0.9408])), ('theta_11', tensor([0.4441])), ('theta_12', tensor([0.6926])), ('theta_13', tensor([0.3457])), ('theta_14', tensor([0.6128])), ('theta_15', tensor([0.6174])), ('theta_16', tensor([0.8657])), ('theta_17', tensor([0.8418])), ('theta_18', tensor([0.1063])), ('theta_19', tensor([0.6077])), ('theta_2', tensor([0.2668])), ('theta_20', tensor([0.8846])), ('theta_21', tensor([0.9668])), ('theta_22', tensor([0.2565])), ('theta_23', tensor([0.1043])), ('theta_3', tensor([0.5797])), ('theta_4', tensor([0.4227])), ('theta_5', tensor([0.6723])), ('theta_6', tensor([0.1476])), ('theta_7', tensor([0.6309])), ('theta_8', tensor([0.1834])), ('theta_9', tensor([0.8038]))])\n</code></pre> <p>One optimization step (forward and backward pass) can be performed using built-in <code>torch</code> functionalities. Variational parameters can be checked to have been updated accordingly:</p> <pre><code>import torch\nmse_loss = torch.nn.MSELoss()\noptimizer = torch.optim.Adam(model.parameters())\n# Compute forward &amp; backward pass\noptimizer.zero_grad()\nloss = mse_loss(model.expectation({}), torch.zeros(1))\nloss.backward()\n# Update the parameters and check the parameters.\noptimizer.step()\n</code></pre> <pre><code>Variational parameters = OrderedDict([('s', tensor([0.8225])), ('theta_0', tensor([0.2048])), ('theta_1', tensor([0.7863])), ('theta_10', tensor([0.9398])), ('theta_11', tensor([0.4451])), ('theta_12', tensor([0.6916])), ('theta_13', tensor([0.3467])), ('theta_14', tensor([0.6118])), ('theta_15', tensor([0.6184])), ('theta_16', tensor([0.8647])), ('theta_17', tensor([0.8408])), ('theta_18', tensor([0.1073])), ('theta_19', tensor([0.6067])), ('theta_2', tensor([0.2658])), ('theta_20', tensor([0.8836])), ('theta_21', tensor([0.9678])), ('theta_22', tensor([0.2555])), ('theta_23', tensor([0.1053])), ('theta_3', tensor([0.5787])), ('theta_4', tensor([0.4217])), ('theta_5', tensor([0.6713])), ('theta_6', tensor([0.1486])), ('theta_7', tensor([0.6319])), ('theta_8', tensor([0.1844])), ('theta_9', tensor([0.8028]))])\n</code></pre>"},{"location":"tutorials/parameters/#non-unitary-circuits","title":"Non-unitary circuits","text":"<p>Qadence allows composing with non-unitary blocks. Here is an example of a non-unitary block as a sum of Pauli operators with complex coefficients.</p> <p>Currently, only the <code>PyQTorch</code> backend fully supports execution of non-unitary circuits.</p> <pre><code>from qadence import QuantumModel, QuantumCircuit, Z, X\nc1 = 2.0\nc2 = 2.0 + 2.0j\nblock = c1 * Z(0) + c2 * X(1) + c1 * c2 * (Z(2) + X(3))\ncircuit = QuantumCircuit(4, block)\nmodel = QuantumModel(circuit)  # BackendName.PYQTORCH and DiffMode.AD by default.\n</code></pre> <pre><code>wf = tensor([[6.+4.j, 4.+4.j, 0.+0.j, 0.+0.j, 2.+2.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j,\n0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]])\n</code></pre>"},{"location":"tutorials/quantummodels/","title":"Quantum models","text":"<p>A quantum program can be expressed and executed using the <code>QuantumModel</code> type. It serves three primary purposes:</p> <p>Parameter handling: by conveniently handling and embedding the two parameter types that Qadence supports: feature and variational (see more details in the next section).</p> <p>Differentiability: by enabling a differentiable backend that supports two differentiable modes: automated differentiation (AD) and parameter shift rule (PSR). The former is used to differentiate non-gate parameters and enabled for PyTorch-based simulators only. The latter is used to differentiate gate parameters and is enabled for all backends.</p> <p>Execution: by defining which backend the program is expected to be executed on. Qadence supports circuit compilation to the native backend representation.</p> <p>Backends</p> <p>Quantum models can execute on a number of different purpose backends: simulators, emulators or real hardware. By default, Qadence executes on the PyQTorch backend which implements a state vector simulator. Other choices include the Pulser backend (pulse sequences on programmable neutral atom arrays).  For more information see the backend section.</p> <p>The base <code>QuantumModel</code> exposes the following methods:</p> <ul> <li><code>QuantumModel.run()</code>: To extract the wavefunction after circuit execution. Not supported by all backends.</li> <li><code>QuantumModel.sample()</code>: Sample a bitstring from the resulting quantum state after circuit execution. Supported by all backends.</li> <li><code>QuantumModel.expectation()</code>: Compute the expectation value of an observable.</li> </ul> <p>Every <code>QuantumModel</code> is an instance of a <code>torch.nn.Module</code> that enables differentiability for its <code>expectation</code> method.</p> <p>Upon construction of the model, a compiled version of the abstract <code>QuantumCircuit</code> is created:</p> <pre><code>from qadence import QuantumCircuit, QuantumModel, RX, Z, chain, BackendName, Parameter\n# Construct a parametrized abstract circuit.\n# At this point we cannot run anything yet.\nx = Parameter(\"x\")\nn_qubits = 2\nblock = chain(RX(0, x), RX(1, x))\ncircuit = QuantumCircuit(n_qubits, block)\nobservable = Z(0)\n# Construct a QuantumModel which will compile\n# the abstract circuit to targetted backend.\n# By default, diff_mode=DiffMode.AD.\nmodel = QuantumModel(circuit, observable, backend=BackendName.PYQTORCH)\n# The converted circuit is a private attribute and should not\n# manually be tampered with, but we can at least verify its there\n# by printing it.\n</code></pre> <pre><code>model._circuit.native = QuantumCircuit(\n(operations): ModuleList(\n(0): QuantumCircuit(\n(operations): ModuleList(\n(0): RX(qubit_support=(0,))\n(1): RX(qubit_support=(1,))\n)\n)\n)\n)\n</code></pre> <p>Now, the wavefunction, sample, or expectation value are computable by passing a batch of values :</p> <pre><code>import torch\n# Set a batch of random parameter values.\nvalues = {\"x\": torch.rand(3)}\nwf = model.run(values)\nxs = model.sample(values, n_shots=100)\nex = model.expectation(values)\n</code></pre> <pre><code>wf = tensor([[ 9.9905e-01+0.0000j,  0.0000e+00-0.0309j,  0.0000e+00-0.0309j,\n-9.5347e-04+0.0000j],\n[ 9.5148e-01+0.0000j,  0.0000e+00-0.2149j,  0.0000e+00-0.2149j,\n-4.8521e-02+0.0000j],\n[ 9.0139e-01+0.0000j,  0.0000e+00-0.2981j,  0.0000e+00-0.2981j,\n-9.8614e-02+0.0000j]])\nxs = [Counter({'00': 99, '10': 1}), Counter({'00': 84, '01': 8, '10': 8}), Counter({'00': 81, '10': 10, '01': 9})]\nex = tensor([[0.9981],\n[0.9030],\n[0.8028]], requires_grad=True)\n</code></pre> <p>You can also measure multiple observables by passing a list of blocks.</p> <pre><code># By default, backend=BackendName.PYQTORCH.\nmodel = QuantumModel(circuit, [Z(0), Z(1)])\nex = model.expectation(values)\n</code></pre> <pre><code>ex = tensor([[0.9981, 0.9981],\n[0.9030, 0.9030],\n[0.8028, 0.8028]], requires_grad=True)\n</code></pre>"},{"location":"tutorials/quantummodels/#quantum-neural-network-qnn","title":"Quantum Neural Network (QNN)","text":"<p>The <code>QNN</code> is a subclass of the <code>QuantumModel</code> geared towards quantum machine learning and parameter optimisation. See the quantum machine learning section section or the <code>QNN</code> API reference for more detailed information, and the parametric program tutorial for parameterization.</p>"},{"location":"tutorials/register/","title":"Quantum registers","text":"<p>In Qadence, quantum programs can be executed by specifying the layout of a register of resources as a lattice. Built-in <code>Register</code> types can be used or constructed for arbitrary topologies. Common register topologies are available and illustrated in the plot below.</p> 2023-11-27T12:01:04.469756 image/svg+xml Matplotlib v3.7.4, https://matplotlib.org/"},{"location":"tutorials/register/#building-and-drawing-registers","title":"Building and drawing registers","text":"<p>Built-in topologies are directly accessible in the <code>Register</code> methods:</p> <pre><code>from qadence import Register\nreg = Register.all_to_all(n_qubits = 2)\nreg_line = Register.line(n_qubits = 2)\nreg_circle = Register.circle(n_qubits = 2)\nreg_squre = Register.square(qubits_side = 2)\nreg_rect = Register.rectangular_lattice(qubits_row = 2, qubits_col = 2)\nreg_triang = Register.triangular_lattice(n_cells_row = 2, n_cells_col = 2)\nreg_honey = Register.honeycomb_lattice(n_cells_row = 2, n_cells_col = 2)\n</code></pre> <p>Qubit coordinates are saved as node properties in the underlying NetworkX graph, but can be accessed directly with the <code>coords</code> property.</p> <p><pre><code>reg = Register.square(2)\nprint(reg.coords)\n</code></pre> <pre><code>{0: (0.5, -0.5), 1: (0.5, 0.5), 2: (-0.5, 0.5), 3: (-0.5, -0.5)}\n</code></pre>  By default, the coords are scaled such that the minimum distance between any two qubits is 1, unless the register is created directly from specific coordinates as shown below. The <code>spacing</code> argument can be used to set the minimum spacing. The <code>rescale_coords</code> method can be used to create a new register by rescaling the coordinates of an already created register.</p> <pre><code>scaled_reg_1 = Register.square(2, spacing = 2.0)\nscaled_reg_2 = reg.rescale_coords(scaling = 2.0)\nprint(scaled_reg_1.coords)\nprint(scaled_reg_2.coords)\n</code></pre> <pre><code>{0: (1.0, -1.0), 1: (1.0, 1.0), 2: (-1.0, 1.0), 3: (-1.0, -1.0)}\n{0: (1.0, -1.0), 1: (1.0, 1.0), 2: (-1.0, 1.0), 3: (-1.0, -1.0)}\n</code></pre> <p>The distance between qubits can also be directly accessed with the <code>distances</code> and <code>edge_distances</code> properties.</p> <pre><code>print(reg.distances)\nprint(reg.edge_distances)\n</code></pre> <pre><code>Distance between all qubit pairs:\n{(0, 1): 1.0, (0, 2): 1.4142135623730951, (0, 3): 1.0, (1, 2): 1.0, (1, 3): 1.4142135623730951, (2, 3): 1.0}\nDistance between qubits connect by an edge in the graph\n{(0, 1): 1.0, (0, 3): 1.0, (1, 2): 1.0, (2, 3): 1.0}\n</code></pre> <p>By calling the <code>Register</code> directly, either the number of nodes or a specific graph can be given as input. If passing a custom graph directly, the node positions will not be defined automatically, and should be previously saved in the <code>\"pos\"</code> node property. If not, <code>reg.coords</code> will return empty tuples and all distances will be 0.</p> <pre><code>import networkx as nx\n# Same as Register.all_to_all(n_qubits = 2):\nreg = Register(2)\n# Register from a custom graph:\ngraph = nx.complete_graph(3)\n# Set node positions, in this case a simple line:\nfor i, node in enumerate(graph.nodes):\ngraph.nodes[node][\"pos\"] = (1.0 * i, 0.0)\nreg = Register(graph)\nprint(reg.distances)\n</code></pre> <pre><code>{(0, 1): 1.0, (0, 2): 2.0, (1, 2): 1.0}\n</code></pre> <p>Alternatively, arbitrarily shaped registers can also be constructed by providing the node coordinates. In this case, there will be no edges automatically created in the connectivity graph.</p> <pre><code>import numpy as np\nfrom qadence import Register\nreg = Register.from_coordinates(\n[(x, np.sin(x)) for x in np.linspace(0, 2*np.pi, 10)]\n)\nreg.draw(show=False)\n</code></pre> 2023-11-27T12:01:05.104035 image/svg+xml Matplotlib v3.7.4, https://matplotlib.org/ <p>Units for qubit coordinates</p> <p>In general, Qadence makes no assumption about the units for qubit coordinates and distances. However, if used in the context of a Hamiltonian coefficient, care should be taken by the user to guarantee the quantity \\(H.t\\) is dimensionless for exponentiation in the PyQTorch backend, where it is assumed that \\(\\hbar = 1\\). For registers passed to the Pulser backend, coordinates are in \\(\\mu \\textrm{m}\\).</p>"},{"location":"tutorials/register/#connectivity-graphs","title":"Connectivity graphs","text":"<p>Register topology is often assumed in digital simulations to be an all-to-all qubit connectivity. When running on real devices that enable the digital-analog computing paradigm, qubit interactions must be specified either by specifying distances between qubits, or by defining edges in the register connectivity graph.</p> <p>It is possible to access the abstract graph nodes and edges to work with if needed as in the perfect state transfer example.</p> <pre><code>from qadence import Register\nreg = Register.rectangular_lattice(2,3)\n</code></pre> <pre><code>reg.nodes = NodeView((0, 1, 2, 3, 4, 5))\nreg.edges = EdgeView([(0, 2), (0, 1), (1, 3), (2, 4), (2, 3), (3, 5), (4, 5)])\n</code></pre> <p>There is also an <code>all_edges</code> property for convencience:</p> <pre><code>print(reg.all_edges)\n</code></pre> <pre><code>[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\n</code></pre> <p>More details about the usage of Registers in the digital-analog paradigm can be found in the digital-analog basics section.</p>"},{"location":"tutorials/serializ_and_prep/","title":"Serialization","text":"<p>Qadence offers convenience functions for serializing and deserializing any quantum program. This is useful for storing quantum programs and sending them for execution over the network via an API.</p> <p>Note</p> <p>Qadence currently uses a custom JSON serialization as interchange format. Support for QASM format for digital quantum programs is currently under consideration.</p> <ul> <li><code>serialize/deserialize</code>: serialize and deserialize a Qadence object into a dictionary</li> <li><code>save/load</code>: save and load a Qadence object to a file with one of the supported   formats. Currently, these are <code>.json</code> and the PyTorch-compatible <code>.pt</code> format.</li> </ul> <p>Let's start with serialization into a dictionary.</p> <pre><code>import torch\nfrom qadence import QuantumCircuit, QuantumModel, DiffMode\nfrom qadence import chain, hamiltonian_factory, feature_map, hea, Z\nfrom qadence.serialization import serialize, deserialize\nn_qubits = 4\nmy_block = chain(feature_map(n_qubits, param=\"x\"), hea(n_qubits, depth=2))\nobs = hamiltonian_factory(n_qubits, detuning=Z)\n# Use the block defined above to create a quantum circuit\n# serialize/deserialize it\nqc = QuantumCircuit(n_qubits, my_block)\nqc_dict = serialize(qc)\nqc_deserialized = deserialize(qc_dict)\nassert qc == qc_deserialized\n# Let's wrap it in a QuantumModel\n# and serialize it\nqm = QuantumModel(qc, obs, diff_mode=DiffMode.AD)\nqm_dict = serialize(qm)\nqm_deserialized = deserialize(qm_dict)\n# Check if the loaded QuantumModel returns the same expectation\nvalues = {\"x\": torch.rand(10)}\nassert torch.allclose(qm.expectation(values=values), qm_deserialized.expectation(values=values))\n</code></pre> <p>Finally, we can save the quantum circuit and the model with the two supported formats.</p> <pre><code>from qadence.serialization import serialize, deserialize, save, load, SerializationFormat\nqc_fname = \"circuit\"\nsave(qc, folder=\".\", file_name=qc_fname, format=SerializationFormat.PT)\nloaded_qc = load(f\"{qc_fname}.pt\")\nassert qc == loaded_qc\nqm_fname = \"model\"\nsave(qm, folder=\".\", file_name=qm_fname, format=SerializationFormat.JSON)\nmodel = load(f\"{qm_fname}.json\")\nassert isinstance(model, QuantumModel)\n</code></pre>"},{"location":"tutorials/state_conventions/","title":"State Conventions","text":"<p>Here is an overview of the state conventions used in Qadence together with practical examples.</p>"},{"location":"tutorials/state_conventions/#qubit-register-order","title":"Qubit register order","text":"<p>Qubit registers in quantum computing are often indexed in increasing or decreasing order from left to right. In Qadence, the convention is qubit indexation in increasing order. For example, a register of four qubits in bra-ket notation reads:</p> \\[|q_0, q_1, q_2, q_3\\rangle\\] <p>Furthermore, when displaying a quantum circuit, qubits are ordered from top to bottom.</p>"},{"location":"tutorials/state_conventions/#basis-state-order","title":"Basis state order","text":"<p>Basis state ordering refers to how basis states are ordered when considering the conversion from bra-ket notation to the standard linear algebra basis. In Qadence, basis states are ordered in the following manner:</p> \\[ \\begin{align} |00\\rangle = [1, 0, 0, 0]^T\\\\ |01\\rangle = [0, 1, 0, 0]^T\\\\ |10\\rangle = [0, 0, 1, 0]^T\\\\ |11\\rangle = [0, 0, 0, 1]^T \\end{align} \\]"},{"location":"tutorials/state_conventions/#endianness","title":"Endianness","text":"<p>Endianness refers to the storage convention for binary information (in bytes) in a classical memory register. In quantum computing, information is either stored in bits or in qubits. The most commonly used conventions are:</p> <ul> <li>A big-endian system stores the most significant bit of a binary word at the smallest memory address.</li> <li>A little-endian system stores the least significant bit of a binary word at the smallest memory address.</li> </ul> <p>Given the register convention in Qadence, the integer \\(2\\) written in binary big-endian as \\(10\\) can be encoded in a qubit register in both big-endian as \\(|10\\rangle\\) or little-endian as \\(|01\\rangle\\).</p> <p>The convention for Qadence is big-endian.</p>"},{"location":"tutorials/state_conventions/#quantum-states","title":"Quantum states","text":"<p>In practical scenarios, conventions regarding register order, basis state order and endianness are very much intertwined, and identical results can be obtained by fixing or varying any of them. In Qadence, we assume that qubit ordering and basis state ordering is fixed, and allow an <code>endianness</code> argument that can be passed to control the expected result. Here are a few examples:</p> <p>A simple and direct way to exemplify the endianness convention is using convenience functions for state preparation.</p> <p>Bitstring convention as inputs</p> <p>When a bitstring is passed as input to a function for state preparation, it has to be understood in big-endian convention.</p> <pre><code>from qadence import Endianness, product_state\n# The state |10&gt;, the 3rd basis state.\nstate_big = product_state(\"10\", endianness=Endianness.BIG) # or just \"Big\"\n# The state |01&gt;, the 2nd basis state.\nstate_little = product_state(\"10\", endianness=Endianness.LITTLE) # or just \"Little\"\n</code></pre> <pre><code>State in big endian = tensor([[0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j]])\nState in little endian = tensor([[0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j]])\n</code></pre> <p>Here, a bitword expressed as a Python string to encode the integer 2 in big-endian is used to create the respective basis state in both conventions. However, note that the same results can be obtained by fixing the endianness convention as big-endian (thus creating the state \\(|10\\rangle\\) in both cases), and changing the basis state ordering. A similar argument holds for fixing both endianness and basis state ordering and simply changing the qubit index order.</p> <p>Another example where endianness directly comes into play is when measuring a register. A big- or little-endian measurement will choose the first or the last qubit, respectively, as the most significant bit. Let's see this in an example:</p> <pre><code>from qadence import I, H, sample\n# Create superposition state: |00&gt; + |01&gt; (normalized)\nblock = I(0) @ H(1)  # Identity on qubit 0, Hadamard on qubit 1\n# Generate bitword samples following both conventions\n# Samples \"00\" and \"01\"\nresult_big = sample(block, endianness=Endianness.BIG)\n# Samples \"00\" and \"10\"\nresult_little = sample(block, endianness=Endianness.LITTLE)\n</code></pre> <pre><code>Sample in big endian = [Counter({'01': 52, '00': 48})]\nSample in little endian = [Counter({'10': 51, '00': 49})]\n</code></pre> <p>In Qadence, endianness can be flipped for many relevant objects:</p> <pre><code>from qadence import invert_endianness\n# Equivalent to sampling in little-endian.\nflip_big_sample = invert_endianness(result_big)\n# Equivalent to a state created in little-endian.\nflip_big_state = invert_endianness(state_big)\n</code></pre> <pre><code>Flipped sample = [Counter({'10': 52, '00': 48})]\nFlipped state = tensor([[0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j]])\n</code></pre>"},{"location":"tutorials/state_conventions/#quantum-operations","title":"Quantum operations","text":"<p>When looking at the matricial form of quantum operations, the usage of the term endianness becomes slightly abusive. To exemplify, we may consider the <code>CNOT</code> operation with <code>control = 0</code> and <code>target = 1</code>. This operation is often described with two different matrices:</p> \\[ \\text{CNOT(0, 1)} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\\\ \\end{bmatrix} \\qquad \\text{or} \\qquad \\text{CNOT(0, 1)} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 \\\\ \\end{bmatrix} \\] <p>The difference can be easily explained either by considering a different ordering of the qubit indices, or a different ordering of the basis states. In Qadence, both can be retrieved through the <code>endianness</code> argument:</p> <pre><code>from qadence import block_to_tensor, CNOT\nmatrix_big = block_to_tensor(CNOT(0, 1), endianness=Endianness.BIG)\nmatrix_little = block_to_tensor(CNOT(0, 1), endianness=Endianness.LITTLE)\n</code></pre> <pre><code>CNOT matrix in big endian =\ntensor([[[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\n[0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j],\n[0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j],\n[0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j]]])\nCNOT matrix in little endian =\ntensor([[[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\n[0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j],\n[0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j],\n[0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j]]])\n</code></pre>"},{"location":"tutorials/state_conventions/#backends","title":"Backends","text":"<p>An important part of having clear state conventions is that we need to make sure our results are consistent accross different computational backends, which may have their own conventions. In Qadence, this is taken care of automatically: by calling operations for different backends, the result is expected to be equivalent up to qubit ordering.</p> <pre><code>from qadence import BackendName, RX, run, sample\nimport torch\n# RX(pi/4) on qubit 1\nn_qubits = 2\nop = RX(1, torch.pi/4)\n</code></pre> <pre><code>Same sampling order in big endian:\nOn PyQTorch = [Counter({'00': 87, '01': 13})]\nOn Braket = [Counter({'00': 87, '01': 13})]\nOn Pulser = [Counter({'00': 89, '01': 11})]\nSame wavefunction order:\nOn PyQTorch = tensor([[0.9239+0.0000j, 0.0000-0.3827j, 0.0000+0.0000j, 0.0000+0.0000j]])\nOn Braket = tensor([[0.9239+0.0000j, 0.0000-0.3827j, 0.0000+0.0000j, 0.0000+0.0000j]])\nOn Pulser = tensor([[0.9241+0.0000j, 0.0000-0.3821j, 0.0000+0.0000j, 0.0000+0.0000j]])\n</code></pre>"},{"location":"tutorials/state_init/","title":"State initialization","text":"<p>Qadence offers convenience routines for preparing initial quantum states. These routines are divided into two approaches:</p> <ul> <li>As a dense matrix.</li> <li>From a suitable quantum circuit. This is available for every backend and it should be added in front of the desired quantum circuit to simulate.</li> </ul> <p>Let's illustrate the usage of the state preparation routine.</p> <pre><code>from qadence import random_state, product_state, is_normalized, StateGeneratorType\n# Random initial state.\n# the default `type` is StateGeneratorType.HaarMeasureFast\nstate = random_state(n_qubits=2, type=StateGeneratorType.RANDOM_ROTATIONS)\n# Check the normalization.\nassert is_normalized(state)\n# Product state from a given bitstring.\n# NB: Qadence follows the big endian convention.\nstate = product_state(\"01\")\n</code></pre> <pre><code>Random initial state generated with rotations:\nstate = [0.98170357+0.08698887j 0.        +0.j         0.1687232 +0.01495058j\n0.        +0.j        ]\nProduct state corresponding to bitstring '01':\nstate = [0.+0.j 1.+0.j 0.+0.j 0.+0.j]\n</code></pre> <p>Now we see how to generate the product state corresponding to the one above with a suitable quantum circuit.</p> <p><pre><code>from qadence import product_block, tag, hea, QuantumCircuit\nfrom qadence.draw import display\nstate_prep_block = product_block(\"01\")\n# display(state_prep_block)\n# Let's now prepare a circuit.\nn_qubits = 4\nstate_prep_block = product_block(\"0001\")\ntag(state_prep_block, \"Prep block\")\ncircuit_block = tag(hea(n_qubits, depth = 2), \"Circuit block\")\nqc_with_state_prep = QuantumCircuit(n_qubits, state_prep_block, circuit_block)\n</code></pre> %3 cluster_5d5137ea88c945609174d4b57b38e158 Circuit block cluster_44145603f5744d6bacb0b968ce4306bc Prep block 41811288d5e5457c8870e370b9087a4f 0 e546d14b248a4c7a929949c3526b5d91 41811288d5e5457c8870e370b9087a4f--e546d14b248a4c7a929949c3526b5d91 57775cc8925146dfacbd35e93865bcad 1 1c0a67be526349e5a199d0d899276cde RX(theta\u2080) e546d14b248a4c7a929949c3526b5d91--1c0a67be526349e5a199d0d899276cde e5d3d09977e249b587f7629fcece5d8c RY(theta\u2084) 1c0a67be526349e5a199d0d899276cde--e5d3d09977e249b587f7629fcece5d8c 6338565553f34ddfaebb0ccb2214f124 RX(theta\u2088) e5d3d09977e249b587f7629fcece5d8c--6338565553f34ddfaebb0ccb2214f124 5251d2075ff84fc9a1aa8d6bc55bbed1 6338565553f34ddfaebb0ccb2214f124--5251d2075ff84fc9a1aa8d6bc55bbed1 7ece6703b1574c00929f66e3826f9eca 5251d2075ff84fc9a1aa8d6bc55bbed1--7ece6703b1574c00929f66e3826f9eca 4f43f216b3804f08b7e2c8e184fd9948 RX(theta\u2081\u2082) 7ece6703b1574c00929f66e3826f9eca--4f43f216b3804f08b7e2c8e184fd9948 ef9c7a38f8ab46478dfe946b1e7ba4c5 RY(theta\u2081\u2086) 4f43f216b3804f08b7e2c8e184fd9948--ef9c7a38f8ab46478dfe946b1e7ba4c5 e9412bf881fd4ffb846ddd070bdc2b1e RX(theta\u2082\u2080) ef9c7a38f8ab46478dfe946b1e7ba4c5--e9412bf881fd4ffb846ddd070bdc2b1e 58e4909119da4121929d7258dd8303b3 e9412bf881fd4ffb846ddd070bdc2b1e--58e4909119da4121929d7258dd8303b3 7b03e0881a62469ea7b0f40b5fec6b58 58e4909119da4121929d7258dd8303b3--7b03e0881a62469ea7b0f40b5fec6b58 0cd8284f2bed46e797d14eda8f6fd484 7b03e0881a62469ea7b0f40b5fec6b58--0cd8284f2bed46e797d14eda8f6fd484 f4798ab4f6354eafb48c675a122c0417 36f14122809d4476af30bdbb712d8834 57775cc8925146dfacbd35e93865bcad--36f14122809d4476af30bdbb712d8834 67e0447692d04c71ac987a064c0df2a1 2 92e5e097ef3147e8936da67100bdc877 RX(theta\u2081) 36f14122809d4476af30bdbb712d8834--92e5e097ef3147e8936da67100bdc877 d22e1081aa60427ca71fbf666f3e0b0d RY(theta\u2085) 92e5e097ef3147e8936da67100bdc877--d22e1081aa60427ca71fbf666f3e0b0d 06ac25fa8db1461c9d8a0e706bd76934 RX(theta\u2089) d22e1081aa60427ca71fbf666f3e0b0d--06ac25fa8db1461c9d8a0e706bd76934 c4597c76ca1f484a8c331fd86cd0fd11 X 06ac25fa8db1461c9d8a0e706bd76934--c4597c76ca1f484a8c331fd86cd0fd11 c4597c76ca1f484a8c331fd86cd0fd11--5251d2075ff84fc9a1aa8d6bc55bbed1 6c458c6c0f024c7ca764a3cdb623d132 c4597c76ca1f484a8c331fd86cd0fd11--6c458c6c0f024c7ca764a3cdb623d132 05c5da3b85ef4a1f8d48461098089211 RX(theta\u2081\u2083) 6c458c6c0f024c7ca764a3cdb623d132--05c5da3b85ef4a1f8d48461098089211 b6a25877a3ee42b1926ccdfd55e654e1 RY(theta\u2081\u2087) 05c5da3b85ef4a1f8d48461098089211--b6a25877a3ee42b1926ccdfd55e654e1 ad1cb920ea244036b50e085e35112b7b RX(theta\u2082\u2081) b6a25877a3ee42b1926ccdfd55e654e1--ad1cb920ea244036b50e085e35112b7b a3e3262bbab9435688c040fa9b3d981f X ad1cb920ea244036b50e085e35112b7b--a3e3262bbab9435688c040fa9b3d981f a3e3262bbab9435688c040fa9b3d981f--58e4909119da4121929d7258dd8303b3 1bad337e8e55418bb015f886fce87070 a3e3262bbab9435688c040fa9b3d981f--1bad337e8e55418bb015f886fce87070 1bad337e8e55418bb015f886fce87070--f4798ab4f6354eafb48c675a122c0417 913bd6c6a3b64022bca9d70c4c97a190 e8b9892f7118475a9fad60d13af4e95f 67e0447692d04c71ac987a064c0df2a1--e8b9892f7118475a9fad60d13af4e95f a89eeca7738244d4b6ea58efe3ab1059 3 a0f7a3cad40f47ebbe3a5017763a3b51 RX(theta\u2082) e8b9892f7118475a9fad60d13af4e95f--a0f7a3cad40f47ebbe3a5017763a3b51 4ab5ecde90694bd39336e7352ece0fd1 RY(theta\u2086) a0f7a3cad40f47ebbe3a5017763a3b51--4ab5ecde90694bd39336e7352ece0fd1 08b6cf88a1504116a33a2cfd24da4dcc RX(theta\u2081\u2080) 4ab5ecde90694bd39336e7352ece0fd1--08b6cf88a1504116a33a2cfd24da4dcc f9d2ed3576cf40a1ac9df1fb09438748 08b6cf88a1504116a33a2cfd24da4dcc--f9d2ed3576cf40a1ac9df1fb09438748 e67453d656e24ec1aecec8e4484b9b05 X f9d2ed3576cf40a1ac9df1fb09438748--e67453d656e24ec1aecec8e4484b9b05 e67453d656e24ec1aecec8e4484b9b05--6c458c6c0f024c7ca764a3cdb623d132 3bbb139c8cfd4cfe8b42fa45e4807ff3 RX(theta\u2081\u2084) e67453d656e24ec1aecec8e4484b9b05--3bbb139c8cfd4cfe8b42fa45e4807ff3 130d65557d494ae5bf5876c55b3b79ce RY(theta\u2081\u2088) 3bbb139c8cfd4cfe8b42fa45e4807ff3--130d65557d494ae5bf5876c55b3b79ce 04c15e674abf41dba8b989d93169636d RX(theta\u2082\u2082) 130d65557d494ae5bf5876c55b3b79ce--04c15e674abf41dba8b989d93169636d 0f736a45a8794788b4676a83c3672ed0 04c15e674abf41dba8b989d93169636d--0f736a45a8794788b4676a83c3672ed0 e2beb9e61f824881a88387ebe46b1fc0 X 0f736a45a8794788b4676a83c3672ed0--e2beb9e61f824881a88387ebe46b1fc0 e2beb9e61f824881a88387ebe46b1fc0--1bad337e8e55418bb015f886fce87070 e2beb9e61f824881a88387ebe46b1fc0--913bd6c6a3b64022bca9d70c4c97a190 4b476347f82a47d98e266ca76b1b71de 8e460e875ac242938260b8bc4a7b4191 X a89eeca7738244d4b6ea58efe3ab1059--8e460e875ac242938260b8bc4a7b4191 53eff2090f564851bfd0d7b72d6bbde1 RX(theta\u2083) 8e460e875ac242938260b8bc4a7b4191--53eff2090f564851bfd0d7b72d6bbde1 c3df0817cf944cfcb8ddeaa7c34aacc9 RY(theta\u2087) 53eff2090f564851bfd0d7b72d6bbde1--c3df0817cf944cfcb8ddeaa7c34aacc9 b7ae042fcbba43669b1b965479081295 RX(theta\u2081\u2081) c3df0817cf944cfcb8ddeaa7c34aacc9--b7ae042fcbba43669b1b965479081295 0eb9219c84004489913d949a1ce3e038 X b7ae042fcbba43669b1b965479081295--0eb9219c84004489913d949a1ce3e038 0eb9219c84004489913d949a1ce3e038--f9d2ed3576cf40a1ac9df1fb09438748 f7cff9b28c1f45219fbd805fbf6bc487 0eb9219c84004489913d949a1ce3e038--f7cff9b28c1f45219fbd805fbf6bc487 651ecc4ce50a41678a1d3e06671e803e RX(theta\u2081\u2085) f7cff9b28c1f45219fbd805fbf6bc487--651ecc4ce50a41678a1d3e06671e803e 81ce5d3b4e1f4d3aaace34f9a3cdfc12 RY(theta\u2081\u2089) 651ecc4ce50a41678a1d3e06671e803e--81ce5d3b4e1f4d3aaace34f9a3cdfc12 071d42f81610422fb04469e648b3d4f1 RX(theta\u2082\u2083) 81ce5d3b4e1f4d3aaace34f9a3cdfc12--071d42f81610422fb04469e648b3d4f1 f0c284a65392415aae605215fe845898 X 071d42f81610422fb04469e648b3d4f1--f0c284a65392415aae605215fe845898 f0c284a65392415aae605215fe845898--0f736a45a8794788b4676a83c3672ed0 565f6bf77bf34a6f939d76cb68855efd f0c284a65392415aae605215fe845898--565f6bf77bf34a6f939d76cb68855efd 565f6bf77bf34a6f939d76cb68855efd--4b476347f82a47d98e266ca76b1b71de  Several standard quantum states can be conveniently initialized in Qadence, both in statevector form as well as in block form as shown in following.</p>"},{"location":"tutorials/state_init/#state-vector-initialization","title":"State vector initialization","text":"<p>Qadence offers a number of constructor functions for state vector preparation.</p> <pre><code>from qadence import uniform_state, zero_state, one_state\nn_qubits = 3\nbatch_size = 2\nuniform_state = uniform_state(n_qubits, batch_size)\nzero_state = zero_state(n_qubits, batch_size)\none_state = one_state(n_qubits, batch_size)\n</code></pre> <pre><code>Uniform state = tensor([[0.3536+0.j, 0.3536+0.j, 0.3536+0.j, 0.3536+0.j, 0.3536+0.j, 0.3536+0.j, 0.3536+0.j,\n0.3536+0.j],\n[0.3536+0.j, 0.3536+0.j, 0.3536+0.j, 0.3536+0.j, 0.3536+0.j, 0.3536+0.j, 0.3536+0.j,\n0.3536+0.j]])\nZero state = tensor([[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\n[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]])\nOne state = tensor([[0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j],\n[0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j]])\n</code></pre> <p>As already seen, product states can be easily created, even in batches:</p> <pre><code>from qadence import product_state, rand_product_state\n# From a bitsring \"100\"\nprod_state = product_state(\"100\", batch_size)\n# Or a random product state\nrand_state = rand_product_state(n_qubits, batch_size)\n</code></pre> <pre><code>Product state = tensor([[0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\n[0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]])\nRandom state = tensor([[0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\n[0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j]])\n</code></pre> <p>Creating a GHZ state:</p> <pre><code>from qadence import ghz_state\nghz = ghz_state(n_qubits, batch_size)\n</code></pre> <pre><code>GHZ state = tensor([[0.7071+0.j, 0.0000+0.j, 0.0000+0.j, 0.0000+0.j, 0.0000+0.j, 0.0000+0.j, 0.0000+0.j,\n0.7071+0.j],\n[0.7071+0.j, 0.0000+0.j, 0.0000+0.j, 0.0000+0.j, 0.0000+0.j, 0.0000+0.j, 0.0000+0.j,\n0.7071+0.j]])\n</code></pre> <p>Creating a random state uniformly sampled from a Haar measure:</p> <pre><code>from qadence import random_state\nrand_haar_state = random_state(n_qubits, batch_size)\n</code></pre> <pre><code>Random state from Haar = tensor([[-0.3367+0.1492j, -0.2387-0.4529j, -0.0397+0.1336j, -0.1125+0.5659j,\n-0.0703-0.0669j, -0.0778+0.2793j,  0.3534-0.1424j,  0.0682+0.0811j],\n[ 0.3436+0.2393j,  0.0505-0.0122j, -0.0484-0.1730j, -0.0440+0.2970j,\n0.3615+0.2362j,  0.2817-0.0456j,  0.2953+0.4642j, -0.2217+0.2824j]])\n</code></pre> <p>Custom initial states can then be passed to either <code>run</code>, <code>sample</code> and <code>expectation</code> through the <code>state</code> argument</p> <pre><code>from qadence import random_state, product_state, CNOT, run\ninit_state = product_state(\"10\")\nfinal_state = run(CNOT(0, 1), state=init_state)\n</code></pre> <pre><code>Final state = tensor([[0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j]])\n</code></pre>"},{"location":"tutorials/state_init/#block-initialization","title":"Block initialization","text":"<p>Not all backends support custom statevector initialization, however previous utility functions have their counterparts to initialize the respective blocks:</p> <pre><code>from qadence import uniform_block, one_block\nn_qubits = 3\nuniform_block = uniform_block(n_qubits)\none_block = one_block(n_qubits)\n</code></pre> <pre><code>KronBlock(0,1,2)\n\u251c\u2500\u2500 H(0)\n\u251c\u2500\u2500 H(1)\n\u2514\u2500\u2500 H(2)\nKronBlock(0,1,2)\n\u251c\u2500\u2500 X(0)\n\u251c\u2500\u2500 X(1)\n\u2514\u2500\u2500 X(2)\n</code></pre> <p>Similarly, for product states:</p> <pre><code>from qadence import product_block, rand_product_block\nproduct_block = product_block(\"100\")\nrand_product_block = rand_product_block(n_qubits)\n</code></pre> <pre><code>KronBlock(0,1,2)\n\u251c\u2500\u2500 X(0)\n\u251c\u2500\u2500 I(1)\n\u2514\u2500\u2500 I(2)\nKronBlock(0,1,2)\n\u251c\u2500\u2500 X(0)\n\u251c\u2500\u2500 I(1)\n\u2514\u2500\u2500 I(2)\n</code></pre> <p>And GHZ states:</p> <pre><code>from qadence import ghz_block\nghz_block = ghz_block(n_qubits)\n</code></pre> <pre><code>ChainBlock(0,1,2)\n\u251c\u2500\u2500 H(0)\n\u2514\u2500\u2500 ChainBlock(0,1,2)\n\u251c\u2500\u2500 CNOT(0, 1)\n\u2514\u2500\u2500 CNOT(1, 2)\n</code></pre> <p>Initial state blocks can simply be chained at the start of a given circuit.</p>"},{"location":"tutorials/state_init/#utility-functions","title":"Utility functions","text":"<p>Some state vector utility functions are also available. We can easily create the probability mass function of a given statevector using <code>torch.distributions.Categorical</code></p> <pre><code>from qadence import random_state, pmf\nn_qubits = 3\nstate = random_state(n_qubits)\ndistribution = pmf(state)\n</code></pre> <pre><code>Categorical(probs: torch.Size([1, 8]))\n</code></pre> <p>We can also check if a state is normalized:</p> <pre><code>from qadence import random_state, is_normalized\nstate = random_state(n_qubits)\nprint(is_normalized(state))\n</code></pre> <pre><code>True\n</code></pre> <p>Or normalize a state:</p> <pre><code>import torch\nfrom qadence import normalize, is_normalized\nstate = torch.tensor([[1, 1, 1, 1]], dtype = torch.cdouble)\nprint(normalize(state))\n</code></pre> <pre><code>tensor([[0.5000+0.j, 0.5000+0.j, 0.5000+0.j, 0.5000+0.j]])\n</code></pre>"}]}